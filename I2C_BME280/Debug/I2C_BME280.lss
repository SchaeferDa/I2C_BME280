
I2C_BME280.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001924  000019b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  000019c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017f0  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3c  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de4  00000000  00000000  00003ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00004c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000767  00000000  00000000  00004fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa2  00000000  00000000  0000571b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000061bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e2       	ldi	r30, 0x24	; 36
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 30       	cpi	r26, 0x0C	; 12
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e0       	ldi	r26, 0x0C	; 12
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 31       	cpi	r26, 0x19	; 25
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a3 02 	call	0x546	; 0x546 <main>
      9e:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initBME280>:
int16_t dig_T2;
int16_t dig_T3;
int32_t t_fine;

void initBME280(unsigned char address)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	1f 92       	push	r1
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
	slaveAddressR = address | 0b00000001;
      b2:	89 81       	ldd	r24, Y+1	; 0x01
      b4:	81 60       	ori	r24, 0x01	; 1
      b6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	slaveAddressW = address & 0b11111110;
      ba:	89 81       	ldd	r24, Y+1	; 0x01
      bc:	8e 7f       	andi	r24, 0xFE	; 254
      be:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <slaveAddressW>
}
      c2:	00 00       	nop
      c4:	0f 90       	pop	r0
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <configBME280ForTemperatureMeasurement>:

void configBME280ForTemperatureMeasurement()
{
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
	// T_oversampling = x1; P_oversampling = x1; activate sleep mode
	writeToRegister(0xF4, 0b00100100);
      d4:	64 e2       	ldi	r22, 0x24	; 36
      d6:	84 ef       	ldi	r24, 0xF4	; 244
      d8:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeToRegister>
	
	// filter = 2
	writeToRegister(0xF5, 0b00000100);
      dc:	64 e0       	ldi	r22, 0x04	; 4
      de:	85 ef       	ldi	r24, 0xF5	; 245
      e0:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeToRegister>
	
	// T_oversampling = x1; P_oversampling = x1; activate forced mode
	writeToRegister(0xF4, 0b00100101);
      e4:	65 e2       	ldi	r22, 0x25	; 37
      e6:	84 ef       	ldi	r24, 0xF4	; 244
      e8:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeToRegister>
	
	// get calibration values
	getCalibrationValues();
      ec:	0e 94 1f 01 	call	0x23e	; 0x23e <getCalibrationValues>
}
      f0:	00 00       	nop
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <writeToRegister>:

boolean writeToRegister(unsigned char registerAddress, unsigned char data)
{
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	00 d0       	rcall	.+0      	; 0xfe <writeToRegister+0x6>
      fe:	1f 92       	push	r1
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	8a 83       	std	Y+2, r24	; 0x02
     106:	6b 83       	std	Y+3, r22	; 0x03
	boolean state = FALSE;
     108:	19 82       	std	Y+1, r1	; 0x01
	
	sendStartCondition();
     10a:	0e 94 86 07 	call	0xf0c	; 0xf0c <sendStartCondition>
	
	if(sendByte(slaveAddressW) && sendByte(registerAddress) && sendByte(data))
     10e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <slaveAddressW>
     112:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     116:	88 23       	and	r24, r24
     118:	61 f0       	breq	.+24     	; 0x132 <writeToRegister+0x3a>
     11a:	8a 81       	ldd	r24, Y+2	; 0x02
     11c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     120:	88 23       	and	r24, r24
     122:	39 f0       	breq	.+14     	; 0x132 <writeToRegister+0x3a>
     124:	8b 81       	ldd	r24, Y+3	; 0x03
     126:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     12a:	88 23       	and	r24, r24
     12c:	11 f0       	breq	.+4      	; 0x132 <writeToRegister+0x3a>
		state = TRUE;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	89 83       	std	Y+1, r24	; 0x01
	
	sendStopCondition();
     132:	0e 94 b6 07 	call	0xf6c	; 0xf6c <sendStopCondition>
	
	return state;
     136:	89 81       	ldd	r24, Y+1	; 0x01
}
     138:	0f 90       	pop	r0
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <getTemperature>:

int32_t getTemperature()
{
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	00 d0       	rcall	.+0      	; 0x14a <getTemperature+0x6>
     14a:	00 d0       	rcall	.+0      	; 0x14c <getTemperature+0x8>
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
	// initiate measurement
	writeToRegister(0xF4, 0b00100001);
     150:	61 e2       	ldi	r22, 0x21	; 33
     152:	84 ef       	ldi	r24, 0xF4	; 244
     154:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeToRegister>
	
	int32_t temp = 0;
     158:	19 82       	std	Y+1, r1	; 0x01
     15a:	1a 82       	std	Y+2, r1	; 0x02
     15c:	1b 82       	std	Y+3, r1	; 0x03
     15e:	1c 82       	std	Y+4, r1	; 0x04
	
	temp |= ((int32_t)readRegister(slaveAddressW, 0xFA) << 12);
     160:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <slaveAddressW>
     164:	6a ef       	ldi	r22, 0xFA	; 250
     166:	0e 94 62 08 	call	0x10c4	; 0x10c4 <readRegister>
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	07 2e       	mov	r0, r23
     174:	7c e0       	ldi	r23, 0x0C	; 12
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	aa 1f       	adc	r26, r26
     17c:	bb 1f       	adc	r27, r27
     17e:	7a 95       	dec	r23
     180:	d1 f7       	brne	.-12     	; 0x176 <getTemperature+0x32>
     182:	70 2d       	mov	r23, r0
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	3a 81       	ldd	r19, Y+2	; 0x02
     188:	4b 81       	ldd	r20, Y+3	; 0x03
     18a:	5c 81       	ldd	r21, Y+4	; 0x04
     18c:	82 2b       	or	r24, r18
     18e:	93 2b       	or	r25, r19
     190:	a4 2b       	or	r26, r20
     192:	b5 2b       	or	r27, r21
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	9a 83       	std	Y+2, r25	; 0x02
     198:	ab 83       	std	Y+3, r26	; 0x03
     19a:	bc 83       	std	Y+4, r27	; 0x04
	temp |= ((int32_t)readRegister(slaveAddressW, 0xFB) <<  4);
     19c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <slaveAddressW>
     1a0:	6b ef       	ldi	r22, 0xFB	; 251
     1a2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <readRegister>
     1a6:	88 2f       	mov	r24, r24
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	88 0f       	add	r24, r24
     1b0:	99 1f       	adc	r25, r25
     1b2:	aa 1f       	adc	r26, r26
     1b4:	bb 1f       	adc	r27, r27
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	aa 1f       	adc	r26, r26
     1bc:	bb 1f       	adc	r27, r27
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	aa 1f       	adc	r26, r26
     1c4:	bb 1f       	adc	r27, r27
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	aa 1f       	adc	r26, r26
     1cc:	bb 1f       	adc	r27, r27
     1ce:	9c 01       	movw	r18, r24
     1d0:	ad 01       	movw	r20, r26
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	ab 81       	ldd	r26, Y+3	; 0x03
     1d8:	bc 81       	ldd	r27, Y+4	; 0x04
     1da:	82 2b       	or	r24, r18
     1dc:	93 2b       	or	r25, r19
     1de:	a4 2b       	or	r26, r20
     1e0:	b5 2b       	or	r27, r21
     1e2:	89 83       	std	Y+1, r24	; 0x01
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	ab 83       	std	Y+3, r26	; 0x03
     1e8:	bc 83       	std	Y+4, r27	; 0x04
	temp |= ((int32_t)readRegister(slaveAddressW, 0xFC) >>  4);
     1ea:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <slaveAddressW>
     1ee:	6c ef       	ldi	r22, 0xFC	; 252
     1f0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <readRegister>
     1f4:	82 95       	swap	r24
     1f6:	8f 70       	andi	r24, 0x0F	; 15
     1f8:	88 2f       	mov	r24, r24
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	29 81       	ldd	r18, Y+1	; 0x01
     202:	3a 81       	ldd	r19, Y+2	; 0x02
     204:	4b 81       	ldd	r20, Y+3	; 0x03
     206:	5c 81       	ldd	r21, Y+4	; 0x04
     208:	82 2b       	or	r24, r18
     20a:	93 2b       	or	r25, r19
     20c:	a4 2b       	or	r26, r20
     20e:	b5 2b       	or	r27, r21
     210:	89 83       	std	Y+1, r24	; 0x01
     212:	9a 83       	std	Y+2, r25	; 0x02
     214:	ab 83       	std	Y+3, r26	; 0x03
     216:	bc 83       	std	Y+4, r27	; 0x04
	
	return BME280_compensate_T_int32(temp);
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	ab 81       	ldd	r26, Y+3	; 0x03
     21e:	bc 81       	ldd	r27, Y+4	; 0x04
     220:	bc 01       	movw	r22, r24
     222:	cd 01       	movw	r24, r26
     224:	0e 94 a0 01 	call	0x340	; 0x340 <BME280_compensate_T_int32>
     228:	dc 01       	movw	r26, r24
     22a:	cb 01       	movw	r24, r22
}
     22c:	bc 01       	movw	r22, r24
     22e:	cd 01       	movw	r24, r26
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <getCalibrationValues>:

void getCalibrationValues()
{	
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	cd b7       	in	r28, 0x3d	; 61
     244:	de b7       	in	r29, 0x3e	; 62
	dig_T1 = 0;
     246:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <dig_T1+0x1>
     24a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <dig_T1>
	dig_T2 = 0;
     24e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <dig_T2+0x1>
     252:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <dig_T2>
	dig_T3 = 0;
     256:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <dig_T3+0x1>
     25a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <dig_T3>
	
	dig_T1 |= readRegister(slaveAddressR, 0x88);
     25e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     262:	68 e8       	ldi	r22, 0x88	; 136
     264:	0e 94 62 08 	call	0x10c4	; 0x10c4 <readRegister>
     268:	28 2f       	mov	r18, r24
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_T1>
     270:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_T1+0x1>
     274:	82 2b       	or	r24, r18
     276:	93 2b       	or	r25, r19
     278:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <dig_T1+0x1>
     27c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dig_T1>
	dig_T1 |= (readRegister(slaveAddressR, 0x89) << 8);
     280:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     284:	69 e8       	ldi	r22, 0x89	; 137
     286:	0e 94 62 08 	call	0x10c4	; 0x10c4 <readRegister>
     28a:	88 2f       	mov	r24, r24
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	98 2f       	mov	r25, r24
     290:	88 27       	eor	r24, r24
     292:	9c 01       	movw	r18, r24
     294:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_T1>
     298:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_T1+0x1>
     29c:	82 2b       	or	r24, r18
     29e:	93 2b       	or	r25, r19
     2a0:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <dig_T1+0x1>
     2a4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dig_T1>
	
	dig_T2 |= readRegister(slaveAddressR, 0x8A);
     2a8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     2ac:	6a e8       	ldi	r22, 0x8A	; 138
     2ae:	0e 94 62 08 	call	0x10c4	; 0x10c4 <readRegister>
     2b2:	28 2f       	mov	r18, r24
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T2>
     2ba:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T2+0x1>
     2be:	82 2b       	or	r24, r18
     2c0:	93 2b       	or	r25, r19
     2c2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <dig_T2+0x1>
     2c6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dig_T2>
	dig_T2 |= (readRegister(slaveAddressR, 0x8B) << 8);
     2ca:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     2ce:	6b e8       	ldi	r22, 0x8B	; 139
     2d0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <readRegister>
     2d4:	88 2f       	mov	r24, r24
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	38 2f       	mov	r19, r24
     2da:	22 27       	eor	r18, r18
     2dc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T2>
     2e0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T2+0x1>
     2e4:	82 2b       	or	r24, r18
     2e6:	93 2b       	or	r25, r19
     2e8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <dig_T2+0x1>
     2ec:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dig_T2>
	
	dig_T3 |= readRegister(slaveAddressR, 0x8C);
     2f0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     2f4:	6c e8       	ldi	r22, 0x8C	; 140
     2f6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <readRegister>
     2fa:	28 2f       	mov	r18, r24
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <dig_T3>
     302:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <dig_T3+0x1>
     306:	82 2b       	or	r24, r18
     308:	93 2b       	or	r25, r19
     30a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <dig_T3+0x1>
     30e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <dig_T3>
	dig_T3 |= (readRegister(slaveAddressR, 0x8D) << 8);
     312:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     316:	6d e8       	ldi	r22, 0x8D	; 141
     318:	0e 94 62 08 	call	0x10c4	; 0x10c4 <readRegister>
     31c:	88 2f       	mov	r24, r24
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	38 2f       	mov	r19, r24
     322:	22 27       	eor	r18, r18
     324:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <dig_T3>
     328:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <dig_T3+0x1>
     32c:	82 2b       	or	r24, r18
     32e:	93 2b       	or	r25, r19
     330:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <dig_T3+0x1>
     334:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <dig_T3>
}
     338:	00 00       	nop
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <BME280_compensate_T_int32>:

// from Bosch Sensortec [datasheet]
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
     340:	af 92       	push	r10
     342:	bf 92       	push	r11
     344:	cf 92       	push	r12
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	60 97       	sbiw	r28, 0x10	; 16
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	6d 87       	std	Y+13, r22	; 0x0d
     366:	7e 87       	std	Y+14, r23	; 0x0e
     368:	8f 87       	std	Y+15, r24	; 0x0f
     36a:	98 8b       	std	Y+16, r25	; 0x10
	int32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
     36c:	8d 85       	ldd	r24, Y+13	; 0x0d
     36e:	9e 85       	ldd	r25, Y+14	; 0x0e
     370:	af 85       	ldd	r26, Y+15	; 0x0f
     372:	b8 89       	ldd	r27, Y+16	; 0x10
     374:	9c 01       	movw	r18, r24
     376:	ad 01       	movw	r20, r26
     378:	68 94       	set
     37a:	12 f8       	bld	r1, 2
     37c:	55 95       	asr	r21
     37e:	47 95       	ror	r20
     380:	37 95       	ror	r19
     382:	27 95       	ror	r18
     384:	16 94       	lsr	r1
     386:	d1 f7       	brne	.-12     	; 0x37c <BME280_compensate_T_int32+0x3c>
     388:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_T1>
     38c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_T1+0x1>
     390:	cc 01       	movw	r24, r24
     392:	a0 e0       	ldi	r26, 0x00	; 0
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	aa 1f       	adc	r26, r26
     39c:	bb 1f       	adc	r27, r27
     39e:	28 1b       	sub	r18, r24
     3a0:	39 0b       	sbc	r19, r25
     3a2:	4a 0b       	sbc	r20, r26
     3a4:	5b 0b       	sbc	r21, r27
     3a6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T2>
     3aa:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T2+0x1>
     3ae:	09 2e       	mov	r0, r25
     3b0:	00 0c       	add	r0, r0
     3b2:	aa 0b       	sbc	r26, r26
     3b4:	bb 0b       	sbc	r27, r27
     3b6:	bc 01       	movw	r22, r24
     3b8:	cd 01       	movw	r24, r26
     3ba:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__mulsi3>
     3be:	dc 01       	movw	r26, r24
     3c0:	cb 01       	movw	r24, r22
     3c2:	07 2e       	mov	r0, r23
     3c4:	7b e0       	ldi	r23, 0x0B	; 11
     3c6:	b5 95       	asr	r27
     3c8:	a7 95       	ror	r26
     3ca:	97 95       	ror	r25
     3cc:	87 95       	ror	r24
     3ce:	7a 95       	dec	r23
     3d0:	d1 f7       	brne	.-12     	; 0x3c6 <BME280_compensate_T_int32+0x86>
     3d2:	70 2d       	mov	r23, r0
     3d4:	89 83       	std	Y+1, r24	; 0x01
     3d6:	9a 83       	std	Y+2, r25	; 0x02
     3d8:	ab 83       	std	Y+3, r26	; 0x03
     3da:	bc 83       	std	Y+4, r27	; 0x04
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
     3dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     3de:	9e 85       	ldd	r25, Y+14	; 0x0e
     3e0:	af 85       	ldd	r26, Y+15	; 0x0f
     3e2:	b8 89       	ldd	r27, Y+16	; 0x10
     3e4:	9c 01       	movw	r18, r24
     3e6:	ad 01       	movw	r20, r26
     3e8:	68 94       	set
     3ea:	13 f8       	bld	r1, 3
     3ec:	55 95       	asr	r21
     3ee:	47 95       	ror	r20
     3f0:	37 95       	ror	r19
     3f2:	27 95       	ror	r18
     3f4:	16 94       	lsr	r1
     3f6:	d1 f7       	brne	.-12     	; 0x3ec <BME280_compensate_T_int32+0xac>
     3f8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_T1>
     3fc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_T1+0x1>
     400:	cc 01       	movw	r24, r24
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	79 01       	movw	r14, r18
     408:	8a 01       	movw	r16, r20
     40a:	e8 1a       	sub	r14, r24
     40c:	f9 0a       	sbc	r15, r25
     40e:	0a 0b       	sbc	r16, r26
     410:	1b 0b       	sbc	r17, r27
     412:	8d 85       	ldd	r24, Y+13	; 0x0d
     414:	9e 85       	ldd	r25, Y+14	; 0x0e
     416:	af 85       	ldd	r26, Y+15	; 0x0f
     418:	b8 89       	ldd	r27, Y+16	; 0x10
     41a:	9c 01       	movw	r18, r24
     41c:	ad 01       	movw	r20, r26
     41e:	68 94       	set
     420:	13 f8       	bld	r1, 3
     422:	55 95       	asr	r21
     424:	47 95       	ror	r20
     426:	37 95       	ror	r19
     428:	27 95       	ror	r18
     42a:	16 94       	lsr	r1
     42c:	d1 f7       	brne	.-12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     42e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_T1>
     432:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_T1+0x1>
     436:	cc 01       	movw	r24, r24
     438:	a0 e0       	ldi	r26, 0x00	; 0
     43a:	b0 e0       	ldi	r27, 0x00	; 0
     43c:	59 01       	movw	r10, r18
     43e:	6a 01       	movw	r12, r20
     440:	a8 1a       	sub	r10, r24
     442:	b9 0a       	sbc	r11, r25
     444:	ca 0a       	sbc	r12, r26
     446:	db 0a       	sbc	r13, r27
     448:	d6 01       	movw	r26, r12
     44a:	c5 01       	movw	r24, r10
     44c:	a8 01       	movw	r20, r16
     44e:	97 01       	movw	r18, r14
     450:	bc 01       	movw	r22, r24
     452:	cd 01       	movw	r24, r26
     454:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__mulsi3>
     458:	dc 01       	movw	r26, r24
     45a:	cb 01       	movw	r24, r22
     45c:	9c 01       	movw	r18, r24
     45e:	ad 01       	movw	r20, r26
     460:	01 2e       	mov	r0, r17
     462:	1c e0       	ldi	r17, 0x0C	; 12
     464:	55 95       	asr	r21
     466:	47 95       	ror	r20
     468:	37 95       	ror	r19
     46a:	27 95       	ror	r18
     46c:	1a 95       	dec	r17
     46e:	d1 f7       	brne	.-12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     470:	10 2d       	mov	r17, r0
     472:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <dig_T3>
     476:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <dig_T3+0x1>
     47a:	09 2e       	mov	r0, r25
     47c:	00 0c       	add	r0, r0
     47e:	aa 0b       	sbc	r26, r26
     480:	bb 0b       	sbc	r27, r27
     482:	bc 01       	movw	r22, r24
     484:	cd 01       	movw	r24, r26
     486:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__mulsi3>
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	07 2e       	mov	r0, r23
     490:	7e e0       	ldi	r23, 0x0E	; 14
     492:	b5 95       	asr	r27
     494:	a7 95       	ror	r26
     496:	97 95       	ror	r25
     498:	87 95       	ror	r24
     49a:	7a 95       	dec	r23
     49c:	d1 f7       	brne	.-12     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49e:	70 2d       	mov	r23, r0
     4a0:	8d 83       	std	Y+5, r24	; 0x05
     4a2:	9e 83       	std	Y+6, r25	; 0x06
     4a4:	af 83       	std	Y+7, r26	; 0x07
     4a6:	b8 87       	std	Y+8, r27	; 0x08
	t_fine = var1 + var2;
     4a8:	29 81       	ldd	r18, Y+1	; 0x01
     4aa:	3a 81       	ldd	r19, Y+2	; 0x02
     4ac:	4b 81       	ldd	r20, Y+3	; 0x03
     4ae:	5c 81       	ldd	r21, Y+4	; 0x04
     4b0:	8d 81       	ldd	r24, Y+5	; 0x05
     4b2:	9e 81       	ldd	r25, Y+6	; 0x06
     4b4:	af 81       	ldd	r26, Y+7	; 0x07
     4b6:	b8 85       	ldd	r27, Y+8	; 0x08
     4b8:	82 0f       	add	r24, r18
     4ba:	93 1f       	adc	r25, r19
     4bc:	a4 1f       	adc	r26, r20
     4be:	b5 1f       	adc	r27, r21
     4c0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <t_fine>
     4c4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <t_fine+0x1>
     4c8:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <t_fine+0x2>
     4cc:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <t_fine+0x3>
	T = (t_fine * 5 + 128) >> 8;
     4d0:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <t_fine>
     4d4:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <t_fine+0x1>
     4d8:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <t_fine+0x2>
     4dc:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <t_fine+0x3>
     4e0:	da 01       	movw	r26, r20
     4e2:	c9 01       	movw	r24, r18
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	aa 1f       	adc	r26, r26
     4ea:	bb 1f       	adc	r27, r27
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	aa 1f       	adc	r26, r26
     4f2:	bb 1f       	adc	r27, r27
     4f4:	82 0f       	add	r24, r18
     4f6:	93 1f       	adc	r25, r19
     4f8:	a4 1f       	adc	r26, r20
     4fa:	b5 1f       	adc	r27, r21
     4fc:	80 58       	subi	r24, 0x80	; 128
     4fe:	9f 4f       	sbci	r25, 0xFF	; 255
     500:	af 4f       	sbci	r26, 0xFF	; 255
     502:	bf 4f       	sbci	r27, 0xFF	; 255
     504:	89 2f       	mov	r24, r25
     506:	9a 2f       	mov	r25, r26
     508:	ab 2f       	mov	r26, r27
     50a:	bb 27       	eor	r27, r27
     50c:	a7 fd       	sbrc	r26, 7
     50e:	ba 95       	dec	r27
     510:	89 87       	std	Y+9, r24	; 0x09
     512:	9a 87       	std	Y+10, r25	; 0x0a
     514:	ab 87       	std	Y+11, r26	; 0x0b
     516:	bc 87       	std	Y+12, r27	; 0x0c
	
	return T;
     518:	89 85       	ldd	r24, Y+9	; 0x09
     51a:	9a 85       	ldd	r25, Y+10	; 0x0a
     51c:	ab 85       	ldd	r26, Y+11	; 0x0b
     51e:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     520:	bc 01       	movw	r22, r24
     522:	cd 01       	movw	r24, r26
     524:	60 96       	adiw	r28, 0x10	; 16
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	bf 90       	pop	r11
     542:	af 90       	pop	r10
     544:	08 95       	ret

00000546 <main>:
#define DEBUG_LED_conf() (DDRD |= (1 << PIND4))
#define DEBUG_LED_on() PORTD |= (1 << PIND4)
#define DEBUG_LED_off() PORTD &= ~(1 << PIND4)

int main(void)
{
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	a2 97       	sbiw	r28, 0x22	; 34
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	// I2C-Address of BME280
	unsigned char slaveAddressBME280 = 0b11101110;
     55a:	8e ee       	ldi	r24, 0xEE	; 238
     55c:	8b 83       	std	Y+3, r24	; 0x03
	
	// I2C-Address of LCD1602
	unsigned char slaveAddressLCD1602 = 0b01001110;
     55e:	8e e4       	ldi	r24, 0x4E	; 78
     560:	8c 83       	std	Y+4, r24	; 0x04
	
	initI2C(10,'u');
     562:	45 e7       	ldi	r20, 0x75	; 117
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	80 e2       	ldi	r24, 0x20	; 32
     56a:	91 e4       	ldi	r25, 0x41	; 65
     56c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <initI2C>
	
	initLCD(slaveAddressLCD1602);
     570:	8c 81       	ldd	r24, Y+4	; 0x04
     572:	0e 94 ad 04 	call	0x95a	; 0x95a <initLCD>
	
	initBME280(slaveAddressBME280);
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	0e 94 53 00 	call	0xa6	; 0xa6 <initBME280>
	
	configBME280ForTemperatureMeasurement();
     57c:	0e 94 66 00 	call	0xcc	; 0xcc <configBME280ForTemperatureMeasurement>
	
	while(1)
	{
		char temp[16] = {0};
     580:	20 e1       	ldi	r18, 0x10	; 16
     582:	ce 01       	movw	r24, r28
     584:	43 96       	adiw	r24, 0x13	; 19
     586:	fc 01       	movw	r30, r24
     588:	32 2f       	mov	r19, r18
     58a:	11 92       	st	Z+, r1
     58c:	3a 95       	dec	r19
     58e:	e9 f7       	brne	.-6      	; 0x58a <main+0x44>
		sprintf(temp, "%ld", getTemperature());		
     590:	0e 94 a2 00 	call	0x144	; 0x144 <getTemperature>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	2b 2f       	mov	r18, r27
     59a:	2f 93       	push	r18
     59c:	2a 2f       	mov	r18, r26
     59e:	2f 93       	push	r18
     5a0:	29 2f       	mov	r18, r25
     5a2:	2f 93       	push	r18
     5a4:	8f 93       	push	r24
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	89 2f       	mov	r24, r25
     5ac:	8f 93       	push	r24
     5ae:	85 e0       	ldi	r24, 0x05	; 5
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	8f 93       	push	r24
     5b4:	ce 01       	movw	r24, r28
     5b6:	43 96       	adiw	r24, 0x13	; 19
     5b8:	29 2f       	mov	r18, r25
     5ba:	2f 93       	push	r18
     5bc:	8f 93       	push	r24
     5be:	0e 94 a6 09 	call	0x134c	; 0x134c <sprintf>
     5c2:	8d b7       	in	r24, 0x3d	; 61
     5c4:	9e b7       	in	r25, 0x3e	; 62
     5c6:	08 96       	adiw	r24, 0x08	; 8
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
		
		for(int i = 15; i > 2; i--)
     5d2:	8f e0       	ldi	r24, 0x0F	; 15
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	9a 83       	std	Y+2, r25	; 0x02
     5d8:	89 83       	std	Y+1, r24	; 0x01
     5da:	18 c0       	rjmp	.+48     	; 0x60c <main+0xc6>
		{
			temp[i] = temp[i-1];
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	9e 01       	movw	r18, r28
     5e4:	2d 5e       	subi	r18, 0xED	; 237
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	82 0f       	add	r24, r18
     5ea:	93 1f       	adc	r25, r19
     5ec:	fc 01       	movw	r30, r24
     5ee:	40 81       	ld	r20, Z
     5f0:	9e 01       	movw	r18, r28
     5f2:	2d 5e       	subi	r18, 0xED	; 237
     5f4:	3f 4f       	sbci	r19, 0xFF	; 255
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	82 0f       	add	r24, r18
     5fc:	93 1f       	adc	r25, r19
     5fe:	fc 01       	movw	r30, r24
     600:	40 83       	st	Z, r20
	while(1)
	{
		char temp[16] = {0};
		sprintf(temp, "%ld", getTemperature());		
		
		for(int i = 15; i > 2; i--)
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	9a 81       	ldd	r25, Y+2	; 0x02
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	9a 83       	std	Y+2, r25	; 0x02
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	03 97       	sbiw	r24, 0x03	; 3
     612:	24 f7       	brge	.-56     	; 0x5dc <main+0x96>
		{
			temp[i] = temp[i-1];
		}
		
		temp[2] = '.';
     614:	8e e2       	ldi	r24, 0x2E	; 46
     616:	8d 8b       	std	Y+21, r24	; 0x15
		
		setCursor(0, 0);
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 a3 05 	call	0xb46	; 0xb46 <setCursor>
		
		writeString(temp);
     620:	ce 01       	movw	r24, r28
     622:	43 96       	adiw	r24, 0x13	; 19
     624:	0e 94 af 05 	call	0xb5e	; 0xb5e <writeString>
		writeChar(0xDF);
     628:	8f ed       	ldi	r24, 0xDF	; 223
     62a:	0e 94 ac 05 	call	0xb58	; 0xb58 <writeChar>
		writeString("C");
     62e:	89 e0       	ldi	r24, 0x09	; 9
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 af 05 	call	0xb5e	; 0xb5e <writeString>
		setCursor(3,17);
     636:	61 e1       	ldi	r22, 0x11	; 17
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	0e 94 a3 05 	call	0xb46	; 0xb46 <setCursor>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	a8 ec       	ldi	r26, 0xC8	; 200
     644:	b2 e4       	ldi	r27, 0x42	; 66
     646:	8d 83       	std	Y+5, r24	; 0x05
     648:	9e 83       	std	Y+6, r25	; 0x06
     64a:	af 83       	std	Y+7, r26	; 0x07
     64c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	4a e7       	ldi	r20, 0x7A	; 122
     654:	55 e4       	ldi	r21, 0x45	; 69
     656:	6d 81       	ldd	r22, Y+5	; 0x05
     658:	7e 81       	ldd	r23, Y+6	; 0x06
     65a:	8f 81       	ldd	r24, Y+7	; 0x07
     65c:	98 85       	ldd	r25, Y+8	; 0x08
     65e:	0e 94 18 04 	call	0x830	; 0x830 <__mulsf3>
     662:	dc 01       	movw	r26, r24
     664:	cb 01       	movw	r24, r22
     666:	89 87       	std	Y+9, r24	; 0x09
     668:	9a 87       	std	Y+10, r25	; 0x0a
     66a:	ab 87       	std	Y+11, r26	; 0x0b
     66c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e8       	ldi	r20, 0x80	; 128
     674:	5f e3       	ldi	r21, 0x3F	; 63
     676:	69 85       	ldd	r22, Y+9	; 0x09
     678:	7a 85       	ldd	r23, Y+10	; 0x0a
     67a:	8b 85       	ldd	r24, Y+11	; 0x0b
     67c:	9c 85       	ldd	r25, Y+12	; 0x0c
     67e:	0e 94 92 03 	call	0x724	; 0x724 <__cmpsf2>
     682:	88 23       	and	r24, r24
     684:	2c f4       	brge	.+10     	; 0x690 <main+0x14a>
		__ticks = 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	9e 87       	std	Y+14, r25	; 0x0e
     68c:	8d 87       	std	Y+13, r24	; 0x0d
     68e:	3f c0       	rjmp	.+126    	; 0x70e <main+0x1c8>
	else if (__tmp > 65535)
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	3f ef       	ldi	r19, 0xFF	; 255
     694:	4f e7       	ldi	r20, 0x7F	; 127
     696:	57 e4       	ldi	r21, 0x47	; 71
     698:	69 85       	ldd	r22, Y+9	; 0x09
     69a:	7a 85       	ldd	r23, Y+10	; 0x0a
     69c:	8b 85       	ldd	r24, Y+11	; 0x0b
     69e:	9c 85       	ldd	r25, Y+12	; 0x0c
     6a0:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
     6a4:	18 16       	cp	r1, r24
     6a6:	4c f5       	brge	.+82     	; 0x6fa <main+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e2       	ldi	r20, 0x20	; 32
     6ae:	51 e4       	ldi	r21, 0x41	; 65
     6b0:	6d 81       	ldd	r22, Y+5	; 0x05
     6b2:	7e 81       	ldd	r23, Y+6	; 0x06
     6b4:	8f 81       	ldd	r24, Y+7	; 0x07
     6b6:	98 85       	ldd	r25, Y+8	; 0x08
     6b8:	0e 94 18 04 	call	0x830	; 0x830 <__mulsf3>
     6bc:	dc 01       	movw	r26, r24
     6be:	cb 01       	movw	r24, r22
     6c0:	bc 01       	movw	r22, r24
     6c2:	cd 01       	movw	r24, r26
     6c4:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	9e 87       	std	Y+14, r25	; 0x0e
     6ce:	8d 87       	std	Y+13, r24	; 0x0d
     6d0:	0f c0       	rjmp	.+30     	; 0x6f0 <main+0x1aa>
     6d2:	80 e9       	ldi	r24, 0x90	; 144
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	98 8b       	std	Y+16, r25	; 0x10
     6d8:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6da:	8f 85       	ldd	r24, Y+15	; 0x0f
     6dc:	98 89       	ldd	r25, Y+16	; 0x10
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <main+0x198>
     6e2:	98 8b       	std	Y+16, r25	; 0x10
     6e4:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e6:	8d 85       	ldd	r24, Y+13	; 0x0d
     6e8:	9e 85       	ldd	r25, Y+14	; 0x0e
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	9e 87       	std	Y+14, r25	; 0x0e
     6ee:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     6f2:	9e 85       	ldd	r25, Y+14	; 0x0e
     6f4:	89 2b       	or	r24, r25
     6f6:	69 f7       	brne	.-38     	; 0x6d2 <main+0x18c>
     6f8:	14 c0       	rjmp	.+40     	; 0x722 <main+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6fa:	69 85       	ldd	r22, Y+9	; 0x09
     6fc:	7a 85       	ldd	r23, Y+10	; 0x0a
     6fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     700:	9c 85       	ldd	r25, Y+12	; 0x0c
     702:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
     706:	dc 01       	movw	r26, r24
     708:	cb 01       	movw	r24, r22
     70a:	9e 87       	std	Y+14, r25	; 0x0e
     70c:	8d 87       	std	Y+13, r24	; 0x0d
     70e:	8d 85       	ldd	r24, Y+13	; 0x0d
     710:	9e 85       	ldd	r25, Y+14	; 0x0e
     712:	9a 8b       	std	Y+18, r25	; 0x12
     714:	89 8b       	std	Y+17, r24	; 0x11
     716:	89 89       	ldd	r24, Y+17	; 0x11
     718:	9a 89       	ldd	r25, Y+18	; 0x12
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <main+0x1d4>
     71e:	9a 8b       	std	Y+18, r25	; 0x12
     720:	89 8b       	std	Y+17, r24	; 0x11
		
		_delay_ms(100);
	}
     722:	2e cf       	rjmp	.-420    	; 0x580 <main+0x3a>

00000724 <__cmpsf2>:
     724:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_cmp>
     728:	08 f4       	brcc	.+2      	; 0x72c <__cmpsf2+0x8>
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	08 95       	ret

0000072e <__fixunssfsi>:
     72e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_splitA>
     732:	88 f0       	brcs	.+34     	; 0x756 <__fixunssfsi+0x28>
     734:	9f 57       	subi	r25, 0x7F	; 127
     736:	98 f0       	brcs	.+38     	; 0x75e <__fixunssfsi+0x30>
     738:	b9 2f       	mov	r27, r25
     73a:	99 27       	eor	r25, r25
     73c:	b7 51       	subi	r27, 0x17	; 23
     73e:	b0 f0       	brcs	.+44     	; 0x76c <__fixunssfsi+0x3e>
     740:	e1 f0       	breq	.+56     	; 0x77a <__fixunssfsi+0x4c>
     742:	66 0f       	add	r22, r22
     744:	77 1f       	adc	r23, r23
     746:	88 1f       	adc	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	1a f0       	brmi	.+6      	; 0x752 <__fixunssfsi+0x24>
     74c:	ba 95       	dec	r27
     74e:	c9 f7       	brne	.-14     	; 0x742 <__fixunssfsi+0x14>
     750:	14 c0       	rjmp	.+40     	; 0x77a <__fixunssfsi+0x4c>
     752:	b1 30       	cpi	r27, 0x01	; 1
     754:	91 f0       	breq	.+36     	; 0x77a <__fixunssfsi+0x4c>
     756:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_zero>
     75a:	b1 e0       	ldi	r27, 0x01	; 1
     75c:	08 95       	ret
     75e:	0c 94 0c 04 	jmp	0x818	; 0x818 <__fp_zero>
     762:	67 2f       	mov	r22, r23
     764:	78 2f       	mov	r23, r24
     766:	88 27       	eor	r24, r24
     768:	b8 5f       	subi	r27, 0xF8	; 248
     76a:	39 f0       	breq	.+14     	; 0x77a <__fixunssfsi+0x4c>
     76c:	b9 3f       	cpi	r27, 0xF9	; 249
     76e:	cc f3       	brlt	.-14     	; 0x762 <__fixunssfsi+0x34>
     770:	86 95       	lsr	r24
     772:	77 95       	ror	r23
     774:	67 95       	ror	r22
     776:	b3 95       	inc	r27
     778:	d9 f7       	brne	.-10     	; 0x770 <__fixunssfsi+0x42>
     77a:	3e f4       	brtc	.+14     	; 0x78a <__fixunssfsi+0x5c>
     77c:	90 95       	com	r25
     77e:	80 95       	com	r24
     780:	70 95       	com	r23
     782:	61 95       	neg	r22
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	8f 4f       	sbci	r24, 0xFF	; 255
     788:	9f 4f       	sbci	r25, 0xFF	; 255
     78a:	08 95       	ret

0000078c <__fp_cmp>:
     78c:	99 0f       	add	r25, r25
     78e:	00 08       	sbc	r0, r0
     790:	55 0f       	add	r21, r21
     792:	aa 0b       	sbc	r26, r26
     794:	e0 e8       	ldi	r30, 0x80	; 128
     796:	fe ef       	ldi	r31, 0xFE	; 254
     798:	16 16       	cp	r1, r22
     79a:	17 06       	cpc	r1, r23
     79c:	e8 07       	cpc	r30, r24
     79e:	f9 07       	cpc	r31, r25
     7a0:	c0 f0       	brcs	.+48     	; 0x7d2 <__fp_cmp+0x46>
     7a2:	12 16       	cp	r1, r18
     7a4:	13 06       	cpc	r1, r19
     7a6:	e4 07       	cpc	r30, r20
     7a8:	f5 07       	cpc	r31, r21
     7aa:	98 f0       	brcs	.+38     	; 0x7d2 <__fp_cmp+0x46>
     7ac:	62 1b       	sub	r22, r18
     7ae:	73 0b       	sbc	r23, r19
     7b0:	84 0b       	sbc	r24, r20
     7b2:	95 0b       	sbc	r25, r21
     7b4:	39 f4       	brne	.+14     	; 0x7c4 <__fp_cmp+0x38>
     7b6:	0a 26       	eor	r0, r26
     7b8:	61 f0       	breq	.+24     	; 0x7d2 <__fp_cmp+0x46>
     7ba:	23 2b       	or	r18, r19
     7bc:	24 2b       	or	r18, r20
     7be:	25 2b       	or	r18, r21
     7c0:	21 f4       	brne	.+8      	; 0x7ca <__fp_cmp+0x3e>
     7c2:	08 95       	ret
     7c4:	0a 26       	eor	r0, r26
     7c6:	09 f4       	brne	.+2      	; 0x7ca <__fp_cmp+0x3e>
     7c8:	a1 40       	sbci	r26, 0x01	; 1
     7ca:	a6 95       	lsr	r26
     7cc:	8f ef       	ldi	r24, 0xFF	; 255
     7ce:	81 1d       	adc	r24, r1
     7d0:	81 1d       	adc	r24, r1
     7d2:	08 95       	ret

000007d4 <__fp_split3>:
     7d4:	57 fd       	sbrc	r21, 7
     7d6:	90 58       	subi	r25, 0x80	; 128
     7d8:	44 0f       	add	r20, r20
     7da:	55 1f       	adc	r21, r21
     7dc:	59 f0       	breq	.+22     	; 0x7f4 <__fp_splitA+0x10>
     7de:	5f 3f       	cpi	r21, 0xFF	; 255
     7e0:	71 f0       	breq	.+28     	; 0x7fe <__fp_splitA+0x1a>
     7e2:	47 95       	ror	r20

000007e4 <__fp_splitA>:
     7e4:	88 0f       	add	r24, r24
     7e6:	97 fb       	bst	r25, 7
     7e8:	99 1f       	adc	r25, r25
     7ea:	61 f0       	breq	.+24     	; 0x804 <__fp_splitA+0x20>
     7ec:	9f 3f       	cpi	r25, 0xFF	; 255
     7ee:	79 f0       	breq	.+30     	; 0x80e <__fp_splitA+0x2a>
     7f0:	87 95       	ror	r24
     7f2:	08 95       	ret
     7f4:	12 16       	cp	r1, r18
     7f6:	13 06       	cpc	r1, r19
     7f8:	14 06       	cpc	r1, r20
     7fa:	55 1f       	adc	r21, r21
     7fc:	f2 cf       	rjmp	.-28     	; 0x7e2 <__fp_split3+0xe>
     7fe:	46 95       	lsr	r20
     800:	f1 df       	rcall	.-30     	; 0x7e4 <__fp_splitA>
     802:	08 c0       	rjmp	.+16     	; 0x814 <__fp_splitA+0x30>
     804:	16 16       	cp	r1, r22
     806:	17 06       	cpc	r1, r23
     808:	18 06       	cpc	r1, r24
     80a:	99 1f       	adc	r25, r25
     80c:	f1 cf       	rjmp	.-30     	; 0x7f0 <__fp_splitA+0xc>
     80e:	86 95       	lsr	r24
     810:	71 05       	cpc	r23, r1
     812:	61 05       	cpc	r22, r1
     814:	08 94       	sec
     816:	08 95       	ret

00000818 <__fp_zero>:
     818:	e8 94       	clt

0000081a <__fp_szero>:
     81a:	bb 27       	eor	r27, r27
     81c:	66 27       	eor	r22, r22
     81e:	77 27       	eor	r23, r23
     820:	cb 01       	movw	r24, r22
     822:	97 f9       	bld	r25, 7
     824:	08 95       	ret

00000826 <__gesf2>:
     826:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_cmp>
     82a:	08 f4       	brcc	.+2      	; 0x82e <__gesf2+0x8>
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	08 95       	ret

00000830 <__mulsf3>:
     830:	0e 94 2b 04 	call	0x856	; 0x856 <__mulsf3x>
     834:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_round>
     838:	0e 94 8e 04 	call	0x91c	; 0x91c <__fp_pscA>
     83c:	38 f0       	brcs	.+14     	; 0x84c <__mulsf3+0x1c>
     83e:	0e 94 95 04 	call	0x92a	; 0x92a <__fp_pscB>
     842:	20 f0       	brcs	.+8      	; 0x84c <__mulsf3+0x1c>
     844:	95 23       	and	r25, r21
     846:	11 f0       	breq	.+4      	; 0x84c <__mulsf3+0x1c>
     848:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_inf>
     84c:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_nan>
     850:	11 24       	eor	r1, r1
     852:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__fp_szero>

00000856 <__mulsf3x>:
     856:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__fp_split3>
     85a:	70 f3       	brcs	.-36     	; 0x838 <__mulsf3+0x8>

0000085c <__mulsf3_pse>:
     85c:	95 9f       	mul	r25, r21
     85e:	c1 f3       	breq	.-16     	; 0x850 <__mulsf3+0x20>
     860:	95 0f       	add	r25, r21
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	55 1f       	adc	r21, r21
     866:	62 9f       	mul	r22, r18
     868:	f0 01       	movw	r30, r0
     86a:	72 9f       	mul	r23, r18
     86c:	bb 27       	eor	r27, r27
     86e:	f0 0d       	add	r31, r0
     870:	b1 1d       	adc	r27, r1
     872:	63 9f       	mul	r22, r19
     874:	aa 27       	eor	r26, r26
     876:	f0 0d       	add	r31, r0
     878:	b1 1d       	adc	r27, r1
     87a:	aa 1f       	adc	r26, r26
     87c:	64 9f       	mul	r22, r20
     87e:	66 27       	eor	r22, r22
     880:	b0 0d       	add	r27, r0
     882:	a1 1d       	adc	r26, r1
     884:	66 1f       	adc	r22, r22
     886:	82 9f       	mul	r24, r18
     888:	22 27       	eor	r18, r18
     88a:	b0 0d       	add	r27, r0
     88c:	a1 1d       	adc	r26, r1
     88e:	62 1f       	adc	r22, r18
     890:	73 9f       	mul	r23, r19
     892:	b0 0d       	add	r27, r0
     894:	a1 1d       	adc	r26, r1
     896:	62 1f       	adc	r22, r18
     898:	83 9f       	mul	r24, r19
     89a:	a0 0d       	add	r26, r0
     89c:	61 1d       	adc	r22, r1
     89e:	22 1f       	adc	r18, r18
     8a0:	74 9f       	mul	r23, r20
     8a2:	33 27       	eor	r19, r19
     8a4:	a0 0d       	add	r26, r0
     8a6:	61 1d       	adc	r22, r1
     8a8:	23 1f       	adc	r18, r19
     8aa:	84 9f       	mul	r24, r20
     8ac:	60 0d       	add	r22, r0
     8ae:	21 1d       	adc	r18, r1
     8b0:	82 2f       	mov	r24, r18
     8b2:	76 2f       	mov	r23, r22
     8b4:	6a 2f       	mov	r22, r26
     8b6:	11 24       	eor	r1, r1
     8b8:	9f 57       	subi	r25, 0x7F	; 127
     8ba:	50 40       	sbci	r21, 0x00	; 0
     8bc:	9a f0       	brmi	.+38     	; 0x8e4 <__mulsf3_pse+0x88>
     8be:	f1 f0       	breq	.+60     	; 0x8fc <__mulsf3_pse+0xa0>
     8c0:	88 23       	and	r24, r24
     8c2:	4a f0       	brmi	.+18     	; 0x8d6 <__mulsf3_pse+0x7a>
     8c4:	ee 0f       	add	r30, r30
     8c6:	ff 1f       	adc	r31, r31
     8c8:	bb 1f       	adc	r27, r27
     8ca:	66 1f       	adc	r22, r22
     8cc:	77 1f       	adc	r23, r23
     8ce:	88 1f       	adc	r24, r24
     8d0:	91 50       	subi	r25, 0x01	; 1
     8d2:	50 40       	sbci	r21, 0x00	; 0
     8d4:	a9 f7       	brne	.-22     	; 0x8c0 <__mulsf3_pse+0x64>
     8d6:	9e 3f       	cpi	r25, 0xFE	; 254
     8d8:	51 05       	cpc	r21, r1
     8da:	80 f0       	brcs	.+32     	; 0x8fc <__mulsf3_pse+0xa0>
     8dc:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_inf>
     8e0:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__fp_szero>
     8e4:	5f 3f       	cpi	r21, 0xFF	; 255
     8e6:	e4 f3       	brlt	.-8      	; 0x8e0 <__mulsf3_pse+0x84>
     8e8:	98 3e       	cpi	r25, 0xE8	; 232
     8ea:	d4 f3       	brlt	.-12     	; 0x8e0 <__mulsf3_pse+0x84>
     8ec:	86 95       	lsr	r24
     8ee:	77 95       	ror	r23
     8f0:	67 95       	ror	r22
     8f2:	b7 95       	ror	r27
     8f4:	f7 95       	ror	r31
     8f6:	e7 95       	ror	r30
     8f8:	9f 5f       	subi	r25, 0xFF	; 255
     8fa:	c1 f7       	brne	.-16     	; 0x8ec <__mulsf3_pse+0x90>
     8fc:	fe 2b       	or	r31, r30
     8fe:	88 0f       	add	r24, r24
     900:	91 1d       	adc	r25, r1
     902:	96 95       	lsr	r25
     904:	87 95       	ror	r24
     906:	97 f9       	bld	r25, 7
     908:	08 95       	ret

0000090a <__fp_inf>:
     90a:	97 f9       	bld	r25, 7
     90c:	9f 67       	ori	r25, 0x7F	; 127
     90e:	80 e8       	ldi	r24, 0x80	; 128
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	08 95       	ret

00000916 <__fp_nan>:
     916:	9f ef       	ldi	r25, 0xFF	; 255
     918:	80 ec       	ldi	r24, 0xC0	; 192
     91a:	08 95       	ret

0000091c <__fp_pscA>:
     91c:	00 24       	eor	r0, r0
     91e:	0a 94       	dec	r0
     920:	16 16       	cp	r1, r22
     922:	17 06       	cpc	r1, r23
     924:	18 06       	cpc	r1, r24
     926:	09 06       	cpc	r0, r25
     928:	08 95       	ret

0000092a <__fp_pscB>:
     92a:	00 24       	eor	r0, r0
     92c:	0a 94       	dec	r0
     92e:	12 16       	cp	r1, r18
     930:	13 06       	cpc	r1, r19
     932:	14 06       	cpc	r1, r20
     934:	05 06       	cpc	r0, r21
     936:	08 95       	ret

00000938 <__fp_round>:
     938:	09 2e       	mov	r0, r25
     93a:	03 94       	inc	r0
     93c:	00 0c       	add	r0, r0
     93e:	11 f4       	brne	.+4      	; 0x944 <__fp_round+0xc>
     940:	88 23       	and	r24, r24
     942:	52 f0       	brmi	.+20     	; 0x958 <__fp_round+0x20>
     944:	bb 0f       	add	r27, r27
     946:	40 f4       	brcc	.+16     	; 0x958 <__fp_round+0x20>
     948:	bf 2b       	or	r27, r31
     94a:	11 f4       	brne	.+4      	; 0x950 <__fp_round+0x18>
     94c:	60 ff       	sbrs	r22, 0
     94e:	04 c0       	rjmp	.+8      	; 0x958 <__fp_round+0x20>
     950:	6f 5f       	subi	r22, 0xFF	; 255
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	8f 4f       	sbci	r24, 0xFF	; 255
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	08 95       	ret

0000095a <initLCD>:

/************************************************************************/
/* Initializes the LCD for 4-Bit mode                                   */
/************************************************************************/
void initLCD(char slaveAddress)
{
     95a:	cf 93       	push	r28
     95c:	c8 2f       	mov	r28, r24
	initI2C(10,'u');
     95e:	45 e7       	ldi	r20, 0x75	; 117
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	80 e2       	ldi	r24, 0x20	; 32
     966:	91 e4       	ldi	r25, 0x41	; 65
     968:	0e 94 c5 05 	call	0xb8a	; 0xb8a <initI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     96c:	2f ef       	ldi	r18, 0xFF	; 255
     96e:	89 e6       	ldi	r24, 0x69	; 105
     970:	98 e1       	ldi	r25, 0x18	; 24
     972:	21 50       	subi	r18, 0x01	; 1
     974:	80 40       	sbci	r24, 0x00	; 0
     976:	90 40       	sbci	r25, 0x00	; 0
     978:	e1 f7       	brne	.-8      	; 0x972 <initLCD+0x18>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <initLCD+0x22>
     97c:	00 00       	nop
	_delay_ms(500);
	
	sendStartCondition();
     97e:	0e 94 86 07 	call	0xf0c	; 0xf0c <sendStartCondition>
	
	if(sendByte(slaveAddress))
     982:	8c 2f       	mov	r24, r28
     984:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     988:	88 23       	and	r24, r24
     98a:	09 f4       	brne	.+2      	; 0x98e <initLCD+0x34>
     98c:	88 c0       	rjmp	.+272    	; 0xa9e <initLCD+0x144>
	{
		savedSlaveAddress = slaveAddress;
     98e:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <savedSlaveAddress>
     992:	8f e5       	ldi	r24, 0x5F	; 95
     994:	9a ee       	ldi	r25, 0xEA	; 234
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	f1 f7       	brne	.-4      	; 0x996 <initLCD+0x3c>
     99a:	00 c0       	rjmp	.+0      	; 0x99c <initLCD+0x42>
     99c:	00 00       	nop
		
		//Init LCD
		_delay_ms(15);
		sendByte(0b00110100);
     99e:	84 e3       	ldi	r24, 0x34	; 52
     9a0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00110000);
     9a4:	80 e3       	ldi	r24, 0x30	; 48
     9a6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     9aa:	9f e7       	ldi	r25, 0x7F	; 127
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	91 50       	subi	r25, 0x01	; 1
     9b2:	20 40       	sbci	r18, 0x00	; 0
     9b4:	80 40       	sbci	r24, 0x00	; 0
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <initLCD+0x56>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <initLCD+0x60>
     9ba:	00 00       	nop
		_delay_ms(41);
		sendByte(0b00110100);
     9bc:	84 e3       	ldi	r24, 0x34	; 52
     9be:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00110000);
     9c2:	80 e3       	ldi	r24, 0x30	; 48
     9c4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c8:	8f e8       	ldi	r24, 0x8F	; 143
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <initLCD+0x72>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <initLCD+0x78>
     9d2:	00 00       	nop
		_delay_us(100);
		sendByte(0b00110100);
     9d4:	84 e3       	ldi	r24, 0x34	; 52
     9d6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00110000);
     9da:	80 e3       	ldi	r24, 0x30	; 48
     9dc:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9e0:	9f e7       	ldi	r25, 0x7F	; 127
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	91 50       	subi	r25, 0x01	; 1
     9e8:	20 40       	sbci	r18, 0x00	; 0
     9ea:	80 40       	sbci	r24, 0x00	; 0
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <initLCD+0x8c>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <initLCD+0x96>
     9f0:	00 00       	nop
		_delay_ms(41);
		sendByte(0b00100100);
     9f2:	84 e2       	ldi	r24, 0x24	; 36
     9f4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00100000);
     9f8:	80 e2       	ldi	r24, 0x20	; 32
     9fa:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9fe:	95 ed       	ldi	r25, 0xD5	; 213
     a00:	9a 95       	dec	r25
     a02:	f1 f7       	brne	.-4      	; 0xa00 <initLCD+0xa6>
     a04:	00 00       	nop
		
		//Config
		_delay_us(40);
		sendByte(0b00100100);
     a06:	84 e2       	ldi	r24, 0x24	; 36
     a08:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00100000);
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b10000100);
     a12:	84 e8       	ldi	r24, 0x84	; 132
     a14:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b10000000);
     a18:	80 e8       	ldi	r24, 0x80	; 128
     a1a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     a1e:	25 ed       	ldi	r18, 0xD5	; 213
     a20:	2a 95       	dec	r18
     a22:	f1 f7       	brne	.-4      	; 0xa20 <initLCD+0xc6>
     a24:	00 00       	nop
		
		//Display off
		_delay_us(40);
		sendByte(0b00000100);
     a26:	84 e0       	ldi	r24, 0x04	; 4
     a28:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00000000);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b10000100);
     a32:	84 e8       	ldi	r24, 0x84	; 132
     a34:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b10000000);
     a38:	80 e8       	ldi	r24, 0x80	; 128
     a3a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     a3e:	85 ed       	ldi	r24, 0xD5	; 213
     a40:	8a 95       	dec	r24
     a42:	f1 f7       	brne	.-4      	; 0xa40 <initLCD+0xe6>
     a44:	00 00       	nop
		
		//Display clear cursor home
		_delay_us(40);
		sendByte(0b00000100);
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00000000);
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00010100);
     a52:	84 e1       	ldi	r24, 0x14	; 20
     a54:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00010000);
     a58:	80 e1       	ldi	r24, 0x10	; 16
     a5a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     a5e:	95 ed       	ldi	r25, 0xD5	; 213
     a60:	9a 95       	dec	r25
     a62:	f1 f7       	brne	.-4      	; 0xa60 <initLCD+0x106>
     a64:	00 00       	nop
		
		//Set cursor direction
		_delay_us(40);
		sendByte(0b00000100);
     a66:	84 e0       	ldi	r24, 0x04	; 4
     a68:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00000000);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b01100100);
     a72:	84 e6       	ldi	r24, 0x64	; 100
     a74:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b01100000);
     a78:	80 e6       	ldi	r24, 0x60	; 96
     a7a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     a7e:	25 ed       	ldi	r18, 0xD5	; 213
     a80:	2a 95       	dec	r18
     a82:	f1 f7       	brne	.-4      	; 0xa80 <initLCD+0x126>
     a84:	00 00       	nop
		
		//Turn on display
		_delay_us(40);
		sendByte(0b00001100);
     a86:	8c e0       	ldi	r24, 0x0C	; 12
     a88:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b00001000);
     a8c:	88 e0       	ldi	r24, 0x08	; 8
     a8e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b11101100);
     a92:	8c ee       	ldi	r24, 0xEC	; 236
     a94:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
		sendByte(0b11101000);
     a98:	88 ee       	ldi	r24, 0xE8	; 232
     a9a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	}
	sendStopCondition();
     a9e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <sendStopCondition>
}
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <sendCommand>:

/************************************************************************/
/* Sends a command as two nibbles to the LCD                            */
/************************************************************************/
void sendCommand(char command)
{
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	c8 2f       	mov	r28, r24
	sendStartCondition();
     aac:	0e 94 86 07 	call	0xf0c	; 0xf0c <sendStartCondition>
	sendByte(savedSlaveAddress);
     ab0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <savedSlaveAddress>
     ab4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     ab8:	85 ed       	ldi	r24, 0xD5	; 213
     aba:	8a 95       	dec	r24
     abc:	f1 f7       	brne	.-4      	; 0xaba <sendCommand+0x14>
     abe:	00 00       	nop
	
	_delay_us(40);
	sendByte((0xF0 &command) | (0b00001100));
     ac0:	dc 2f       	mov	r29, r28
     ac2:	d0 7f       	andi	r29, 0xF0	; 240
     ac4:	8d 2f       	mov	r24, r29
     ac6:	8c 60       	ori	r24, 0x0C	; 12
     ac8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	sendByte((0xF0 &command) | (0b00001000));
     acc:	8d 2f       	mov	r24, r29
     ace:	88 60       	ori	r24, 0x08	; 8
     ad0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	sendByte(((0x0F &command)<<4) | (0b00001100));
     ad4:	80 e1       	ldi	r24, 0x10	; 16
     ad6:	c8 9f       	mul	r28, r24
     ad8:	e0 01       	movw	r28, r0
     ada:	11 24       	eor	r1, r1
     adc:	8c 2f       	mov	r24, r28
     ade:	8c 60       	ori	r24, 0x0C	; 12
     ae0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	sendByte(((0x0F &command)<<4) | (0b00001000));
     ae4:	8c 2f       	mov	r24, r28
     ae6:	88 60       	ori	r24, 0x08	; 8
     ae8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	
	sendStopCondition();
     aec:	0e 94 b6 07 	call	0xf6c	; 0xf6c <sendStopCondition>
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <sendData>:

/************************************************************************/
/* Sends a byte of data as two nibbles to the LCD                       */
/************************************************************************/
void sendData(char command)
{
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	c8 2f       	mov	r28, r24
	sendStartCondition();
     afc:	0e 94 86 07 	call	0xf0c	; 0xf0c <sendStartCondition>
	sendByte(savedSlaveAddress);
     b00:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <savedSlaveAddress>
     b04:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
     b08:	85 ed       	ldi	r24, 0xD5	; 213
     b0a:	8a 95       	dec	r24
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <sendData+0x14>
     b0e:	00 00       	nop
	
	_delay_us(40);
	sendByte((0xF0 &command) | (0b00001101));
     b10:	dc 2f       	mov	r29, r28
     b12:	d0 7f       	andi	r29, 0xF0	; 240
     b14:	8d 2f       	mov	r24, r29
     b16:	8d 60       	ori	r24, 0x0D	; 13
     b18:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	sendByte((0xF0 &command) | (0b00001001));
     b1c:	8d 2f       	mov	r24, r29
     b1e:	89 60       	ori	r24, 0x09	; 9
     b20:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	sendByte(((0x0F &command)<<4) | (0b00001101));
     b24:	80 e1       	ldi	r24, 0x10	; 16
     b26:	c8 9f       	mul	r28, r24
     b28:	e0 01       	movw	r28, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	8c 2f       	mov	r24, r28
     b2e:	8d 60       	ori	r24, 0x0D	; 13
     b30:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	sendByte(((0x0F &command)<<4) | (0b00001001));
     b34:	8c 2f       	mov	r24, r28
     b36:	89 60       	ori	r24, 0x09	; 9
     b38:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	
	sendStopCondition();
     b3c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <sendStopCondition>
}
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <setCursor>:
/* col: 0 for first char												*/
/*		15 for last char												*/
/************************************************************************/
void setCursor(char row, char col)
{
	sendCommand((0x80+col)+(0x40*row));
     b46:	60 58       	subi	r22, 0x80	; 128
     b48:	90 e4       	ldi	r25, 0x40	; 64
     b4a:	89 9f       	mul	r24, r25
     b4c:	60 0d       	add	r22, r0
     b4e:	11 24       	eor	r1, r1
     b50:	86 2f       	mov	r24, r22
     b52:	0e 94 53 05 	call	0xaa6	; 0xaa6 <sendCommand>
     b56:	08 95       	ret

00000b58 <writeChar>:
/* Writes a given char on the LCD                                       */
/* The location can be specified with the setCursor() funtion			*/
/************************************************************************/
void writeChar(char character)
{
	sendData(character);
     b58:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <sendData>
     b5c:	08 95       	ret

00000b5e <writeString>:
/************************************************************************/
/* Writes a given char* (String) on the LCD                             */
/* The start location can be specified with the setCursor() funtion 	*/
/************************************************************************/
void writeString(char* character)
{
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while(character[i] != '\0')
     b66:	80 81       	ld	r24, Z
     b68:	88 23       	and	r24, r24
     b6a:	59 f0       	breq	.+22     	; 0xb82 <writeString+0x24>
     b6c:	8f 01       	movw	r16, r30
     b6e:	c0 e0       	ldi	r28, 0x00	; 0
/* Writes a given char on the LCD                                       */
/* The location can be specified with the setCursor() funtion			*/
/************************************************************************/
void writeChar(char character)
{
	sendData(character);
     b70:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <sendData>
{
	unsigned char i = 0;
	while(character[i] != '\0')
	{
		writeChar(character[i]);
		i++;
     b74:	cf 5f       	subi	r28, 0xFF	; 255
/* The start location can be specified with the setCursor() funtion 	*/
/************************************************************************/
void writeString(char* character)
{
	unsigned char i = 0;
	while(character[i] != '\0')
     b76:	f8 01       	movw	r30, r16
     b78:	ec 0f       	add	r30, r28
     b7a:	f1 1d       	adc	r31, r1
     b7c:	80 81       	ld	r24, Z
     b7e:	81 11       	cpse	r24, r1
     b80:	f7 cf       	rjmp	.-18     	; 0xb70 <writeString+0x12>
	{
		writeChar(character[i]);
		i++;
	}
}
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	08 95       	ret

00000b8a <initI2C>:
			SCL_LOW();
		}
	}
	
	return byte;
}
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <initI2C+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <initI2C+0x8>
     b92:	1f 92       	push	r1
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	69 83       	std	Y+1, r22	; 0x01
     b9a:	7a 83       	std	Y+2, r23	; 0x02
     b9c:	8b 83       	std	Y+3, r24	; 0x03
     b9e:	9c 83       	std	Y+4, r25	; 0x04
     ba0:	4d 83       	std	Y+5, r20	; 0x05
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	ab 81       	ldd	r26, Y+3	; 0x03
     ba8:	bc 81       	ldd	r27, Y+4	; 0x04
     baa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     bae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     bb2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     bb6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     bba:	8d 81       	ldd	r24, Y+5	; 0x05
     bbc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delayunit>
     bc0:	8a e2       	ldi	r24, 0x2A	; 42
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	2a e2       	ldi	r18, 0x2A	; 42
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	f9 01       	movw	r30, r18
     bca:	20 81       	ld	r18, Z
     bcc:	27 7f       	andi	r18, 0xF7	; 247
     bce:	fc 01       	movw	r30, r24
     bd0:	20 83       	st	Z, r18
     bd2:	8a e2       	ldi	r24, 0x2A	; 42
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	2a e2       	ldi	r18, 0x2A	; 42
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	f9 01       	movw	r30, r18
     bdc:	20 81       	ld	r18, Z
     bde:	2b 7f       	andi	r18, 0xFB	; 251
     be0:	fc 01       	movw	r30, r24
     be2:	20 83       	st	Z, r18
     be4:	00 00       	nop
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <delay_I2C>:
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	ae 97       	sbiw	r28, 0x2e	; 46
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <delayunit>
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	8d 36       	cpi	r24, 0x6D	; 109
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <delay_I2C+0x24>
     c18:	f8 c0       	rjmp	.+496    	; 0xe0a <delay_I2C+0x214>
     c1a:	85 37       	cpi	r24, 0x75	; 117
     c1c:	91 05       	cpc	r25, r1
     c1e:	09 f0       	breq	.+2      	; 0xc22 <delay_I2C+0x2c>
     c20:	6b c1       	rjmp	.+726    	; 0xef8 <delay_I2C+0x302>
     c22:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c26:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     c2a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     c2e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     c32:	8d 83       	std	Y+5, r24	; 0x05
     c34:	9e 83       	std	Y+6, r25	; 0x06
     c36:	af 83       	std	Y+7, r26	; 0x07
     c38:	b8 87       	std	Y+8, r27	; 0x08
     c3a:	2b ea       	ldi	r18, 0xAB	; 171
     c3c:	3a ea       	ldi	r19, 0xAA	; 170
     c3e:	4a ea       	ldi	r20, 0xAA	; 170
     c40:	50 e4       	ldi	r21, 0x40	; 64
     c42:	6d 81       	ldd	r22, Y+5	; 0x05
     c44:	7e 81       	ldd	r23, Y+6	; 0x06
     c46:	8f 81       	ldd	r24, Y+7	; 0x07
     c48:	98 85       	ldd	r25, Y+8	; 0x08
     c4a:	0e 94 18 04 	call	0x830	; 0x830 <__mulsf3>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	89 87       	std	Y+9, r24	; 0x09
     c54:	9a 87       	std	Y+10, r25	; 0x0a
     c56:	ab 87       	std	Y+11, r26	; 0x0b
     c58:	bc 87       	std	Y+12, r27	; 0x0c
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e8       	ldi	r20, 0x80	; 128
     c60:	50 e4       	ldi	r21, 0x40	; 64
     c62:	6d 81       	ldd	r22, Y+5	; 0x05
     c64:	7e 81       	ldd	r23, Y+6	; 0x06
     c66:	8f 81       	ldd	r24, Y+7	; 0x07
     c68:	98 85       	ldd	r25, Y+8	; 0x08
     c6a:	0e 94 18 04 	call	0x830	; 0x830 <__mulsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	8d 87       	std	Y+13, r24	; 0x0d
     c74:	9e 87       	std	Y+14, r25	; 0x0e
     c76:	af 87       	std	Y+15, r26	; 0x0f
     c78:	b8 8b       	std	Y+16, r27	; 0x10
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e8       	ldi	r20, 0x80	; 128
     c80:	5f e3       	ldi	r21, 0x3F	; 63
     c82:	69 85       	ldd	r22, Y+9	; 0x09
     c84:	7a 85       	ldd	r23, Y+10	; 0x0a
     c86:	8b 85       	ldd	r24, Y+11	; 0x0b
     c88:	9c 85       	ldd	r25, Y+12	; 0x0c
     c8a:	0e 94 92 03 	call	0x724	; 0x724 <__cmpsf2>
     c8e:	88 23       	and	r24, r24
     c90:	1c f4       	brge	.+6      	; 0xc98 <delay_I2C+0xa2>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	89 8b       	std	Y+17, r24	; 0x11
     c96:	b2 c0       	rjmp	.+356    	; 0xdfc <delay_I2C+0x206>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	3f ef       	ldi	r19, 0xFF	; 255
     c9c:	4f e7       	ldi	r20, 0x7F	; 127
     c9e:	57 e4       	ldi	r21, 0x47	; 71
     ca0:	6d 85       	ldd	r22, Y+13	; 0x0d
     ca2:	7e 85       	ldd	r23, Y+14	; 0x0e
     ca4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca6:	98 89       	ldd	r25, Y+16	; 0x10
     ca8:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
     cac:	18 16       	cp	r1, r24
     cae:	0c f0       	brlt	.+2      	; 0xcb2 <delay_I2C+0xbc>
     cb0:	7b c0       	rjmp	.+246    	; 0xda8 <delay_I2C+0x1b2>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a e7       	ldi	r20, 0x7A	; 122
     cb8:	54 e4       	ldi	r21, 0x44	; 68
     cba:	6d 81       	ldd	r22, Y+5	; 0x05
     cbc:	7e 81       	ldd	r23, Y+6	; 0x06
     cbe:	8f 81       	ldd	r24, Y+7	; 0x07
     cc0:	98 85       	ldd	r25, Y+8	; 0x08
     cc2:	0e 94 0a 09 	call	0x1214	; 0x1214 <__divsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	8a 8b       	std	Y+18, r24	; 0x12
     ccc:	9b 8b       	std	Y+19, r25	; 0x13
     cce:	ac 8b       	std	Y+20, r26	; 0x14
     cd0:	bd 8b       	std	Y+21, r27	; 0x15
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	4a e7       	ldi	r20, 0x7A	; 122
     cd8:	55 e4       	ldi	r21, 0x45	; 69
     cda:	6a 89       	ldd	r22, Y+18	; 0x12
     cdc:	7b 89       	ldd	r23, Y+19	; 0x13
     cde:	8c 89       	ldd	r24, Y+20	; 0x14
     ce0:	9d 89       	ldd	r25, Y+21	; 0x15
     ce2:	0e 94 18 04 	call	0x830	; 0x830 <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	8e 8b       	std	Y+22, r24	; 0x16
     cec:	9f 8b       	std	Y+23, r25	; 0x17
     cee:	a8 8f       	std	Y+24, r26	; 0x18
     cf0:	b9 8f       	std	Y+25, r27	; 0x19
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e8       	ldi	r20, 0x80	; 128
     cf8:	5f e3       	ldi	r21, 0x3F	; 63
     cfa:	6e 89       	ldd	r22, Y+22	; 0x16
     cfc:	7f 89       	ldd	r23, Y+23	; 0x17
     cfe:	88 8d       	ldd	r24, Y+24	; 0x18
     d00:	99 8d       	ldd	r25, Y+25	; 0x19
     d02:	0e 94 92 03 	call	0x724	; 0x724 <__cmpsf2>
     d06:	88 23       	and	r24, r24
     d08:	2c f4       	brge	.+10     	; 0xd14 <delay_I2C+0x11e>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	9b 8f       	std	Y+27, r25	; 0x1b
     d10:	8a 8f       	std	Y+26, r24	; 0x1a
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <delay_I2C+0x19c>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	3f ef       	ldi	r19, 0xFF	; 255
     d18:	4f e7       	ldi	r20, 0x7F	; 127
     d1a:	57 e4       	ldi	r21, 0x47	; 71
     d1c:	6e 89       	ldd	r22, Y+22	; 0x16
     d1e:	7f 89       	ldd	r23, Y+23	; 0x17
     d20:	88 8d       	ldd	r24, Y+24	; 0x18
     d22:	99 8d       	ldd	r25, Y+25	; 0x19
     d24:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
     d28:	18 16       	cp	r1, r24
     d2a:	4c f5       	brge	.+82     	; 0xd7e <delay_I2C+0x188>
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e2       	ldi	r20, 0x20	; 32
     d32:	51 e4       	ldi	r21, 0x41	; 65
     d34:	6a 89       	ldd	r22, Y+18	; 0x12
     d36:	7b 89       	ldd	r23, Y+19	; 0x13
     d38:	8c 89       	ldd	r24, Y+20	; 0x14
     d3a:	9d 89       	ldd	r25, Y+21	; 0x15
     d3c:	0e 94 18 04 	call	0x830	; 0x830 <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	bc 01       	movw	r22, r24
     d46:	cd 01       	movw	r24, r26
     d48:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9b 8f       	std	Y+27, r25	; 0x1b
     d52:	8a 8f       	std	Y+26, r24	; 0x1a
     d54:	0f c0       	rjmp	.+30     	; 0xd74 <delay_I2C+0x17e>
     d56:	80 e9       	ldi	r24, 0x90	; 144
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	9d 8f       	std	Y+29, r25	; 0x1d
     d5c:	8c 8f       	std	Y+28, r24	; 0x1c
     d5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d60:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <delay_I2C+0x16c>
     d66:	9d 8f       	std	Y+29, r25	; 0x1d
     d68:	8c 8f       	std	Y+28, r24	; 0x1c
     d6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	9b 8f       	std	Y+27, r25	; 0x1b
     d72:	8a 8f       	std	Y+26, r24	; 0x1a
     d74:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d76:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d78:	89 2b       	or	r24, r25
     d7a:	69 f7       	brne	.-38     	; 0xd56 <delay_I2C+0x160>
     d7c:	3f c0       	rjmp	.+126    	; 0xdfc <delay_I2C+0x206>
     d7e:	6e 89       	ldd	r22, Y+22	; 0x16
     d80:	7f 89       	ldd	r23, Y+23	; 0x17
     d82:	88 8d       	ldd	r24, Y+24	; 0x18
     d84:	99 8d       	ldd	r25, Y+25	; 0x19
     d86:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9b 8f       	std	Y+27, r25	; 0x1b
     d90:	8a 8f       	std	Y+26, r24	; 0x1a
     d92:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d94:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d96:	9f 8f       	std	Y+31, r25	; 0x1f
     d98:	8e 8f       	std	Y+30, r24	; 0x1e
     d9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d9c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <delay_I2C+0x1a8>
     da2:	9f 8f       	std	Y+31, r25	; 0x1f
     da4:	8e 8f       	std	Y+30, r24	; 0x1e
     da6:	2a c0       	rjmp	.+84     	; 0xdfc <delay_I2C+0x206>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	4f e7       	ldi	r20, 0x7F	; 127
     dae:	53 e4       	ldi	r21, 0x43	; 67
     db0:	69 85       	ldd	r22, Y+9	; 0x09
     db2:	7a 85       	ldd	r23, Y+10	; 0x0a
     db4:	8b 85       	ldd	r24, Y+11	; 0x0b
     db6:	9c 85       	ldd	r25, Y+12	; 0x0c
     db8:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	ac f4       	brge	.+42     	; 0xdea <delay_I2C+0x1f4>
     dc0:	6d 85       	ldd	r22, Y+13	; 0x0d
     dc2:	7e 85       	ldd	r23, Y+14	; 0x0e
     dc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc6:	98 89       	ldd	r25, Y+16	; 0x10
     dc8:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	99 a3       	std	Y+33, r25	; 0x21
     dd2:	88 a3       	std	Y+32, r24	; 0x20
     dd4:	88 a1       	ldd	r24, Y+32	; 0x20
     dd6:	99 a1       	ldd	r25, Y+33	; 0x21
     dd8:	9b a3       	std	Y+35, r25	; 0x23
     dda:	8a a3       	std	Y+34, r24	; 0x22
     ddc:	8a a1       	ldd	r24, Y+34	; 0x22
     dde:	9b a1       	ldd	r25, Y+35	; 0x23
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <delay_I2C+0x1ea>
     de4:	9b a3       	std	Y+35, r25	; 0x23
     de6:	8a a3       	std	Y+34, r24	; 0x22
     de8:	87 c0       	rjmp	.+270    	; 0xef8 <delay_I2C+0x302>
     dea:	69 85       	ldd	r22, Y+9	; 0x09
     dec:	7a 85       	ldd	r23, Y+10	; 0x0a
     dee:	8b 85       	ldd	r24, Y+11	; 0x0b
     df0:	9c 85       	ldd	r25, Y+12	; 0x0c
     df2:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	89 8b       	std	Y+17, r24	; 0x11
     dfc:	89 89       	ldd	r24, Y+17	; 0x11
     dfe:	8c a3       	std	Y+36, r24	; 0x24
     e00:	8c a1       	ldd	r24, Y+36	; 0x24
     e02:	8a 95       	dec	r24
     e04:	f1 f7       	brne	.-4      	; 0xe02 <delay_I2C+0x20c>
     e06:	8c a3       	std	Y+36, r24	; 0x24
     e08:	77 c0       	rjmp	.+238    	; 0xef8 <delay_I2C+0x302>
     e0a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e0e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e12:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     e16:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	ab 83       	std	Y+3, r26	; 0x03
     e20:	bc 83       	std	Y+4, r27	; 0x04
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	4a e7       	ldi	r20, 0x7A	; 122
     e28:	55 e4       	ldi	r21, 0x45	; 69
     e2a:	69 81       	ldd	r22, Y+1	; 0x01
     e2c:	7a 81       	ldd	r23, Y+2	; 0x02
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	0e 94 18 04 	call	0x830	; 0x830 <__mulsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	8d a3       	std	Y+37, r24	; 0x25
     e3c:	9e a3       	std	Y+38, r25	; 0x26
     e3e:	af a3       	std	Y+39, r26	; 0x27
     e40:	b8 a7       	std	Y+40, r27	; 0x28
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e8       	ldi	r20, 0x80	; 128
     e48:	5f e3       	ldi	r21, 0x3F	; 63
     e4a:	6d a1       	ldd	r22, Y+37	; 0x25
     e4c:	7e a1       	ldd	r23, Y+38	; 0x26
     e4e:	8f a1       	ldd	r24, Y+39	; 0x27
     e50:	98 a5       	ldd	r25, Y+40	; 0x28
     e52:	0e 94 92 03 	call	0x724	; 0x724 <__cmpsf2>
     e56:	88 23       	and	r24, r24
     e58:	2c f4       	brge	.+10     	; 0xe64 <delay_I2C+0x26e>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9a a7       	std	Y+42, r25	; 0x2a
     e60:	89 a7       	std	Y+41, r24	; 0x29
     e62:	3f c0       	rjmp	.+126    	; 0xee2 <delay_I2C+0x2ec>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	4f e7       	ldi	r20, 0x7F	; 127
     e6a:	57 e4       	ldi	r21, 0x47	; 71
     e6c:	6d a1       	ldd	r22, Y+37	; 0x25
     e6e:	7e a1       	ldd	r23, Y+38	; 0x26
     e70:	8f a1       	ldd	r24, Y+39	; 0x27
     e72:	98 a5       	ldd	r25, Y+40	; 0x28
     e74:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
     e78:	18 16       	cp	r1, r24
     e7a:	4c f5       	brge	.+82     	; 0xece <delay_I2C+0x2d8>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e2       	ldi	r20, 0x20	; 32
     e82:	51 e4       	ldi	r21, 0x41	; 65
     e84:	69 81       	ldd	r22, Y+1	; 0x01
     e86:	7a 81       	ldd	r23, Y+2	; 0x02
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	9c 81       	ldd	r25, Y+4	; 0x04
     e8c:	0e 94 18 04 	call	0x830	; 0x830 <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	9a a7       	std	Y+42, r25	; 0x2a
     ea2:	89 a7       	std	Y+41, r24	; 0x29
     ea4:	0f c0       	rjmp	.+30     	; 0xec4 <delay_I2C+0x2ce>
     ea6:	80 e9       	ldi	r24, 0x90	; 144
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	9c a7       	std	Y+44, r25	; 0x2c
     eac:	8b a7       	std	Y+43, r24	; 0x2b
     eae:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb0:	9c a5       	ldd	r25, Y+44	; 0x2c
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <delay_I2C+0x2bc>
     eb6:	9c a7       	std	Y+44, r25	; 0x2c
     eb8:	8b a7       	std	Y+43, r24	; 0x2b
     eba:	89 a5       	ldd	r24, Y+41	; 0x29
     ebc:	9a a5       	ldd	r25, Y+42	; 0x2a
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	9a a7       	std	Y+42, r25	; 0x2a
     ec2:	89 a7       	std	Y+41, r24	; 0x29
     ec4:	89 a5       	ldd	r24, Y+41	; 0x29
     ec6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ec8:	89 2b       	or	r24, r25
     eca:	69 f7       	brne	.-38     	; 0xea6 <delay_I2C+0x2b0>
     ecc:	14 c0       	rjmp	.+40     	; 0xef6 <delay_I2C+0x300>
     ece:	6d a1       	ldd	r22, Y+37	; 0x25
     ed0:	7e a1       	ldd	r23, Y+38	; 0x26
     ed2:	8f a1       	ldd	r24, Y+39	; 0x27
     ed4:	98 a5       	ldd	r25, Y+40	; 0x28
     ed6:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9a a7       	std	Y+42, r25	; 0x2a
     ee0:	89 a7       	std	Y+41, r24	; 0x29
     ee2:	89 a5       	ldd	r24, Y+41	; 0x29
     ee4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ee6:	9e a7       	std	Y+46, r25	; 0x2e
     ee8:	8d a7       	std	Y+45, r24	; 0x2d
     eea:	8d a5       	ldd	r24, Y+45	; 0x2d
     eec:	9e a5       	ldd	r25, Y+46	; 0x2e
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <delay_I2C+0x2f8>
     ef2:	9e a7       	std	Y+46, r25	; 0x2e
     ef4:	8d a7       	std	Y+45, r24	; 0x2d
     ef6:	00 00       	nop
     ef8:	00 00       	nop
     efa:	ae 96       	adiw	r28, 0x2e	; 46
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <sendStartCondition>:
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	8a e2       	ldi	r24, 0x2A	; 42
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	2a e2       	ldi	r18, 0x2A	; 42
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	f9 01       	movw	r30, r18
     f1e:	20 81       	ld	r18, Z
     f20:	27 7f       	andi	r18, 0xF7	; 247
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18
     f26:	8a e2       	ldi	r24, 0x2A	; 42
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	2a e2       	ldi	r18, 0x2A	; 42
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	f9 01       	movw	r30, r18
     f30:	20 81       	ld	r18, Z
     f32:	2b 7f       	andi	r18, 0xFB	; 251
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18
     f38:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
     f3c:	8a e2       	ldi	r24, 0x2A	; 42
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	2a e2       	ldi	r18, 0x2A	; 42
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	f9 01       	movw	r30, r18
     f46:	20 81       	ld	r18, Z
     f48:	24 60       	ori	r18, 0x04	; 4
     f4a:	fc 01       	movw	r30, r24
     f4c:	20 83       	st	Z, r18
     f4e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
     f52:	8a e2       	ldi	r24, 0x2A	; 42
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	2a e2       	ldi	r18, 0x2A	; 42
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	f9 01       	movw	r30, r18
     f5c:	20 81       	ld	r18, Z
     f5e:	28 60       	ori	r18, 0x08	; 8
     f60:	fc 01       	movw	r30, r24
     f62:	20 83       	st	Z, r18
     f64:	00 00       	nop
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <sendStopCondition>:
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	8a e2       	ldi	r24, 0x2A	; 42
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	2a e2       	ldi	r18, 0x2A	; 42
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	f9 01       	movw	r30, r18
     f7e:	20 81       	ld	r18, Z
     f80:	28 60       	ori	r18, 0x08	; 8
     f82:	fc 01       	movw	r30, r24
     f84:	20 83       	st	Z, r18
     f86:	8a e2       	ldi	r24, 0x2A	; 42
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	2a e2       	ldi	r18, 0x2A	; 42
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	f9 01       	movw	r30, r18
     f90:	20 81       	ld	r18, Z
     f92:	24 60       	ori	r18, 0x04	; 4
     f94:	fc 01       	movw	r30, r24
     f96:	20 83       	st	Z, r18
     f98:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
     f9c:	8a e2       	ldi	r24, 0x2A	; 42
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	2a e2       	ldi	r18, 0x2A	; 42
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	f9 01       	movw	r30, r18
     fa6:	20 81       	ld	r18, Z
     fa8:	27 7f       	andi	r18, 0xF7	; 247
     faa:	fc 01       	movw	r30, r24
     fac:	20 83       	st	Z, r18
     fae:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
     fb2:	8a e2       	ldi	r24, 0x2A	; 42
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	2a e2       	ldi	r18, 0x2A	; 42
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	f9 01       	movw	r30, r18
     fbc:	20 81       	ld	r18, Z
     fbe:	2b 7f       	andi	r18, 0xFB	; 251
     fc0:	fc 01       	movw	r30, r24
     fc2:	20 83       	st	Z, r18
     fc4:	00 00       	nop
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <sendByte>:
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <sendByte+0x6>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <sendByte+0x8>
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	8c 83       	std	Y+4, r24	; 0x04
     fda:	8a e2       	ldi	r24, 0x2A	; 42
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	2a e2       	ldi	r18, 0x2A	; 42
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	f9 01       	movw	r30, r18
     fe4:	20 81       	ld	r18, Z
     fe6:	28 60       	ori	r18, 0x08	; 8
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
     fec:	1a 82       	std	Y+2, r1	; 0x02
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	2f c0       	rjmp	.+94     	; 0x1050 <sendByte+0x84>
     ff2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	88 1f       	adc	r24, r24
     ffa:	88 27       	eor	r24, r24
     ffc:	88 1f       	adc	r24, r24
     ffe:	0e 94 e6 08 	call	0x11cc	; 0x11cc <sendBit>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	88 0f       	add	r24, r24
    1006:	8c 83       	std	Y+4, r24	; 0x04
    1008:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
    100c:	8a e2       	ldi	r24, 0x2A	; 42
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	2a e2       	ldi	r18, 0x2A	; 42
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	f9 01       	movw	r30, r18
    1016:	20 81       	ld	r18, Z
    1018:	27 7f       	andi	r18, 0xF7	; 247
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18
    101e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
    1022:	8a e2       	ldi	r24, 0x2A	; 42
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	2a e2       	ldi	r18, 0x2A	; 42
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f9 01       	movw	r30, r18
    102c:	20 81       	ld	r18, Z
    102e:	28 60       	ori	r18, 0x08	; 8
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18
    1034:	8a e2       	ldi	r24, 0x2A	; 42
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	2a e2       	ldi	r18, 0x2A	; 42
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	24 60       	ori	r18, 0x04	; 4
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	9a 83       	std	Y+2, r25	; 0x02
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	08 97       	sbiw	r24, 0x08	; 8
    1056:	6c f2       	brlt	.-102    	; 0xff2 <sendByte+0x26>
    1058:	8a e2       	ldi	r24, 0x2A	; 42
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	2a e2       	ldi	r18, 0x2A	; 42
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	f9 01       	movw	r30, r18
    1062:	20 81       	ld	r18, Z
    1064:	2b 7f       	andi	r18, 0xFB	; 251
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
    106e:	8a e2       	ldi	r24, 0x2A	; 42
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	2a e2       	ldi	r18, 0x2A	; 42
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	f9 01       	movw	r30, r18
    1078:	20 81       	ld	r18, Z
    107a:	27 7f       	andi	r18, 0xF7	; 247
    107c:	fc 01       	movw	r30, r24
    107e:	20 83       	st	Z, r18
    1080:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
    1084:	1b 82       	std	Y+3, r1	; 0x03
    1086:	89 e2       	ldi	r24, 0x29	; 41
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	fc 01       	movw	r30, r24
    108c:	80 81       	ld	r24, Z
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	84 70       	andi	r24, 0x04	; 4
    1094:	99 27       	eor	r25, r25
    1096:	89 2b       	or	r24, r25
    1098:	11 f4       	brne	.+4      	; 0x109e <sendByte+0xd2>
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	8b 83       	std	Y+3, r24	; 0x03
    109e:	8a e2       	ldi	r24, 0x2A	; 42
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	2a e2       	ldi	r18, 0x2A	; 42
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	f9 01       	movw	r30, r18
    10a8:	20 81       	ld	r18, Z
    10aa:	28 60       	ori	r18, 0x08	; 8
    10ac:	fc 01       	movw	r30, r24
    10ae:	20 83       	st	Z, r18
    10b0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <readRegister>:

unsigned char readRegister(unsigned char slaveAddress, unsigned char registerAddress)
{
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	27 97       	sbiw	r28, 0x07	; 7
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	8e 83       	std	Y+6, r24	; 0x06
    10da:	6f 83       	std	Y+7, r22	; 0x07
	unsigned char byte = 0b00000000;
    10dc:	19 82       	std	Y+1, r1	; 0x01
	
	//force write mode
	unsigned char slaveAddressW = slaveAddress & 0b11111110;
    10de:	8e 81       	ldd	r24, Y+6	; 0x06
    10e0:	8e 7f       	andi	r24, 0xFE	; 254
    10e2:	8c 83       	std	Y+4, r24	; 0x04
	
	//force read mode
	unsigned char slaveAddressR = slaveAddress | 0b00000001;
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	81 60       	ori	r24, 0x01	; 1
    10e8:	8d 83       	std	Y+5, r24	; 0x05
	
	SCL_LOW();
    10ea:	8a e2       	ldi	r24, 0x2A	; 42
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	2a e2       	ldi	r18, 0x2A	; 42
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	f9 01       	movw	r30, r18
    10f4:	20 81       	ld	r18, Z
    10f6:	28 60       	ori	r18, 0x08	; 8
    10f8:	fc 01       	movw	r30, r24
    10fa:	20 83       	st	Z, r18
	
	//choose register
	sendStartCondition();
    10fc:	0e 94 86 07 	call	0xf0c	; 0xf0c <sendStartCondition>
	sendByte(slaveAddressW);
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	sendByte(registerAddress);
    1106:	8f 81       	ldd	r24, Y+7	; 0x07
    1108:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
	
	// establish new connection
	sendStartCondition();
    110c:	0e 94 86 07 	call	0xf0c	; 0xf0c <sendStartCondition>
	
	// get register from slave
	if(sendByte(slaveAddressR))
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sendByte>
    1116:	88 23       	and	r24, r24
    1118:	09 f4       	brne	.+2      	; 0x111c <readRegister+0x58>
    111a:	4e c0       	rjmp	.+156    	; 0x11b8 <readRegister+0xf4>
	{
		SCL_LOW();
    111c:	8a e2       	ldi	r24, 0x2A	; 42
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	2a e2       	ldi	r18, 0x2A	; 42
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	f9 01       	movw	r30, r18
    1126:	20 81       	ld	r18, Z
    1128:	28 60       	ori	r18, 0x08	; 8
    112a:	fc 01       	movw	r30, r24
    112c:	20 83       	st	Z, r18
		SDA_HIGH();
    112e:	8a e2       	ldi	r24, 0x2A	; 42
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	2a e2       	ldi	r18, 0x2A	; 42
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	f9 01       	movw	r30, r18
    1138:	20 81       	ld	r18, Z
    113a:	2b 7f       	andi	r18, 0xFB	; 251
    113c:	fc 01       	movw	r30, r24
    113e:	20 83       	st	Z, r18
		
		// read byte from slave
		for(int i = 7; i >= 0; i--)
    1140:	87 e0       	ldi	r24, 0x07	; 7
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9b 83       	std	Y+3, r25	; 0x03
    1146:	8a 83       	std	Y+2, r24	; 0x02
    1148:	33 c0       	rjmp	.+102    	; 0x11b0 <readRegister+0xec>
		{
			delay_I2C();
    114a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
			
			SCL_HIGH();
    114e:	8a e2       	ldi	r24, 0x2A	; 42
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	2a e2       	ldi	r18, 0x2A	; 42
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	f9 01       	movw	r30, r18
    1158:	20 81       	ld	r18, Z
    115a:	27 7f       	andi	r18, 0xF7	; 247
    115c:	fc 01       	movw	r30, r24
    115e:	20 83       	st	Z, r18
			
			delay_I2C();
    1160:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <delay_I2C>
			
			byte |= (SDA_READ() << i);
    1164:	89 e2       	ldi	r24, 0x29	; 41
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	fc 01       	movw	r30, r24
    116a:	80 81       	ld	r24, Z
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	84 70       	andi	r24, 0x04	; 4
    1172:	99 27       	eor	r25, r25
    1174:	21 e0       	ldi	r18, 0x01	; 1
    1176:	89 2b       	or	r24, r25
    1178:	09 f4       	brne	.+2      	; 0x117c <readRegister+0xb8>
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	82 2f       	mov	r24, r18
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0a 80       	ldd	r0, Y+2	; 0x02
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <readRegister+0xc4>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <readRegister+0xc0>
    118c:	98 2f       	mov	r25, r24
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	89 2b       	or	r24, r25
    1192:	89 83       	std	Y+1, r24	; 0x01
			
			SCL_LOW();
    1194:	8a e2       	ldi	r24, 0x2A	; 42
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	2a e2       	ldi	r18, 0x2A	; 42
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	f9 01       	movw	r30, r18
    119e:	20 81       	ld	r18, Z
    11a0:	28 60       	ori	r18, 0x08	; 8
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 83       	st	Z, r18
	{
		SCL_LOW();
		SDA_HIGH();
		
		// read byte from slave
		for(int i = 7; i >= 0; i--)
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	9b 81       	ldd	r25, Y+3	; 0x03
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	9b 83       	std	Y+3, r25	; 0x03
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	9b 81       	ldd	r25, Y+3	; 0x03
    11b4:	99 23       	and	r25, r25
    11b6:	4c f6       	brge	.-110    	; 0x114a <readRegister+0x86>
			
			SCL_LOW();
		}
	}
	
	return byte;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ba:	27 96       	adiw	r28, 0x07	; 7
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <sendBit>:

void sendBit(char bit)
{
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	1f 92       	push	r1
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	89 83       	std	Y+1, r24	; 0x01
	if(bit == 0)
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	88 23       	and	r24, r24
    11dc:	51 f4       	brne	.+20     	; 0x11f2 <sendBit+0x26>
	{
		SDA_LOW();
    11de:	8a e2       	ldi	r24, 0x2A	; 42
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	2a e2       	ldi	r18, 0x2A	; 42
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	f9 01       	movw	r30, r18
    11e8:	20 81       	ld	r18, Z
    11ea:	24 60       	ori	r18, 0x04	; 4
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
	}
	else if (bit == 1)
	{
		SDA_HIGH();
	}
    11f0:	0c c0       	rjmp	.+24     	; 0x120a <sendBit+0x3e>
{
	if(bit == 0)
	{
		SDA_LOW();
	}
	else if (bit == 1)
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	49 f4       	brne	.+18     	; 0x120a <sendBit+0x3e>
	{
		SDA_HIGH();
    11f8:	8a e2       	ldi	r24, 0x2A	; 42
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	2a e2       	ldi	r18, 0x2A	; 42
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	f9 01       	movw	r30, r18
    1202:	20 81       	ld	r18, Z
    1204:	2b 7f       	andi	r18, 0xFB	; 251
    1206:	fc 01       	movw	r30, r24
    1208:	20 83       	st	Z, r18
	}
    120a:	00 00       	nop
    120c:	0f 90       	pop	r0
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <__divsf3>:
    1214:	0e 94 1e 09 	call	0x123c	; 0x123c <__divsf3x>
    1218:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_round>
    121c:	0e 94 95 04 	call	0x92a	; 0x92a <__fp_pscB>
    1220:	58 f0       	brcs	.+22     	; 0x1238 <__divsf3+0x24>
    1222:	0e 94 8e 04 	call	0x91c	; 0x91c <__fp_pscA>
    1226:	40 f0       	brcs	.+16     	; 0x1238 <__divsf3+0x24>
    1228:	29 f4       	brne	.+10     	; 0x1234 <__divsf3+0x20>
    122a:	5f 3f       	cpi	r21, 0xFF	; 255
    122c:	29 f0       	breq	.+10     	; 0x1238 <__divsf3+0x24>
    122e:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_inf>
    1232:	51 11       	cpse	r21, r1
    1234:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__fp_szero>
    1238:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_nan>

0000123c <__divsf3x>:
    123c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__fp_split3>
    1240:	68 f3       	brcs	.-38     	; 0x121c <__divsf3+0x8>

00001242 <__divsf3_pse>:
    1242:	99 23       	and	r25, r25
    1244:	b1 f3       	breq	.-20     	; 0x1232 <__divsf3+0x1e>
    1246:	55 23       	and	r21, r21
    1248:	91 f3       	breq	.-28     	; 0x122e <__divsf3+0x1a>
    124a:	95 1b       	sub	r25, r21
    124c:	55 0b       	sbc	r21, r21
    124e:	bb 27       	eor	r27, r27
    1250:	aa 27       	eor	r26, r26
    1252:	62 17       	cp	r22, r18
    1254:	73 07       	cpc	r23, r19
    1256:	84 07       	cpc	r24, r20
    1258:	38 f0       	brcs	.+14     	; 0x1268 <__divsf3_pse+0x26>
    125a:	9f 5f       	subi	r25, 0xFF	; 255
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	44 1f       	adc	r20, r20
    1264:	aa 1f       	adc	r26, r26
    1266:	a9 f3       	breq	.-22     	; 0x1252 <__divsf3_pse+0x10>
    1268:	35 d0       	rcall	.+106    	; 0x12d4 <__divsf3_pse+0x92>
    126a:	0e 2e       	mov	r0, r30
    126c:	3a f0       	brmi	.+14     	; 0x127c <__divsf3_pse+0x3a>
    126e:	e0 e8       	ldi	r30, 0x80	; 128
    1270:	32 d0       	rcall	.+100    	; 0x12d6 <__divsf3_pse+0x94>
    1272:	91 50       	subi	r25, 0x01	; 1
    1274:	50 40       	sbci	r21, 0x00	; 0
    1276:	e6 95       	lsr	r30
    1278:	00 1c       	adc	r0, r0
    127a:	ca f7       	brpl	.-14     	; 0x126e <__divsf3_pse+0x2c>
    127c:	2b d0       	rcall	.+86     	; 0x12d4 <__divsf3_pse+0x92>
    127e:	fe 2f       	mov	r31, r30
    1280:	29 d0       	rcall	.+82     	; 0x12d4 <__divsf3_pse+0x92>
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	bb 1f       	adc	r27, r27
    128a:	26 17       	cp	r18, r22
    128c:	37 07       	cpc	r19, r23
    128e:	48 07       	cpc	r20, r24
    1290:	ab 07       	cpc	r26, r27
    1292:	b0 e8       	ldi	r27, 0x80	; 128
    1294:	09 f0       	breq	.+2      	; 0x1298 <__divsf3_pse+0x56>
    1296:	bb 0b       	sbc	r27, r27
    1298:	80 2d       	mov	r24, r0
    129a:	bf 01       	movw	r22, r30
    129c:	ff 27       	eor	r31, r31
    129e:	93 58       	subi	r25, 0x83	; 131
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	3a f0       	brmi	.+14     	; 0x12b2 <__divsf3_pse+0x70>
    12a4:	9e 3f       	cpi	r25, 0xFE	; 254
    12a6:	51 05       	cpc	r21, r1
    12a8:	78 f0       	brcs	.+30     	; 0x12c8 <__divsf3_pse+0x86>
    12aa:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_inf>
    12ae:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__fp_szero>
    12b2:	5f 3f       	cpi	r21, 0xFF	; 255
    12b4:	e4 f3       	brlt	.-8      	; 0x12ae <__divsf3_pse+0x6c>
    12b6:	98 3e       	cpi	r25, 0xE8	; 232
    12b8:	d4 f3       	brlt	.-12     	; 0x12ae <__divsf3_pse+0x6c>
    12ba:	86 95       	lsr	r24
    12bc:	77 95       	ror	r23
    12be:	67 95       	ror	r22
    12c0:	b7 95       	ror	r27
    12c2:	f7 95       	ror	r31
    12c4:	9f 5f       	subi	r25, 0xFF	; 255
    12c6:	c9 f7       	brne	.-14     	; 0x12ba <__divsf3_pse+0x78>
    12c8:	88 0f       	add	r24, r24
    12ca:	91 1d       	adc	r25, r1
    12cc:	96 95       	lsr	r25
    12ce:	87 95       	ror	r24
    12d0:	97 f9       	bld	r25, 7
    12d2:	08 95       	ret
    12d4:	e1 e0       	ldi	r30, 0x01	; 1
    12d6:	66 0f       	add	r22, r22
    12d8:	77 1f       	adc	r23, r23
    12da:	88 1f       	adc	r24, r24
    12dc:	bb 1f       	adc	r27, r27
    12de:	62 17       	cp	r22, r18
    12e0:	73 07       	cpc	r23, r19
    12e2:	84 07       	cpc	r24, r20
    12e4:	ba 07       	cpc	r27, r26
    12e6:	20 f0       	brcs	.+8      	; 0x12f0 <__divsf3_pse+0xae>
    12e8:	62 1b       	sub	r22, r18
    12ea:	73 0b       	sbc	r23, r19
    12ec:	84 0b       	sbc	r24, r20
    12ee:	ba 0b       	sbc	r27, r26
    12f0:	ee 1f       	adc	r30, r30
    12f2:	88 f7       	brcc	.-30     	; 0x12d6 <__divsf3_pse+0x94>
    12f4:	e0 95       	com	r30
    12f6:	08 95       	ret

000012f8 <__mulsi3>:
    12f8:	db 01       	movw	r26, r22
    12fa:	8f 93       	push	r24
    12fc:	9f 93       	push	r25
    12fe:	0e 94 8c 09 	call	0x1318	; 0x1318 <__muluhisi3>
    1302:	bf 91       	pop	r27
    1304:	af 91       	pop	r26
    1306:	a2 9f       	mul	r26, r18
    1308:	80 0d       	add	r24, r0
    130a:	91 1d       	adc	r25, r1
    130c:	a3 9f       	mul	r26, r19
    130e:	90 0d       	add	r25, r0
    1310:	b2 9f       	mul	r27, r18
    1312:	90 0d       	add	r25, r0
    1314:	11 24       	eor	r1, r1
    1316:	08 95       	ret

00001318 <__muluhisi3>:
    1318:	0e 94 97 09 	call	0x132e	; 0x132e <__umulhisi3>
    131c:	a5 9f       	mul	r26, r21
    131e:	90 0d       	add	r25, r0
    1320:	b4 9f       	mul	r27, r20
    1322:	90 0d       	add	r25, r0
    1324:	a4 9f       	mul	r26, r20
    1326:	80 0d       	add	r24, r0
    1328:	91 1d       	adc	r25, r1
    132a:	11 24       	eor	r1, r1
    132c:	08 95       	ret

0000132e <__umulhisi3>:
    132e:	a2 9f       	mul	r26, r18
    1330:	b0 01       	movw	r22, r0
    1332:	b3 9f       	mul	r27, r19
    1334:	c0 01       	movw	r24, r0
    1336:	a3 9f       	mul	r26, r19
    1338:	70 0d       	add	r23, r0
    133a:	81 1d       	adc	r24, r1
    133c:	11 24       	eor	r1, r1
    133e:	91 1d       	adc	r25, r1
    1340:	b2 9f       	mul	r27, r18
    1342:	70 0d       	add	r23, r0
    1344:	81 1d       	adc	r24, r1
    1346:	11 24       	eor	r1, r1
    1348:	91 1d       	adc	r25, r1
    134a:	08 95       	ret

0000134c <sprintf>:
    134c:	ae e0       	ldi	r26, 0x0E	; 14
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	ec ea       	ldi	r30, 0xAC	; 172
    1352:	f9 e0       	ldi	r31, 0x09	; 9
    1354:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__prologue_saves__+0x1c>
    1358:	0d 89       	ldd	r16, Y+21	; 0x15
    135a:	1e 89       	ldd	r17, Y+22	; 0x16
    135c:	86 e0       	ldi	r24, 0x06	; 6
    135e:	8c 83       	std	Y+4, r24	; 0x04
    1360:	1a 83       	std	Y+2, r17	; 0x02
    1362:	09 83       	std	Y+1, r16	; 0x01
    1364:	8f ef       	ldi	r24, 0xFF	; 255
    1366:	9f e7       	ldi	r25, 0x7F	; 127
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	8d 83       	std	Y+5, r24	; 0x05
    136c:	ae 01       	movw	r20, r28
    136e:	47 5e       	subi	r20, 0xE7	; 231
    1370:	5f 4f       	sbci	r21, 0xFF	; 255
    1372:	6f 89       	ldd	r22, Y+23	; 0x17
    1374:	78 8d       	ldd	r23, Y+24	; 0x18
    1376:	ce 01       	movw	r24, r28
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	0e 94 c8 09 	call	0x1390	; 0x1390 <vfprintf>
    137e:	ef 81       	ldd	r30, Y+7	; 0x07
    1380:	f8 85       	ldd	r31, Y+8	; 0x08
    1382:	e0 0f       	add	r30, r16
    1384:	f1 1f       	adc	r31, r17
    1386:	10 82       	st	Z, r1
    1388:	2e 96       	adiw	r28, 0x0e	; 14
    138a:	e4 e0       	ldi	r30, 0x04	; 4
    138c:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__epilogue_restores__+0x1c>

00001390 <vfprintf>:
    1390:	ab e0       	ldi	r26, 0x0B	; 11
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ee ec       	ldi	r30, 0xCE	; 206
    1396:	f9 e0       	ldi	r31, 0x09	; 9
    1398:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__prologue_saves__>
    139c:	6c 01       	movw	r12, r24
    139e:	7b 01       	movw	r14, r22
    13a0:	8a 01       	movw	r16, r20
    13a2:	fc 01       	movw	r30, r24
    13a4:	17 82       	std	Z+7, r1	; 0x07
    13a6:	16 82       	std	Z+6, r1	; 0x06
    13a8:	83 81       	ldd	r24, Z+3	; 0x03
    13aa:	81 ff       	sbrs	r24, 1
    13ac:	cc c1       	rjmp	.+920    	; 0x1746 <vfprintf+0x3b6>
    13ae:	ce 01       	movw	r24, r28
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	3c 01       	movw	r6, r24
    13b4:	f6 01       	movw	r30, r12
    13b6:	93 81       	ldd	r25, Z+3	; 0x03
    13b8:	f7 01       	movw	r30, r14
    13ba:	93 fd       	sbrc	r25, 3
    13bc:	85 91       	lpm	r24, Z+
    13be:	93 ff       	sbrs	r25, 3
    13c0:	81 91       	ld	r24, Z+
    13c2:	7f 01       	movw	r14, r30
    13c4:	88 23       	and	r24, r24
    13c6:	09 f4       	brne	.+2      	; 0x13ca <vfprintf+0x3a>
    13c8:	ba c1       	rjmp	.+884    	; 0x173e <vfprintf+0x3ae>
    13ca:	85 32       	cpi	r24, 0x25	; 37
    13cc:	39 f4       	brne	.+14     	; 0x13dc <vfprintf+0x4c>
    13ce:	93 fd       	sbrc	r25, 3
    13d0:	85 91       	lpm	r24, Z+
    13d2:	93 ff       	sbrs	r25, 3
    13d4:	81 91       	ld	r24, Z+
    13d6:	7f 01       	movw	r14, r30
    13d8:	85 32       	cpi	r24, 0x25	; 37
    13da:	29 f4       	brne	.+10     	; 0x13e6 <vfprintf+0x56>
    13dc:	b6 01       	movw	r22, r12
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 bf 0b 	call	0x177e	; 0x177e <fputc>
    13e4:	e7 cf       	rjmp	.-50     	; 0x13b4 <vfprintf+0x24>
    13e6:	91 2c       	mov	r9, r1
    13e8:	21 2c       	mov	r2, r1
    13ea:	31 2c       	mov	r3, r1
    13ec:	ff e1       	ldi	r31, 0x1F	; 31
    13ee:	f3 15       	cp	r31, r3
    13f0:	d8 f0       	brcs	.+54     	; 0x1428 <vfprintf+0x98>
    13f2:	8b 32       	cpi	r24, 0x2B	; 43
    13f4:	79 f0       	breq	.+30     	; 0x1414 <vfprintf+0x84>
    13f6:	38 f4       	brcc	.+14     	; 0x1406 <vfprintf+0x76>
    13f8:	80 32       	cpi	r24, 0x20	; 32
    13fa:	79 f0       	breq	.+30     	; 0x141a <vfprintf+0x8a>
    13fc:	83 32       	cpi	r24, 0x23	; 35
    13fe:	a1 f4       	brne	.+40     	; 0x1428 <vfprintf+0x98>
    1400:	23 2d       	mov	r18, r3
    1402:	20 61       	ori	r18, 0x10	; 16
    1404:	1d c0       	rjmp	.+58     	; 0x1440 <vfprintf+0xb0>
    1406:	8d 32       	cpi	r24, 0x2D	; 45
    1408:	61 f0       	breq	.+24     	; 0x1422 <vfprintf+0x92>
    140a:	80 33       	cpi	r24, 0x30	; 48
    140c:	69 f4       	brne	.+26     	; 0x1428 <vfprintf+0x98>
    140e:	23 2d       	mov	r18, r3
    1410:	21 60       	ori	r18, 0x01	; 1
    1412:	16 c0       	rjmp	.+44     	; 0x1440 <vfprintf+0xb0>
    1414:	83 2d       	mov	r24, r3
    1416:	82 60       	ori	r24, 0x02	; 2
    1418:	38 2e       	mov	r3, r24
    141a:	e3 2d       	mov	r30, r3
    141c:	e4 60       	ori	r30, 0x04	; 4
    141e:	3e 2e       	mov	r3, r30
    1420:	2a c0       	rjmp	.+84     	; 0x1476 <vfprintf+0xe6>
    1422:	f3 2d       	mov	r31, r3
    1424:	f8 60       	ori	r31, 0x08	; 8
    1426:	1d c0       	rjmp	.+58     	; 0x1462 <vfprintf+0xd2>
    1428:	37 fc       	sbrc	r3, 7
    142a:	2d c0       	rjmp	.+90     	; 0x1486 <vfprintf+0xf6>
    142c:	20 ed       	ldi	r18, 0xD0	; 208
    142e:	28 0f       	add	r18, r24
    1430:	2a 30       	cpi	r18, 0x0A	; 10
    1432:	40 f0       	brcs	.+16     	; 0x1444 <vfprintf+0xb4>
    1434:	8e 32       	cpi	r24, 0x2E	; 46
    1436:	b9 f4       	brne	.+46     	; 0x1466 <vfprintf+0xd6>
    1438:	36 fc       	sbrc	r3, 6
    143a:	81 c1       	rjmp	.+770    	; 0x173e <vfprintf+0x3ae>
    143c:	23 2d       	mov	r18, r3
    143e:	20 64       	ori	r18, 0x40	; 64
    1440:	32 2e       	mov	r3, r18
    1442:	19 c0       	rjmp	.+50     	; 0x1476 <vfprintf+0xe6>
    1444:	36 fe       	sbrs	r3, 6
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <vfprintf+0xc4>
    1448:	8a e0       	ldi	r24, 0x0A	; 10
    144a:	98 9e       	mul	r9, r24
    144c:	20 0d       	add	r18, r0
    144e:	11 24       	eor	r1, r1
    1450:	92 2e       	mov	r9, r18
    1452:	11 c0       	rjmp	.+34     	; 0x1476 <vfprintf+0xe6>
    1454:	ea e0       	ldi	r30, 0x0A	; 10
    1456:	2e 9e       	mul	r2, r30
    1458:	20 0d       	add	r18, r0
    145a:	11 24       	eor	r1, r1
    145c:	22 2e       	mov	r2, r18
    145e:	f3 2d       	mov	r31, r3
    1460:	f0 62       	ori	r31, 0x20	; 32
    1462:	3f 2e       	mov	r3, r31
    1464:	08 c0       	rjmp	.+16     	; 0x1476 <vfprintf+0xe6>
    1466:	8c 36       	cpi	r24, 0x6C	; 108
    1468:	21 f4       	brne	.+8      	; 0x1472 <vfprintf+0xe2>
    146a:	83 2d       	mov	r24, r3
    146c:	80 68       	ori	r24, 0x80	; 128
    146e:	38 2e       	mov	r3, r24
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0xe6>
    1472:	88 36       	cpi	r24, 0x68	; 104
    1474:	41 f4       	brne	.+16     	; 0x1486 <vfprintf+0xf6>
    1476:	f7 01       	movw	r30, r14
    1478:	93 fd       	sbrc	r25, 3
    147a:	85 91       	lpm	r24, Z+
    147c:	93 ff       	sbrs	r25, 3
    147e:	81 91       	ld	r24, Z+
    1480:	7f 01       	movw	r14, r30
    1482:	81 11       	cpse	r24, r1
    1484:	b3 cf       	rjmp	.-154    	; 0x13ec <vfprintf+0x5c>
    1486:	98 2f       	mov	r25, r24
    1488:	9f 7d       	andi	r25, 0xDF	; 223
    148a:	95 54       	subi	r25, 0x45	; 69
    148c:	93 30       	cpi	r25, 0x03	; 3
    148e:	28 f4       	brcc	.+10     	; 0x149a <vfprintf+0x10a>
    1490:	0c 5f       	subi	r16, 0xFC	; 252
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	9f e3       	ldi	r25, 0x3F	; 63
    1496:	99 83       	std	Y+1, r25	; 0x01
    1498:	0d c0       	rjmp	.+26     	; 0x14b4 <vfprintf+0x124>
    149a:	83 36       	cpi	r24, 0x63	; 99
    149c:	31 f0       	breq	.+12     	; 0x14aa <vfprintf+0x11a>
    149e:	83 37       	cpi	r24, 0x73	; 115
    14a0:	71 f0       	breq	.+28     	; 0x14be <vfprintf+0x12e>
    14a2:	83 35       	cpi	r24, 0x53	; 83
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <vfprintf+0x118>
    14a6:	59 c0       	rjmp	.+178    	; 0x155a <vfprintf+0x1ca>
    14a8:	21 c0       	rjmp	.+66     	; 0x14ec <vfprintf+0x15c>
    14aa:	f8 01       	movw	r30, r16
    14ac:	80 81       	ld	r24, Z
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	0e 5f       	subi	r16, 0xFE	; 254
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
    14b4:	88 24       	eor	r8, r8
    14b6:	83 94       	inc	r8
    14b8:	91 2c       	mov	r9, r1
    14ba:	53 01       	movw	r10, r6
    14bc:	13 c0       	rjmp	.+38     	; 0x14e4 <vfprintf+0x154>
    14be:	28 01       	movw	r4, r16
    14c0:	f2 e0       	ldi	r31, 0x02	; 2
    14c2:	4f 0e       	add	r4, r31
    14c4:	51 1c       	adc	r5, r1
    14c6:	f8 01       	movw	r30, r16
    14c8:	a0 80       	ld	r10, Z
    14ca:	b1 80       	ldd	r11, Z+1	; 0x01
    14cc:	36 fe       	sbrs	r3, 6
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <vfprintf+0x146>
    14d0:	69 2d       	mov	r22, r9
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0x14a>
    14d6:	6f ef       	ldi	r22, 0xFF	; 255
    14d8:	7f ef       	ldi	r23, 0xFF	; 255
    14da:	c5 01       	movw	r24, r10
    14dc:	0e 94 b4 0b 	call	0x1768	; 0x1768 <strnlen>
    14e0:	4c 01       	movw	r8, r24
    14e2:	82 01       	movw	r16, r4
    14e4:	f3 2d       	mov	r31, r3
    14e6:	ff 77       	andi	r31, 0x7F	; 127
    14e8:	3f 2e       	mov	r3, r31
    14ea:	16 c0       	rjmp	.+44     	; 0x1518 <vfprintf+0x188>
    14ec:	28 01       	movw	r4, r16
    14ee:	22 e0       	ldi	r18, 0x02	; 2
    14f0:	42 0e       	add	r4, r18
    14f2:	51 1c       	adc	r5, r1
    14f4:	f8 01       	movw	r30, r16
    14f6:	a0 80       	ld	r10, Z
    14f8:	b1 80       	ldd	r11, Z+1	; 0x01
    14fa:	36 fe       	sbrs	r3, 6
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <vfprintf+0x174>
    14fe:	69 2d       	mov	r22, r9
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <vfprintf+0x178>
    1504:	6f ef       	ldi	r22, 0xFF	; 255
    1506:	7f ef       	ldi	r23, 0xFF	; 255
    1508:	c5 01       	movw	r24, r10
    150a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <strnlen_P>
    150e:	4c 01       	movw	r8, r24
    1510:	f3 2d       	mov	r31, r3
    1512:	f0 68       	ori	r31, 0x80	; 128
    1514:	3f 2e       	mov	r3, r31
    1516:	82 01       	movw	r16, r4
    1518:	33 fc       	sbrc	r3, 3
    151a:	1b c0       	rjmp	.+54     	; 0x1552 <vfprintf+0x1c2>
    151c:	82 2d       	mov	r24, r2
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	88 16       	cp	r8, r24
    1522:	99 06       	cpc	r9, r25
    1524:	b0 f4       	brcc	.+44     	; 0x1552 <vfprintf+0x1c2>
    1526:	b6 01       	movw	r22, r12
    1528:	80 e2       	ldi	r24, 0x20	; 32
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 bf 0b 	call	0x177e	; 0x177e <fputc>
    1530:	2a 94       	dec	r2
    1532:	f4 cf       	rjmp	.-24     	; 0x151c <vfprintf+0x18c>
    1534:	f5 01       	movw	r30, r10
    1536:	37 fc       	sbrc	r3, 7
    1538:	85 91       	lpm	r24, Z+
    153a:	37 fe       	sbrs	r3, 7
    153c:	81 91       	ld	r24, Z+
    153e:	5f 01       	movw	r10, r30
    1540:	b6 01       	movw	r22, r12
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 bf 0b 	call	0x177e	; 0x177e <fputc>
    1548:	21 10       	cpse	r2, r1
    154a:	2a 94       	dec	r2
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	82 1a       	sub	r8, r18
    1550:	91 08       	sbc	r9, r1
    1552:	81 14       	cp	r8, r1
    1554:	91 04       	cpc	r9, r1
    1556:	71 f7       	brne	.-36     	; 0x1534 <vfprintf+0x1a4>
    1558:	e8 c0       	rjmp	.+464    	; 0x172a <vfprintf+0x39a>
    155a:	84 36       	cpi	r24, 0x64	; 100
    155c:	11 f0       	breq	.+4      	; 0x1562 <vfprintf+0x1d2>
    155e:	89 36       	cpi	r24, 0x69	; 105
    1560:	41 f5       	brne	.+80     	; 0x15b2 <vfprintf+0x222>
    1562:	f8 01       	movw	r30, r16
    1564:	37 fe       	sbrs	r3, 7
    1566:	07 c0       	rjmp	.+14     	; 0x1576 <vfprintf+0x1e6>
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	93 81       	ldd	r25, Z+3	; 0x03
    1570:	0c 5f       	subi	r16, 0xFC	; 252
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <vfprintf+0x1f6>
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	07 2e       	mov	r0, r23
    157c:	00 0c       	add	r0, r0
    157e:	88 0b       	sbc	r24, r24
    1580:	99 0b       	sbc	r25, r25
    1582:	0e 5f       	subi	r16, 0xFE	; 254
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	f3 2d       	mov	r31, r3
    1588:	ff 76       	andi	r31, 0x6F	; 111
    158a:	3f 2e       	mov	r3, r31
    158c:	97 ff       	sbrs	r25, 7
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <vfprintf+0x212>
    1590:	90 95       	com	r25
    1592:	80 95       	com	r24
    1594:	70 95       	com	r23
    1596:	61 95       	neg	r22
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	8f 4f       	sbci	r24, 0xFF	; 255
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	f0 68       	ori	r31, 0x80	; 128
    15a0:	3f 2e       	mov	r3, r31
    15a2:	2a e0       	ldi	r18, 0x0A	; 10
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	a3 01       	movw	r20, r6
    15a8:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ultoa_invert>
    15ac:	88 2e       	mov	r8, r24
    15ae:	86 18       	sub	r8, r6
    15b0:	45 c0       	rjmp	.+138    	; 0x163c <vfprintf+0x2ac>
    15b2:	85 37       	cpi	r24, 0x75	; 117
    15b4:	31 f4       	brne	.+12     	; 0x15c2 <vfprintf+0x232>
    15b6:	23 2d       	mov	r18, r3
    15b8:	2f 7e       	andi	r18, 0xEF	; 239
    15ba:	b2 2e       	mov	r11, r18
    15bc:	2a e0       	ldi	r18, 0x0A	; 10
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	25 c0       	rjmp	.+74     	; 0x160c <vfprintf+0x27c>
    15c2:	93 2d       	mov	r25, r3
    15c4:	99 7f       	andi	r25, 0xF9	; 249
    15c6:	b9 2e       	mov	r11, r25
    15c8:	8f 36       	cpi	r24, 0x6F	; 111
    15ca:	c1 f0       	breq	.+48     	; 0x15fc <vfprintf+0x26c>
    15cc:	18 f4       	brcc	.+6      	; 0x15d4 <vfprintf+0x244>
    15ce:	88 35       	cpi	r24, 0x58	; 88
    15d0:	79 f0       	breq	.+30     	; 0x15f0 <vfprintf+0x260>
    15d2:	b5 c0       	rjmp	.+362    	; 0x173e <vfprintf+0x3ae>
    15d4:	80 37       	cpi	r24, 0x70	; 112
    15d6:	19 f0       	breq	.+6      	; 0x15de <vfprintf+0x24e>
    15d8:	88 37       	cpi	r24, 0x78	; 120
    15da:	21 f0       	breq	.+8      	; 0x15e4 <vfprintf+0x254>
    15dc:	b0 c0       	rjmp	.+352    	; 0x173e <vfprintf+0x3ae>
    15de:	e9 2f       	mov	r30, r25
    15e0:	e0 61       	ori	r30, 0x10	; 16
    15e2:	be 2e       	mov	r11, r30
    15e4:	b4 fe       	sbrs	r11, 4
    15e6:	0d c0       	rjmp	.+26     	; 0x1602 <vfprintf+0x272>
    15e8:	fb 2d       	mov	r31, r11
    15ea:	f4 60       	ori	r31, 0x04	; 4
    15ec:	bf 2e       	mov	r11, r31
    15ee:	09 c0       	rjmp	.+18     	; 0x1602 <vfprintf+0x272>
    15f0:	34 fe       	sbrs	r3, 4
    15f2:	0a c0       	rjmp	.+20     	; 0x1608 <vfprintf+0x278>
    15f4:	29 2f       	mov	r18, r25
    15f6:	26 60       	ori	r18, 0x06	; 6
    15f8:	b2 2e       	mov	r11, r18
    15fa:	06 c0       	rjmp	.+12     	; 0x1608 <vfprintf+0x278>
    15fc:	28 e0       	ldi	r18, 0x08	; 8
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	05 c0       	rjmp	.+10     	; 0x160c <vfprintf+0x27c>
    1602:	20 e1       	ldi	r18, 0x10	; 16
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	02 c0       	rjmp	.+4      	; 0x160c <vfprintf+0x27c>
    1608:	20 e1       	ldi	r18, 0x10	; 16
    160a:	32 e0       	ldi	r19, 0x02	; 2
    160c:	f8 01       	movw	r30, r16
    160e:	b7 fe       	sbrs	r11, 7
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <vfprintf+0x290>
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	0c 5f       	subi	r16, 0xFC	; 252
    161c:	1f 4f       	sbci	r17, 0xFF	; 255
    161e:	06 c0       	rjmp	.+12     	; 0x162c <vfprintf+0x29c>
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 5f       	subi	r16, 0xFE	; 254
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	a3 01       	movw	r20, r6
    162e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ultoa_invert>
    1632:	88 2e       	mov	r8, r24
    1634:	86 18       	sub	r8, r6
    1636:	fb 2d       	mov	r31, r11
    1638:	ff 77       	andi	r31, 0x7F	; 127
    163a:	3f 2e       	mov	r3, r31
    163c:	36 fe       	sbrs	r3, 6
    163e:	0d c0       	rjmp	.+26     	; 0x165a <vfprintf+0x2ca>
    1640:	23 2d       	mov	r18, r3
    1642:	2e 7f       	andi	r18, 0xFE	; 254
    1644:	a2 2e       	mov	r10, r18
    1646:	89 14       	cp	r8, r9
    1648:	58 f4       	brcc	.+22     	; 0x1660 <vfprintf+0x2d0>
    164a:	34 fe       	sbrs	r3, 4
    164c:	0b c0       	rjmp	.+22     	; 0x1664 <vfprintf+0x2d4>
    164e:	32 fc       	sbrc	r3, 2
    1650:	09 c0       	rjmp	.+18     	; 0x1664 <vfprintf+0x2d4>
    1652:	83 2d       	mov	r24, r3
    1654:	8e 7e       	andi	r24, 0xEE	; 238
    1656:	a8 2e       	mov	r10, r24
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <vfprintf+0x2d4>
    165a:	b8 2c       	mov	r11, r8
    165c:	a3 2c       	mov	r10, r3
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <vfprintf+0x2d6>
    1660:	b8 2c       	mov	r11, r8
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <vfprintf+0x2d6>
    1664:	b9 2c       	mov	r11, r9
    1666:	a4 fe       	sbrs	r10, 4
    1668:	0f c0       	rjmp	.+30     	; 0x1688 <vfprintf+0x2f8>
    166a:	fe 01       	movw	r30, r28
    166c:	e8 0d       	add	r30, r8
    166e:	f1 1d       	adc	r31, r1
    1670:	80 81       	ld	r24, Z
    1672:	80 33       	cpi	r24, 0x30	; 48
    1674:	21 f4       	brne	.+8      	; 0x167e <vfprintf+0x2ee>
    1676:	9a 2d       	mov	r25, r10
    1678:	99 7e       	andi	r25, 0xE9	; 233
    167a:	a9 2e       	mov	r10, r25
    167c:	09 c0       	rjmp	.+18     	; 0x1690 <vfprintf+0x300>
    167e:	a2 fe       	sbrs	r10, 2
    1680:	06 c0       	rjmp	.+12     	; 0x168e <vfprintf+0x2fe>
    1682:	b3 94       	inc	r11
    1684:	b3 94       	inc	r11
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <vfprintf+0x300>
    1688:	8a 2d       	mov	r24, r10
    168a:	86 78       	andi	r24, 0x86	; 134
    168c:	09 f0       	breq	.+2      	; 0x1690 <vfprintf+0x300>
    168e:	b3 94       	inc	r11
    1690:	a3 fc       	sbrc	r10, 3
    1692:	11 c0       	rjmp	.+34     	; 0x16b6 <vfprintf+0x326>
    1694:	a0 fe       	sbrs	r10, 0
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <vfprintf+0x314>
    1698:	b2 14       	cp	r11, r2
    169a:	88 f4       	brcc	.+34     	; 0x16be <vfprintf+0x32e>
    169c:	28 0c       	add	r2, r8
    169e:	92 2c       	mov	r9, r2
    16a0:	9b 18       	sub	r9, r11
    16a2:	0e c0       	rjmp	.+28     	; 0x16c0 <vfprintf+0x330>
    16a4:	b2 14       	cp	r11, r2
    16a6:	60 f4       	brcc	.+24     	; 0x16c0 <vfprintf+0x330>
    16a8:	b6 01       	movw	r22, r12
    16aa:	80 e2       	ldi	r24, 0x20	; 32
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 bf 0b 	call	0x177e	; 0x177e <fputc>
    16b2:	b3 94       	inc	r11
    16b4:	f7 cf       	rjmp	.-18     	; 0x16a4 <vfprintf+0x314>
    16b6:	b2 14       	cp	r11, r2
    16b8:	18 f4       	brcc	.+6      	; 0x16c0 <vfprintf+0x330>
    16ba:	2b 18       	sub	r2, r11
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <vfprintf+0x332>
    16be:	98 2c       	mov	r9, r8
    16c0:	21 2c       	mov	r2, r1
    16c2:	a4 fe       	sbrs	r10, 4
    16c4:	10 c0       	rjmp	.+32     	; 0x16e6 <vfprintf+0x356>
    16c6:	b6 01       	movw	r22, r12
    16c8:	80 e3       	ldi	r24, 0x30	; 48
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 bf 0b 	call	0x177e	; 0x177e <fputc>
    16d0:	a2 fe       	sbrs	r10, 2
    16d2:	17 c0       	rjmp	.+46     	; 0x1702 <vfprintf+0x372>
    16d4:	a1 fc       	sbrc	r10, 1
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <vfprintf+0x34e>
    16d8:	88 e7       	ldi	r24, 0x78	; 120
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <vfprintf+0x352>
    16de:	88 e5       	ldi	r24, 0x58	; 88
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	b6 01       	movw	r22, r12
    16e4:	0c c0       	rjmp	.+24     	; 0x16fe <vfprintf+0x36e>
    16e6:	8a 2d       	mov	r24, r10
    16e8:	86 78       	andi	r24, 0x86	; 134
    16ea:	59 f0       	breq	.+22     	; 0x1702 <vfprintf+0x372>
    16ec:	a1 fe       	sbrs	r10, 1
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <vfprintf+0x364>
    16f0:	8b e2       	ldi	r24, 0x2B	; 43
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <vfprintf+0x366>
    16f4:	80 e2       	ldi	r24, 0x20	; 32
    16f6:	a7 fc       	sbrc	r10, 7
    16f8:	8d e2       	ldi	r24, 0x2D	; 45
    16fa:	b6 01       	movw	r22, r12
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 bf 0b 	call	0x177e	; 0x177e <fputc>
    1702:	89 14       	cp	r8, r9
    1704:	38 f4       	brcc	.+14     	; 0x1714 <vfprintf+0x384>
    1706:	b6 01       	movw	r22, r12
    1708:	80 e3       	ldi	r24, 0x30	; 48
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 bf 0b 	call	0x177e	; 0x177e <fputc>
    1710:	9a 94       	dec	r9
    1712:	f7 cf       	rjmp	.-18     	; 0x1702 <vfprintf+0x372>
    1714:	8a 94       	dec	r8
    1716:	f3 01       	movw	r30, r6
    1718:	e8 0d       	add	r30, r8
    171a:	f1 1d       	adc	r31, r1
    171c:	80 81       	ld	r24, Z
    171e:	b6 01       	movw	r22, r12
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 bf 0b 	call	0x177e	; 0x177e <fputc>
    1726:	81 10       	cpse	r8, r1
    1728:	f5 cf       	rjmp	.-22     	; 0x1714 <vfprintf+0x384>
    172a:	22 20       	and	r2, r2
    172c:	09 f4       	brne	.+2      	; 0x1730 <vfprintf+0x3a0>
    172e:	42 ce       	rjmp	.-892    	; 0x13b4 <vfprintf+0x24>
    1730:	b6 01       	movw	r22, r12
    1732:	80 e2       	ldi	r24, 0x20	; 32
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 bf 0b 	call	0x177e	; 0x177e <fputc>
    173a:	2a 94       	dec	r2
    173c:	f6 cf       	rjmp	.-20     	; 0x172a <vfprintf+0x39a>
    173e:	f6 01       	movw	r30, r12
    1740:	86 81       	ldd	r24, Z+6	; 0x06
    1742:	97 81       	ldd	r25, Z+7	; 0x07
    1744:	02 c0       	rjmp	.+4      	; 0x174a <vfprintf+0x3ba>
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	9f ef       	ldi	r25, 0xFF	; 255
    174a:	2b 96       	adiw	r28, 0x0b	; 11
    174c:	e2 e1       	ldi	r30, 0x12	; 18
    174e:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__epilogue_restores__>

00001752 <strnlen_P>:
    1752:	fc 01       	movw	r30, r24
    1754:	05 90       	lpm	r0, Z+
    1756:	61 50       	subi	r22, 0x01	; 1
    1758:	70 40       	sbci	r23, 0x00	; 0
    175a:	01 10       	cpse	r0, r1
    175c:	d8 f7       	brcc	.-10     	; 0x1754 <strnlen_P+0x2>
    175e:	80 95       	com	r24
    1760:	90 95       	com	r25
    1762:	8e 0f       	add	r24, r30
    1764:	9f 1f       	adc	r25, r31
    1766:	08 95       	ret

00001768 <strnlen>:
    1768:	fc 01       	movw	r30, r24
    176a:	61 50       	subi	r22, 0x01	; 1
    176c:	70 40       	sbci	r23, 0x00	; 0
    176e:	01 90       	ld	r0, Z+
    1770:	01 10       	cpse	r0, r1
    1772:	d8 f7       	brcc	.-10     	; 0x176a <strnlen+0x2>
    1774:	80 95       	com	r24
    1776:	90 95       	com	r25
    1778:	8e 0f       	add	r24, r30
    177a:	9f 1f       	adc	r25, r31
    177c:	08 95       	ret

0000177e <fputc>:
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	fb 01       	movw	r30, r22
    1788:	23 81       	ldd	r18, Z+3	; 0x03
    178a:	21 fd       	sbrc	r18, 1
    178c:	03 c0       	rjmp	.+6      	; 0x1794 <fputc+0x16>
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	9f ef       	ldi	r25, 0xFF	; 255
    1792:	2c c0       	rjmp	.+88     	; 0x17ec <fputc+0x6e>
    1794:	22 ff       	sbrs	r18, 2
    1796:	16 c0       	rjmp	.+44     	; 0x17c4 <fputc+0x46>
    1798:	46 81       	ldd	r20, Z+6	; 0x06
    179a:	57 81       	ldd	r21, Z+7	; 0x07
    179c:	24 81       	ldd	r18, Z+4	; 0x04
    179e:	35 81       	ldd	r19, Z+5	; 0x05
    17a0:	42 17       	cp	r20, r18
    17a2:	53 07       	cpc	r21, r19
    17a4:	44 f4       	brge	.+16     	; 0x17b6 <fputc+0x38>
    17a6:	a0 81       	ld	r26, Z
    17a8:	b1 81       	ldd	r27, Z+1	; 0x01
    17aa:	9d 01       	movw	r18, r26
    17ac:	2f 5f       	subi	r18, 0xFF	; 255
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	31 83       	std	Z+1, r19	; 0x01
    17b2:	20 83       	st	Z, r18
    17b4:	8c 93       	st	X, r24
    17b6:	26 81       	ldd	r18, Z+6	; 0x06
    17b8:	37 81       	ldd	r19, Z+7	; 0x07
    17ba:	2f 5f       	subi	r18, 0xFF	; 255
    17bc:	3f 4f       	sbci	r19, 0xFF	; 255
    17be:	37 83       	std	Z+7, r19	; 0x07
    17c0:	26 83       	std	Z+6, r18	; 0x06
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <fputc+0x6e>
    17c4:	8b 01       	movw	r16, r22
    17c6:	ec 01       	movw	r28, r24
    17c8:	fb 01       	movw	r30, r22
    17ca:	00 84       	ldd	r0, Z+8	; 0x08
    17cc:	f1 85       	ldd	r31, Z+9	; 0x09
    17ce:	e0 2d       	mov	r30, r0
    17d0:	09 95       	icall
    17d2:	89 2b       	or	r24, r25
    17d4:	e1 f6       	brne	.-72     	; 0x178e <fputc+0x10>
    17d6:	d8 01       	movw	r26, r16
    17d8:	16 96       	adiw	r26, 0x06	; 6
    17da:	8d 91       	ld	r24, X+
    17dc:	9c 91       	ld	r25, X
    17de:	17 97       	sbiw	r26, 0x07	; 7
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	17 96       	adiw	r26, 0x07	; 7
    17e4:	9c 93       	st	X, r25
    17e6:	8e 93       	st	-X, r24
    17e8:	16 97       	sbiw	r26, 0x06	; 6
    17ea:	ce 01       	movw	r24, r28
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

000017f6 <__ultoa_invert>:
    17f6:	fa 01       	movw	r30, r20
    17f8:	aa 27       	eor	r26, r26
    17fa:	28 30       	cpi	r18, 0x08	; 8
    17fc:	51 f1       	breq	.+84     	; 0x1852 <__ultoa_invert+0x5c>
    17fe:	20 31       	cpi	r18, 0x10	; 16
    1800:	81 f1       	breq	.+96     	; 0x1862 <__ultoa_invert+0x6c>
    1802:	e8 94       	clt
    1804:	6f 93       	push	r22
    1806:	6e 7f       	andi	r22, 0xFE	; 254
    1808:	6e 5f       	subi	r22, 0xFE	; 254
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	8f 4f       	sbci	r24, 0xFF	; 255
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	af 4f       	sbci	r26, 0xFF	; 255
    1812:	b1 e0       	ldi	r27, 0x01	; 1
    1814:	3e d0       	rcall	.+124    	; 0x1892 <__ultoa_invert+0x9c>
    1816:	b4 e0       	ldi	r27, 0x04	; 4
    1818:	3c d0       	rcall	.+120    	; 0x1892 <__ultoa_invert+0x9c>
    181a:	67 0f       	add	r22, r23
    181c:	78 1f       	adc	r23, r24
    181e:	89 1f       	adc	r24, r25
    1820:	9a 1f       	adc	r25, r26
    1822:	a1 1d       	adc	r26, r1
    1824:	68 0f       	add	r22, r24
    1826:	79 1f       	adc	r23, r25
    1828:	8a 1f       	adc	r24, r26
    182a:	91 1d       	adc	r25, r1
    182c:	a1 1d       	adc	r26, r1
    182e:	6a 0f       	add	r22, r26
    1830:	71 1d       	adc	r23, r1
    1832:	81 1d       	adc	r24, r1
    1834:	91 1d       	adc	r25, r1
    1836:	a1 1d       	adc	r26, r1
    1838:	20 d0       	rcall	.+64     	; 0x187a <__ultoa_invert+0x84>
    183a:	09 f4       	brne	.+2      	; 0x183e <__ultoa_invert+0x48>
    183c:	68 94       	set
    183e:	3f 91       	pop	r19
    1840:	2a e0       	ldi	r18, 0x0A	; 10
    1842:	26 9f       	mul	r18, r22
    1844:	11 24       	eor	r1, r1
    1846:	30 19       	sub	r19, r0
    1848:	30 5d       	subi	r19, 0xD0	; 208
    184a:	31 93       	st	Z+, r19
    184c:	de f6       	brtc	.-74     	; 0x1804 <__ultoa_invert+0xe>
    184e:	cf 01       	movw	r24, r30
    1850:	08 95       	ret
    1852:	46 2f       	mov	r20, r22
    1854:	47 70       	andi	r20, 0x07	; 7
    1856:	40 5d       	subi	r20, 0xD0	; 208
    1858:	41 93       	st	Z+, r20
    185a:	b3 e0       	ldi	r27, 0x03	; 3
    185c:	0f d0       	rcall	.+30     	; 0x187c <__ultoa_invert+0x86>
    185e:	c9 f7       	brne	.-14     	; 0x1852 <__ultoa_invert+0x5c>
    1860:	f6 cf       	rjmp	.-20     	; 0x184e <__ultoa_invert+0x58>
    1862:	46 2f       	mov	r20, r22
    1864:	4f 70       	andi	r20, 0x0F	; 15
    1866:	40 5d       	subi	r20, 0xD0	; 208
    1868:	4a 33       	cpi	r20, 0x3A	; 58
    186a:	18 f0       	brcs	.+6      	; 0x1872 <__ultoa_invert+0x7c>
    186c:	49 5d       	subi	r20, 0xD9	; 217
    186e:	31 fd       	sbrc	r19, 1
    1870:	40 52       	subi	r20, 0x20	; 32
    1872:	41 93       	st	Z+, r20
    1874:	02 d0       	rcall	.+4      	; 0x187a <__ultoa_invert+0x84>
    1876:	a9 f7       	brne	.-22     	; 0x1862 <__ultoa_invert+0x6c>
    1878:	ea cf       	rjmp	.-44     	; 0x184e <__ultoa_invert+0x58>
    187a:	b4 e0       	ldi	r27, 0x04	; 4
    187c:	a6 95       	lsr	r26
    187e:	97 95       	ror	r25
    1880:	87 95       	ror	r24
    1882:	77 95       	ror	r23
    1884:	67 95       	ror	r22
    1886:	ba 95       	dec	r27
    1888:	c9 f7       	brne	.-14     	; 0x187c <__ultoa_invert+0x86>
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	61 05       	cpc	r22, r1
    188e:	71 05       	cpc	r23, r1
    1890:	08 95       	ret
    1892:	9b 01       	movw	r18, r22
    1894:	ac 01       	movw	r20, r24
    1896:	0a 2e       	mov	r0, r26
    1898:	06 94       	lsr	r0
    189a:	57 95       	ror	r21
    189c:	47 95       	ror	r20
    189e:	37 95       	ror	r19
    18a0:	27 95       	ror	r18
    18a2:	ba 95       	dec	r27
    18a4:	c9 f7       	brne	.-14     	; 0x1898 <__ultoa_invert+0xa2>
    18a6:	62 0f       	add	r22, r18
    18a8:	73 1f       	adc	r23, r19
    18aa:	84 1f       	adc	r24, r20
    18ac:	95 1f       	adc	r25, r21
    18ae:	a0 1d       	adc	r26, r0
    18b0:	08 95       	ret

000018b2 <__prologue_saves__>:
    18b2:	2f 92       	push	r2
    18b4:	3f 92       	push	r3
    18b6:	4f 92       	push	r4
    18b8:	5f 92       	push	r5
    18ba:	6f 92       	push	r6
    18bc:	7f 92       	push	r7
    18be:	8f 92       	push	r8
    18c0:	9f 92       	push	r9
    18c2:	af 92       	push	r10
    18c4:	bf 92       	push	r11
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	ca 1b       	sub	r28, r26
    18dc:	db 0b       	sbc	r29, r27
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	09 94       	ijmp

000018ea <__epilogue_restores__>:
    18ea:	2a 88       	ldd	r2, Y+18	; 0x12
    18ec:	39 88       	ldd	r3, Y+17	; 0x11
    18ee:	48 88       	ldd	r4, Y+16	; 0x10
    18f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    18f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    18f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    18f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    18f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    18fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    18fc:	b9 84       	ldd	r11, Y+9	; 0x09
    18fe:	c8 84       	ldd	r12, Y+8	; 0x08
    1900:	df 80       	ldd	r13, Y+7	; 0x07
    1902:	ee 80       	ldd	r14, Y+6	; 0x06
    1904:	fd 80       	ldd	r15, Y+5	; 0x05
    1906:	0c 81       	ldd	r16, Y+4	; 0x04
    1908:	1b 81       	ldd	r17, Y+3	; 0x03
    190a:	aa 81       	ldd	r26, Y+2	; 0x02
    190c:	b9 81       	ldd	r27, Y+1	; 0x01
    190e:	ce 0f       	add	r28, r30
    1910:	d1 1d       	adc	r29, r1
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	ed 01       	movw	r28, r26
    191e:	08 95       	ret

00001920 <_exit>:
    1920:	f8 94       	cli

00001922 <__stop_program>:
    1922:	ff cf       	rjmp	.-2      	; 0x1922 <__stop_program>
