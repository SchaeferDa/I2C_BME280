
I2C_BME280.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000029f0  00002a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080010c  0080010c  00002a90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ac0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00002b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fb2  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b97  00000000  00000000  00004d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c4  00000000  00000000  00005901  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a08  00000000  00000000  00006ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e21  00000000  00000000  000078d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000180a  00000000  00000000  000086f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00009efb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <BME280_get_pressure+0x5e>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <BME280_calibrate_pressure+0x208>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <BME280_calibrate_temperature+0x24>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <BME280_set_standby_time+0x8>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e0 ef       	ldi	r30, 0xF0	; 240
     176:	f9 e2       	ldi	r31, 0x29	; 41
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	ac 30       	cpi	r26, 0x0C	; 12
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	ac e0       	ldi	r26, 0x0C	; 12
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a4 33       	cpi	r26, 0x34	; 52
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 bb 0a 	call	0x1576	; 0x1576 <main>
     198:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <BME280_init>:

void BME280_soft_reset()
{
	// soft reset of BME280
	writeToRegister(0xE0, 0xB6);
}
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	1f 92       	push	r1
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
     1aa:	89 83       	std	Y+1, r24	; 0x01
     1ac:	89 81       	ldd	r24, Y+1	; 0x01
     1ae:	81 60       	ori	r24, 0x01	; 1
     1b0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	8e 7f       	andi	r24, 0xFE	; 254
     1b8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <slaveAddressW>
     1bc:	00 00       	nop
     1be:	0f 90       	pop	r0
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <BME280_set_standby_time>:
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <BME280_set_standby_time+0x6>
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <BME280_set_standby_time+0x8>
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	8c 83       	std	Y+4, r24	; 0x04
     1d4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <BME280_get_mode>
     1d8:	89 83       	std	Y+1, r24	; 0x01
     1da:	85 ef       	ldi	r24, 0xF5	; 245
     1dc:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     1e0:	8a 83       	std	Y+2, r24	; 0x02
     1e2:	0e 94 bf 01 	call	0x37e	; 0x37e <BME280_set_sleep_mode>
     1e6:	8a 81       	ldd	r24, Y+2	; 0x02
     1e8:	98 2f       	mov	r25, r24
     1ea:	9f 71       	andi	r25, 0x1F	; 31
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	89 2b       	or	r24, r25
     1f0:	68 2f       	mov	r22, r24
     1f2:	85 ef       	ldi	r24, 0xF5	; 245
     1f4:	0e 94 86 0a 	call	0x150c	; 0x150c <writeToRegister>
     1f8:	8b 83       	std	Y+3, r24	; 0x03
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	0e 94 a7 01 	call	0x34e	; 0x34e <BME280_set_mode>
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <BME280_set_standby_time_62_5>:
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	80 e2       	ldi	r24, 0x20	; 32
     21a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <BME280_set_standby_time>
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <BME280_set_temperature_oversampling>:
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	00 d0       	rcall	.+0      	; 0x22a <BME280_set_temperature_oversampling+0x6>
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
     22e:	8a 83       	std	Y+2, r24	; 0x02
     230:	84 ef       	ldi	r24, 0xF4	; 244
     232:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     236:	89 83       	std	Y+1, r24	; 0x01
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	98 2f       	mov	r25, r24
     23c:	9f 71       	andi	r25, 0x1F	; 31
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	89 2b       	or	r24, r25
     242:	68 2f       	mov	r22, r24
     244:	84 ef       	ldi	r24, 0xF4	; 244
     246:	0e 94 86 0a 	call	0x150c	; 0x150c <writeToRegister>
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <BME280_set_temperature_oversampling_1>:
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
     25c:	80 e2       	ldi	r24, 0x20	; 32
     25e:	0e 94 12 01 	call	0x224	; 0x224 <BME280_set_temperature_oversampling>
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <BME280_set_pressure_oversampling>:
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	00 d0       	rcall	.+0      	; 0x26e <BME280_set_pressure_oversampling+0x6>
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	8a 83       	std	Y+2, r24	; 0x02
     274:	84 ef       	ldi	r24, 0xF4	; 244
     276:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     27a:	89 83       	std	Y+1, r24	; 0x01
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	98 2f       	mov	r25, r24
     280:	93 7e       	andi	r25, 0xE3	; 227
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	89 2b       	or	r24, r25
     286:	68 2f       	mov	r22, r24
     288:	84 ef       	ldi	r24, 0xF4	; 244
     28a:	0e 94 86 0a 	call	0x150c	; 0x150c <writeToRegister>
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <BME280_set_pressure_oversampling_1>:
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	84 e0       	ldi	r24, 0x04	; 4
     2a2:	0e 94 34 01 	call	0x268	; 0x268 <BME280_set_pressure_oversampling>
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <BME280_set_humidity_oversampling>:
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <BME280_set_humidity_oversampling+0x6>
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	8a 83       	std	Y+2, r24	; 0x02
     2b8:	82 ef       	ldi	r24, 0xF2	; 242
     2ba:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     2be:	89 83       	std	Y+1, r24	; 0x01
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	98 2f       	mov	r25, r24
     2c4:	98 7f       	andi	r25, 0xF8	; 248
     2c6:	8a 81       	ldd	r24, Y+2	; 0x02
     2c8:	89 2b       	or	r24, r25
     2ca:	68 2f       	mov	r22, r24
     2cc:	82 ef       	ldi	r24, 0xF2	; 242
     2ce:	0e 94 86 0a 	call	0x150c	; 0x150c <writeToRegister>
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <BME280_set_humidity_oversampling_1>:
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	0e 94 56 01 	call	0x2ac	; 0x2ac <BME280_set_humidity_oversampling>
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <BME280_set_filter_coefficient>:
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <BME280_set_filter_coefficient+0x6>
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <BME280_set_filter_coefficient+0x8>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	8c 83       	std	Y+4, r24	; 0x04
     2fe:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <BME280_get_mode>
     302:	89 83       	std	Y+1, r24	; 0x01
     304:	85 ef       	ldi	r24, 0xF5	; 245
     306:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     30a:	8a 83       	std	Y+2, r24	; 0x02
     30c:	0e 94 bf 01 	call	0x37e	; 0x37e <BME280_set_sleep_mode>
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	98 2f       	mov	r25, r24
     314:	93 7e       	andi	r25, 0xE3	; 227
     316:	8c 81       	ldd	r24, Y+4	; 0x04
     318:	89 2b       	or	r24, r25
     31a:	68 2f       	mov	r22, r24
     31c:	85 ef       	ldi	r24, 0xF5	; 245
     31e:	0e 94 86 0a 	call	0x150c	; 0x150c <writeToRegister>
     322:	8b 83       	std	Y+3, r24	; 0x03
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	0e 94 a7 01 	call	0x34e	; 0x34e <BME280_set_mode>
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <BME280_set_filter_coefficient_2>:
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	84 e0       	ldi	r24, 0x04	; 4
     344:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BME280_set_filter_coefficient>
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <BME280_set_mode>:
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	00 d0       	rcall	.+0      	; 0x354 <BME280_set_mode+0x6>
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	8a 83       	std	Y+2, r24	; 0x02
     35a:	84 ef       	ldi	r24, 0xF4	; 244
     35c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     360:	89 83       	std	Y+1, r24	; 0x01
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	98 2f       	mov	r25, r24
     366:	9c 7f       	andi	r25, 0xFC	; 252
     368:	8a 81       	ldd	r24, Y+2	; 0x02
     36a:	89 2b       	or	r24, r25
     36c:	68 2f       	mov	r22, r24
     36e:	84 ef       	ldi	r24, 0xF4	; 244
     370:	0e 94 86 0a 	call	0x150c	; 0x150c <writeToRegister>
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <BME280_set_sleep_mode>:
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 a7 01 	call	0x34e	; 0x34e <BME280_set_mode>
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <BME280_set_normal_mode>:
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	83 e0       	ldi	r24, 0x03	; 3
     39c:	0e 94 a7 01 	call	0x34e	; 0x34e <BME280_set_mode>
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <BME280_get_mode>:
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	84 ef       	ldi	r24, 0xF4	; 244
     3b0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     3b4:	83 70       	andi	r24, 0x03	; 3
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <BME280_calibrate_temperature>:
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <dig_T1+0x1>
     3c8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <dig_T1>
     3cc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <dig_T2+0x1>
     3d0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <dig_T2>
     3d4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <dig_T3+0x1>
     3d8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <dig_T3>
     3dc:	88 e8       	ldi	r24, 0x88	; 136
     3de:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     3e2:	28 2f       	mov	r18, r24
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T1>
     3ea:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T1+0x1>
     3ee:	82 2b       	or	r24, r18
     3f0:	93 2b       	or	r25, r19
     3f2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <dig_T1+0x1>
     3f6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dig_T1>
     3fa:	89 e8       	ldi	r24, 0x89	; 137
     3fc:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     400:	88 2f       	mov	r24, r24
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	98 2f       	mov	r25, r24
     406:	88 27       	eor	r24, r24
     408:	9c 01       	movw	r18, r24
     40a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T1>
     40e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T1+0x1>
     412:	82 2b       	or	r24, r18
     414:	93 2b       	or	r25, r19
     416:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <dig_T1+0x1>
     41a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dig_T1>
     41e:	8a e8       	ldi	r24, 0x8A	; 138
     420:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     424:	28 2f       	mov	r18, r24
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <dig_T2>
     42c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <dig_T2+0x1>
     430:	82 2b       	or	r24, r18
     432:	93 2b       	or	r25, r19
     434:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <dig_T2+0x1>
     438:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <dig_T2>
     43c:	8b e8       	ldi	r24, 0x8B	; 139
     43e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     442:	88 2f       	mov	r24, r24
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	38 2f       	mov	r19, r24
     448:	22 27       	eor	r18, r18
     44a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <dig_T2>
     44e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <dig_T2+0x1>
     452:	82 2b       	or	r24, r18
     454:	93 2b       	or	r25, r19
     456:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <dig_T2+0x1>
     45a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <dig_T2>
     45e:	8c e8       	ldi	r24, 0x8C	; 140
     460:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     464:	28 2f       	mov	r18, r24
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <dig_T3>
     46c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <dig_T3+0x1>
     470:	82 2b       	or	r24, r18
     472:	93 2b       	or	r25, r19
     474:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <dig_T3+0x1>
     478:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <dig_T3>
     47c:	8d e8       	ldi	r24, 0x8D	; 141
     47e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     482:	88 2f       	mov	r24, r24
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	38 2f       	mov	r19, r24
     488:	22 27       	eor	r18, r18
     48a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <dig_T3>
     48e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <dig_T3+0x1>
     492:	82 2b       	or	r24, r18
     494:	93 2b       	or	r25, r19
     496:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <dig_T3+0x1>
     49a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <dig_T3>
     49e:	00 00       	nop
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <BME280_calibrate_pressure>:
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <dig_P1+0x1>
     4b2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <dig_P1>
     4b6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <dig_P2+0x1>
     4ba:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <dig_P2>
     4be:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <dig_P3+0x1>
     4c2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <dig_P3>
     4c6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <dig_P4+0x1>
     4ca:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <dig_P4>
     4ce:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <dig_P5+0x1>
     4d2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <dig_P5>
     4d6:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <dig_P6+0x1>
     4da:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <dig_P6>
     4de:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <dig_P7+0x1>
     4e2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <dig_P7>
     4e6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <dig_P8+0x1>
     4ea:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <dig_P8>
     4ee:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <dig_P9+0x1>
     4f2:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <dig_P9>
     4f6:	8e e8       	ldi	r24, 0x8E	; 142
     4f8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     4fc:	28 2f       	mov	r18, r24
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <dig_P1>
     504:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <dig_P1+0x1>
     508:	82 2b       	or	r24, r18
     50a:	93 2b       	or	r25, r19
     50c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <dig_P1+0x1>
     510:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <dig_P1>
     514:	8f e8       	ldi	r24, 0x8F	; 143
     516:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     51a:	88 2f       	mov	r24, r24
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	98 2f       	mov	r25, r24
     520:	88 27       	eor	r24, r24
     522:	9c 01       	movw	r18, r24
     524:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <dig_P1>
     528:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <dig_P1+0x1>
     52c:	82 2b       	or	r24, r18
     52e:	93 2b       	or	r25, r19
     530:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <dig_P1+0x1>
     534:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <dig_P1>
     538:	80 e9       	ldi	r24, 0x90	; 144
     53a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     53e:	28 2f       	mov	r18, r24
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <dig_P2>
     546:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <dig_P2+0x1>
     54a:	82 2b       	or	r24, r18
     54c:	93 2b       	or	r25, r19
     54e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <dig_P2+0x1>
     552:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <dig_P2>
     556:	81 e9       	ldi	r24, 0x91	; 145
     558:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     55c:	88 2f       	mov	r24, r24
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	38 2f       	mov	r19, r24
     562:	22 27       	eor	r18, r18
     564:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <dig_P2>
     568:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <dig_P2+0x1>
     56c:	82 2b       	or	r24, r18
     56e:	93 2b       	or	r25, r19
     570:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <dig_P2+0x1>
     574:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <dig_P2>
     578:	82 e9       	ldi	r24, 0x92	; 146
     57a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     57e:	28 2f       	mov	r18, r24
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <dig_P3>
     586:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <dig_P3+0x1>
     58a:	82 2b       	or	r24, r18
     58c:	93 2b       	or	r25, r19
     58e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <dig_P3+0x1>
     592:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <dig_P3>
     596:	83 e9       	ldi	r24, 0x93	; 147
     598:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     59c:	88 2f       	mov	r24, r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	38 2f       	mov	r19, r24
     5a2:	22 27       	eor	r18, r18
     5a4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <dig_P3>
     5a8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <dig_P3+0x1>
     5ac:	82 2b       	or	r24, r18
     5ae:	93 2b       	or	r25, r19
     5b0:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <dig_P3+0x1>
     5b4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <dig_P3>
     5b8:	84 e9       	ldi	r24, 0x94	; 148
     5ba:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     5be:	28 2f       	mov	r18, r24
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dig_P4>
     5c6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dig_P4+0x1>
     5ca:	82 2b       	or	r24, r18
     5cc:	93 2b       	or	r25, r19
     5ce:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dig_P4+0x1>
     5d2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dig_P4>
     5d6:	85 e9       	ldi	r24, 0x95	; 149
     5d8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	38 2f       	mov	r19, r24
     5e2:	22 27       	eor	r18, r18
     5e4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dig_P4>
     5e8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dig_P4+0x1>
     5ec:	82 2b       	or	r24, r18
     5ee:	93 2b       	or	r25, r19
     5f0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dig_P4+0x1>
     5f4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dig_P4>
     5f8:	86 e9       	ldi	r24, 0x96	; 150
     5fa:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     5fe:	28 2f       	mov	r18, r24
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <dig_P5>
     606:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <dig_P5+0x1>
     60a:	82 2b       	or	r24, r18
     60c:	93 2b       	or	r25, r19
     60e:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <dig_P5+0x1>
     612:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <dig_P5>
     616:	87 e9       	ldi	r24, 0x97	; 151
     618:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     61c:	88 2f       	mov	r24, r24
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	38 2f       	mov	r19, r24
     622:	22 27       	eor	r18, r18
     624:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <dig_P5>
     628:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <dig_P5+0x1>
     62c:	82 2b       	or	r24, r18
     62e:	93 2b       	or	r25, r19
     630:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <dig_P5+0x1>
     634:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <dig_P5>
     638:	88 e9       	ldi	r24, 0x98	; 152
     63a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     63e:	28 2f       	mov	r18, r24
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <dig_P6>
     646:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <dig_P6+0x1>
     64a:	82 2b       	or	r24, r18
     64c:	93 2b       	or	r25, r19
     64e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <dig_P6+0x1>
     652:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <dig_P6>
     656:	89 e9       	ldi	r24, 0x99	; 153
     658:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     65c:	88 2f       	mov	r24, r24
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	38 2f       	mov	r19, r24
     662:	22 27       	eor	r18, r18
     664:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <dig_P6>
     668:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <dig_P6+0x1>
     66c:	82 2b       	or	r24, r18
     66e:	93 2b       	or	r25, r19
     670:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <dig_P6+0x1>
     674:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <dig_P6>
     678:	8a e9       	ldi	r24, 0x9A	; 154
     67a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     67e:	28 2f       	mov	r18, r24
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_P7>
     686:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_P7+0x1>
     68a:	82 2b       	or	r24, r18
     68c:	93 2b       	or	r25, r19
     68e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <dig_P7+0x1>
     692:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dig_P7>
     696:	8b e9       	ldi	r24, 0x9B	; 155
     698:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     69c:	88 2f       	mov	r24, r24
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	38 2f       	mov	r19, r24
     6a2:	22 27       	eor	r18, r18
     6a4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_P7>
     6a8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_P7+0x1>
     6ac:	82 2b       	or	r24, r18
     6ae:	93 2b       	or	r25, r19
     6b0:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <dig_P7+0x1>
     6b4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dig_P7>
     6b8:	8c e9       	ldi	r24, 0x9C	; 156
     6ba:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     6be:	28 2f       	mov	r18, r24
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <dig_P8>
     6c6:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <dig_P8+0x1>
     6ca:	82 2b       	or	r24, r18
     6cc:	93 2b       	or	r25, r19
     6ce:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <dig_P8+0x1>
     6d2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <dig_P8>
     6d6:	8d e9       	ldi	r24, 0x9D	; 157
     6d8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     6dc:	88 2f       	mov	r24, r24
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	38 2f       	mov	r19, r24
     6e2:	22 27       	eor	r18, r18
     6e4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <dig_P8>
     6e8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <dig_P8+0x1>
     6ec:	82 2b       	or	r24, r18
     6ee:	93 2b       	or	r25, r19
     6f0:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <dig_P8+0x1>
     6f4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <dig_P8>
     6f8:	8e e9       	ldi	r24, 0x9E	; 158
     6fa:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     6fe:	28 2f       	mov	r18, r24
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <dig_P9>
     706:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <dig_P9+0x1>
     70a:	82 2b       	or	r24, r18
     70c:	93 2b       	or	r25, r19
     70e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <dig_P9+0x1>
     712:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <dig_P9>
     716:	8f e9       	ldi	r24, 0x9F	; 159
     718:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     71c:	88 2f       	mov	r24, r24
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	38 2f       	mov	r19, r24
     722:	22 27       	eor	r18, r18
     724:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <dig_P9>
     728:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <dig_P9+0x1>
     72c:	82 2b       	or	r24, r18
     72e:	93 2b       	or	r25, r19
     730:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <dig_P9+0x1>
     734:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <dig_P9>
     738:	00 00       	nop
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <BME280_calibrate_humidity>:
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <dig_H1>
     74c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <dig_H2+0x1>
     750:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <dig_H2>
     754:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <dig_H3>
     758:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <dig_H4+0x1>
     75c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <dig_H4>
     760:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <dig_H5+0x1>
     764:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <dig_H5>
     768:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <dig_H6>
     76c:	81 ea       	ldi	r24, 0xA1	; 161
     76e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     772:	98 2f       	mov	r25, r24
     774:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <dig_H1>
     778:	89 2b       	or	r24, r25
     77a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <dig_H1>
     77e:	81 ee       	ldi	r24, 0xE1	; 225
     780:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     784:	28 2f       	mov	r18, r24
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <dig_H2>
     78c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <dig_H2+0x1>
     790:	82 2b       	or	r24, r18
     792:	93 2b       	or	r25, r19
     794:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <dig_H2+0x1>
     798:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <dig_H2>
     79c:	82 ee       	ldi	r24, 0xE2	; 226
     79e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     7a2:	88 2f       	mov	r24, r24
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	38 2f       	mov	r19, r24
     7a8:	22 27       	eor	r18, r18
     7aa:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <dig_H2>
     7ae:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <dig_H2+0x1>
     7b2:	82 2b       	or	r24, r18
     7b4:	93 2b       	or	r25, r19
     7b6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <dig_H2+0x1>
     7ba:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <dig_H2>
     7be:	83 ee       	ldi	r24, 0xE3	; 227
     7c0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     7c4:	98 2f       	mov	r25, r24
     7c6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <dig_H3>
     7ca:	89 2b       	or	r24, r25
     7cc:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <dig_H3>
     7d0:	84 ee       	ldi	r24, 0xE4	; 228
     7d2:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     7d6:	88 2f       	mov	r24, r24
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	9c 01       	movw	r18, r24
     7dc:	22 95       	swap	r18
     7de:	32 95       	swap	r19
     7e0:	30 7f       	andi	r19, 0xF0	; 240
     7e2:	32 27       	eor	r19, r18
     7e4:	20 7f       	andi	r18, 0xF0	; 240
     7e6:	32 27       	eor	r19, r18
     7e8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <dig_H4>
     7ec:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <dig_H4+0x1>
     7f0:	82 2b       	or	r24, r18
     7f2:	93 2b       	or	r25, r19
     7f4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <dig_H4+0x1>
     7f8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <dig_H4>
     7fc:	85 ee       	ldi	r24, 0xE5	; 229
     7fe:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     802:	88 2f       	mov	r24, r24
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	9c 01       	movw	r18, r24
     808:	2f 70       	andi	r18, 0x0F	; 15
     80a:	33 27       	eor	r19, r19
     80c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <dig_H4>
     810:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <dig_H4+0x1>
     814:	82 2b       	or	r24, r18
     816:	93 2b       	or	r25, r19
     818:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <dig_H4+0x1>
     81c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <dig_H4>
     820:	85 ee       	ldi	r24, 0xE5	; 229
     822:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     826:	82 95       	swap	r24
     828:	8f 70       	andi	r24, 0x0F	; 15
     82a:	28 2f       	mov	r18, r24
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <dig_H5>
     832:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <dig_H5+0x1>
     836:	82 2b       	or	r24, r18
     838:	93 2b       	or	r25, r19
     83a:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <dig_H5+0x1>
     83e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <dig_H5>
     842:	86 ee       	ldi	r24, 0xE6	; 230
     844:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     848:	88 2f       	mov	r24, r24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	38 2f       	mov	r19, r24
     84e:	22 27       	eor	r18, r18
     850:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <dig_H5>
     854:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <dig_H5+0x1>
     858:	82 2b       	or	r24, r18
     85a:	93 2b       	or	r25, r19
     85c:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <dig_H5+0x1>
     860:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <dig_H5>
     864:	87 ee       	ldi	r24, 0xE7	; 231
     866:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     86a:	98 2f       	mov	r25, r24
     86c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dig_H6>
     870:	89 2b       	or	r24, r25
     872:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <dig_H6>
     876:	00 00       	nop
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <BME280_get_temperature>:

double BME280_get_temperature()
{
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	00 d0       	rcall	.+0      	; 0x884 <BME280_get_temperature+0x6>
     884:	00 d0       	rcall	.+0      	; 0x886 <BME280_get_temperature+0x8>
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
	int32_t temp = 0;
     88a:	19 82       	std	Y+1, r1	; 0x01
     88c:	1a 82       	std	Y+2, r1	; 0x02
     88e:	1b 82       	std	Y+3, r1	; 0x03
     890:	1c 82       	std	Y+4, r1	; 0x04
	
	temp |= ((int32_t)readFromRegister(REG_TEMP_MSB) << 12);
     892:	8a ef       	ldi	r24, 0xFA	; 250
     894:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     898:	88 2f       	mov	r24, r24
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 e0       	ldi	r26, 0x00	; 0
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	07 2e       	mov	r0, r23
     8a2:	7c e0       	ldi	r23, 0x0C	; 12
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	aa 1f       	adc	r26, r26
     8aa:	bb 1f       	adc	r27, r27
     8ac:	7a 95       	dec	r23
     8ae:	d1 f7       	brne	.-12     	; 0x8a4 <BME280_get_temperature+0x26>
     8b0:	70 2d       	mov	r23, r0
     8b2:	29 81       	ldd	r18, Y+1	; 0x01
     8b4:	3a 81       	ldd	r19, Y+2	; 0x02
     8b6:	4b 81       	ldd	r20, Y+3	; 0x03
     8b8:	5c 81       	ldd	r21, Y+4	; 0x04
     8ba:	82 2b       	or	r24, r18
     8bc:	93 2b       	or	r25, r19
     8be:	a4 2b       	or	r26, r20
     8c0:	b5 2b       	or	r27, r21
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	9a 83       	std	Y+2, r25	; 0x02
     8c6:	ab 83       	std	Y+3, r26	; 0x03
     8c8:	bc 83       	std	Y+4, r27	; 0x04
	temp |= ((int32_t)readFromRegister(REG_TEMP_LSB) <<  4);
     8ca:	8b ef       	ldi	r24, 0xFB	; 251
     8cc:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     8d0:	88 2f       	mov	r24, r24
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	a0 e0       	ldi	r26, 0x00	; 0
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	aa 1f       	adc	r26, r26
     8de:	bb 1f       	adc	r27, r27
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	aa 1f       	adc	r26, r26
     8e6:	bb 1f       	adc	r27, r27
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	aa 1f       	adc	r26, r26
     8ee:	bb 1f       	adc	r27, r27
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	aa 1f       	adc	r26, r26
     8f6:	bb 1f       	adc	r27, r27
     8f8:	9c 01       	movw	r18, r24
     8fa:	ad 01       	movw	r20, r26
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	9a 81       	ldd	r25, Y+2	; 0x02
     900:	ab 81       	ldd	r26, Y+3	; 0x03
     902:	bc 81       	ldd	r27, Y+4	; 0x04
     904:	82 2b       	or	r24, r18
     906:	93 2b       	or	r25, r19
     908:	a4 2b       	or	r26, r20
     90a:	b5 2b       	or	r27, r21
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	9a 83       	std	Y+2, r25	; 0x02
     910:	ab 83       	std	Y+3, r26	; 0x03
     912:	bc 83       	std	Y+4, r27	; 0x04
	temp |= ((int32_t)readFromRegister(REG_TEMP_XLSB) >>  4);
     914:	8c ef       	ldi	r24, 0xFC	; 252
     916:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     91a:	82 95       	swap	r24
     91c:	8f 70       	andi	r24, 0x0F	; 15
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	29 81       	ldd	r18, Y+1	; 0x01
     928:	3a 81       	ldd	r19, Y+2	; 0x02
     92a:	4b 81       	ldd	r20, Y+3	; 0x03
     92c:	5c 81       	ldd	r21, Y+4	; 0x04
     92e:	82 2b       	or	r24, r18
     930:	93 2b       	or	r25, r19
     932:	a4 2b       	or	r26, r20
     934:	b5 2b       	or	r27, r21
     936:	89 83       	std	Y+1, r24	; 0x01
     938:	9a 83       	std	Y+2, r25	; 0x02
     93a:	ab 83       	std	Y+3, r26	; 0x03
     93c:	bc 83       	std	Y+4, r27	; 0x04
	
	return BME280_compensate_T_double(temp);
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	9a 81       	ldd	r25, Y+2	; 0x02
     942:	ab 81       	ldd	r26, Y+3	; 0x03
     944:	bc 81       	ldd	r27, Y+4	; 0x04
     946:	bc 01       	movw	r22, r24
     948:	cd 01       	movw	r24, r26
     94a:	0e 94 6c 05 	call	0xad8	; 0xad8 <BME280_compensate_T_double>
     94e:	dc 01       	movw	r26, r24
     950:	cb 01       	movw	r24, r22
}
     952:	bc 01       	movw	r22, r24
     954:	cd 01       	movw	r24, r26
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <BME280_get_pressure>:

double BME280_get_pressure()
{
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	00 d0       	rcall	.+0      	; 0x96a <BME280_get_pressure+0x6>
     96a:	00 d0       	rcall	.+0      	; 0x96c <BME280_get_pressure+0x8>
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
	int32_t press = 0;
     970:	19 82       	std	Y+1, r1	; 0x01
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	1b 82       	std	Y+3, r1	; 0x03
     976:	1c 82       	std	Y+4, r1	; 0x04
	
	press |= ((int32_t)readFromRegister(REG_PRESS_MSB) << 12);
     978:	87 ef       	ldi	r24, 0xF7	; 247
     97a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	07 2e       	mov	r0, r23
     988:	7c e0       	ldi	r23, 0x0C	; 12
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	aa 1f       	adc	r26, r26
     990:	bb 1f       	adc	r27, r27
     992:	7a 95       	dec	r23
     994:	d1 f7       	brne	.-12     	; 0x98a <BME280_get_pressure+0x26>
     996:	70 2d       	mov	r23, r0
     998:	29 81       	ldd	r18, Y+1	; 0x01
     99a:	3a 81       	ldd	r19, Y+2	; 0x02
     99c:	4b 81       	ldd	r20, Y+3	; 0x03
     99e:	5c 81       	ldd	r21, Y+4	; 0x04
     9a0:	82 2b       	or	r24, r18
     9a2:	93 2b       	or	r25, r19
     9a4:	a4 2b       	or	r26, r20
     9a6:	b5 2b       	or	r27, r21
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	9a 83       	std	Y+2, r25	; 0x02
     9ac:	ab 83       	std	Y+3, r26	; 0x03
     9ae:	bc 83       	std	Y+4, r27	; 0x04
	press |= ((int32_t)readFromRegister(REG_PRESS_LSB) <<  4);
     9b0:	88 ef       	ldi	r24, 0xF8	; 248
     9b2:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     9b6:	88 2f       	mov	r24, r24
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	aa 1f       	adc	r26, r26
     9c4:	bb 1f       	adc	r27, r27
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	aa 1f       	adc	r26, r26
     9d4:	bb 1f       	adc	r27, r27
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	9c 01       	movw	r18, r24
     9e0:	ad 01       	movw	r20, r26
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	9a 81       	ldd	r25, Y+2	; 0x02
     9e6:	ab 81       	ldd	r26, Y+3	; 0x03
     9e8:	bc 81       	ldd	r27, Y+4	; 0x04
     9ea:	82 2b       	or	r24, r18
     9ec:	93 2b       	or	r25, r19
     9ee:	a4 2b       	or	r26, r20
     9f0:	b5 2b       	or	r27, r21
     9f2:	89 83       	std	Y+1, r24	; 0x01
     9f4:	9a 83       	std	Y+2, r25	; 0x02
     9f6:	ab 83       	std	Y+3, r26	; 0x03
     9f8:	bc 83       	std	Y+4, r27	; 0x04
	press |= ((int32_t)readFromRegister(REG_PRESS_XLSB) >>  4);
     9fa:	89 ef       	ldi	r24, 0xF9	; 249
     9fc:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     a00:	82 95       	swap	r24
     a02:	8f 70       	andi	r24, 0x0F	; 15
     a04:	88 2f       	mov	r24, r24
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	29 81       	ldd	r18, Y+1	; 0x01
     a0e:	3a 81       	ldd	r19, Y+2	; 0x02
     a10:	4b 81       	ldd	r20, Y+3	; 0x03
     a12:	5c 81       	ldd	r21, Y+4	; 0x04
     a14:	82 2b       	or	r24, r18
     a16:	93 2b       	or	r25, r19
     a18:	a4 2b       	or	r26, r20
     a1a:	b5 2b       	or	r27, r21
     a1c:	89 83       	std	Y+1, r24	; 0x01
     a1e:	9a 83       	std	Y+2, r25	; 0x02
     a20:	ab 83       	std	Y+3, r26	; 0x03
     a22:	bc 83       	std	Y+4, r27	; 0x04
	
	return BME280_compensate_P_double(press);
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	ab 81       	ldd	r26, Y+3	; 0x03
     a2a:	bc 81       	ldd	r27, Y+4	; 0x04
     a2c:	bc 01       	movw	r22, r24
     a2e:	cd 01       	movw	r24, r26
     a30:	0e 94 a8 06 	call	0xd50	; 0xd50 <BME280_compensate_P_double>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
}
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <BME280_get_humidity>:

double BME280_get_humidity()
{
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <BME280_get_humidity+0x6>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <BME280_get_humidity+0x8>
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
	int32_t hum = 0;
     a56:	19 82       	std	Y+1, r1	; 0x01
     a58:	1a 82       	std	Y+2, r1	; 0x02
     a5a:	1b 82       	std	Y+3, r1	; 0x03
     a5c:	1c 82       	std	Y+4, r1	; 0x04
	
	hum |= ((int32_t)readFromRegister(REG_HUM_MSB) << 8);
     a5e:	8d ef       	ldi	r24, 0xFD	; 253
     a60:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	ba 2f       	mov	r27, r26
     a6e:	a9 2f       	mov	r26, r25
     a70:	98 2f       	mov	r25, r24
     a72:	88 27       	eor	r24, r24
     a74:	29 81       	ldd	r18, Y+1	; 0x01
     a76:	3a 81       	ldd	r19, Y+2	; 0x02
     a78:	4b 81       	ldd	r20, Y+3	; 0x03
     a7a:	5c 81       	ldd	r21, Y+4	; 0x04
     a7c:	82 2b       	or	r24, r18
     a7e:	93 2b       	or	r25, r19
     a80:	a4 2b       	or	r26, r20
     a82:	b5 2b       	or	r27, r21
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	9a 83       	std	Y+2, r25	; 0x02
     a88:	ab 83       	std	Y+3, r26	; 0x03
     a8a:	bc 83       	std	Y+4, r27	; 0x04
	hum |= (int32_t)readFromRegister(REG_HUM_LSB);
     a8c:	8e ef       	ldi	r24, 0xFE	; 254
     a8e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <readFromRegister>
     a92:	88 2f       	mov	r24, r24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	29 81       	ldd	r18, Y+1	; 0x01
     a9c:	3a 81       	ldd	r19, Y+2	; 0x02
     a9e:	4b 81       	ldd	r20, Y+3	; 0x03
     aa0:	5c 81       	ldd	r21, Y+4	; 0x04
     aa2:	82 2b       	or	r24, r18
     aa4:	93 2b       	or	r25, r19
     aa6:	a4 2b       	or	r26, r20
     aa8:	b5 2b       	or	r27, r21
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	ab 83       	std	Y+3, r26	; 0x03
     ab0:	bc 83       	std	Y+4, r27	; 0x04
	
	return BME280_compensate_H_double(hum);
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	ab 81       	ldd	r26, Y+3	; 0x03
     ab8:	bc 81       	ldd	r27, Y+4	; 0x04
     aba:	bc 01       	movw	r22, r24
     abc:	cd 01       	movw	r24, r26
     abe:	0e 94 f7 08 	call	0x11ee	; 0x11ee <BME280_compensate_H_double>
     ac2:	dc 01       	movw	r26, r24
     ac4:	cb 01       	movw	r24, r22
}
     ac6:	bc 01       	movw	r22, r24
     ac8:	cd 01       	movw	r24, r26
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <BME280_compensate_T_double>:

// from Bosch Sensortec [datasheet]
double BME280_compensate_T_double(int32_t adc_T)
{
     ad8:	8f 92       	push	r8
     ada:	9f 92       	push	r9
     adc:	af 92       	push	r10
     ade:	bf 92       	push	r11
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	60 97       	sbiw	r28, 0x10	; 16
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	6d 87       	std	Y+13, r22	; 0x0d
     afe:	7e 87       	std	Y+14, r23	; 0x0e
     b00:	8f 87       	std	Y+15, r24	; 0x0f
     b02:	98 8b       	std	Y+16, r25	; 0x10
	double var1, var2, T;
	var1 = (((double)adc_T)/16384.0 - ((double)dig_T1)/1024.0) * ((double)dig_T2);
     b04:	6d 85       	ldd	r22, Y+13	; 0x0d
     b06:	7e 85       	ldd	r23, Y+14	; 0x0e
     b08:	8f 85       	ldd	r24, Y+15	; 0x0f
     b0a:	98 89       	ldd	r25, Y+16	; 0x10
     b0c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e8       	ldi	r20, 0x80	; 128
     b1a:	56 e4       	ldi	r21, 0x46	; 70
     b1c:	bc 01       	movw	r22, r24
     b1e:	cd 01       	movw	r24, r26
     b20:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	6c 01       	movw	r12, r24
     b2a:	7d 01       	movw	r14, r26
     b2c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T1>
     b30:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T1+0x1>
     b34:	cc 01       	movw	r24, r24
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	bc 01       	movw	r22, r24
     b3c:	cd 01       	movw	r24, r26
     b3e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatunsisf>
     b42:	dc 01       	movw	r26, r24
     b44:	cb 01       	movw	r24, r22
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	40 e8       	ldi	r20, 0x80	; 128
     b4c:	54 e4       	ldi	r21, 0x44	; 68
     b4e:	bc 01       	movw	r22, r24
     b50:	cd 01       	movw	r24, r26
     b52:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	9c 01       	movw	r18, r24
     b5c:	ad 01       	movw	r20, r26
     b5e:	c7 01       	movw	r24, r14
     b60:	b6 01       	movw	r22, r12
     b62:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__subsf3>
     b66:	dc 01       	movw	r26, r24
     b68:	cb 01       	movw	r24, r22
     b6a:	6c 01       	movw	r12, r24
     b6c:	7d 01       	movw	r14, r26
     b6e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <dig_T2>
     b72:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <dig_T2+0x1>
     b76:	09 2e       	mov	r0, r25
     b78:	00 0c       	add	r0, r0
     b7a:	aa 0b       	sbc	r26, r26
     b7c:	bb 0b       	sbc	r27, r27
     b7e:	bc 01       	movw	r22, r24
     b80:	cd 01       	movw	r24, r26
     b82:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	9c 01       	movw	r18, r24
     b8c:	ad 01       	movw	r20, r26
     b8e:	c7 01       	movw	r24, r14
     b90:	b6 01       	movw	r22, r12
     b92:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	89 83       	std	Y+1, r24	; 0x01
     b9c:	9a 83       	std	Y+2, r25	; 0x02
     b9e:	ab 83       	std	Y+3, r26	; 0x03
     ba0:	bc 83       	std	Y+4, r27	; 0x04
	var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0) * (((double)adc_T)/131072.0 - ((double) dig_T1)/8192.0)) * ((double)dig_T3);
     ba2:	6d 85       	ldd	r22, Y+13	; 0x0d
     ba4:	7e 85       	ldd	r23, Y+14	; 0x0e
     ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba8:	98 89       	ldd	r25, Y+16	; 0x10
     baa:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	58 e4       	ldi	r21, 0x48	; 72
     bba:	bc 01       	movw	r22, r24
     bbc:	cd 01       	movw	r24, r26
     bbe:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	6c 01       	movw	r12, r24
     bc8:	7d 01       	movw	r14, r26
     bca:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T1>
     bce:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T1+0x1>
     bd2:	cc 01       	movw	r24, r24
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatunsisf>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	56 e4       	ldi	r21, 0x46	; 70
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	9c 01       	movw	r18, r24
     bfa:	ad 01       	movw	r20, r26
     bfc:	c7 01       	movw	r24, r14
     bfe:	b6 01       	movw	r22, r12
     c00:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__subsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	6c 01       	movw	r12, r24
     c0a:	7d 01       	movw	r14, r26
     c0c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c0e:	7e 85       	ldd	r23, Y+14	; 0x0e
     c10:	8f 85       	ldd	r24, Y+15	; 0x0f
     c12:	98 89       	ldd	r25, Y+16	; 0x10
     c14:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	58 e4       	ldi	r21, 0x48	; 72
     c24:	bc 01       	movw	r22, r24
     c26:	cd 01       	movw	r24, r26
     c28:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	4c 01       	movw	r8, r24
     c32:	5d 01       	movw	r10, r26
     c34:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T1>
     c38:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T1+0x1>
     c3c:	cc 01       	movw	r24, r24
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	bc 01       	movw	r22, r24
     c44:	cd 01       	movw	r24, r26
     c46:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatunsisf>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	56 e4       	ldi	r21, 0x46	; 70
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9c 01       	movw	r18, r24
     c64:	ad 01       	movw	r20, r26
     c66:	c5 01       	movw	r24, r10
     c68:	b4 01       	movw	r22, r8
     c6a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__subsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	9c 01       	movw	r18, r24
     c74:	ad 01       	movw	r20, r26
     c76:	c7 01       	movw	r24, r14
     c78:	b6 01       	movw	r22, r12
     c7a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	6c 01       	movw	r12, r24
     c84:	7d 01       	movw	r14, r26
     c86:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <dig_T3>
     c8a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <dig_T3+0x1>
     c8e:	09 2e       	mov	r0, r25
     c90:	00 0c       	add	r0, r0
     c92:	aa 0b       	sbc	r26, r26
     c94:	bb 0b       	sbc	r27, r27
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	9c 01       	movw	r18, r24
     ca4:	ad 01       	movw	r20, r26
     ca6:	c7 01       	movw	r24, r14
     ca8:	b6 01       	movw	r22, r12
     caa:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	9e 83       	std	Y+6, r25	; 0x06
     cb6:	af 83       	std	Y+7, r26	; 0x07
     cb8:	b8 87       	std	Y+8, r27	; 0x08
	t_fine = (int32_t)(var1 + var2);
     cba:	2d 81       	ldd	r18, Y+5	; 0x05
     cbc:	3e 81       	ldd	r19, Y+6	; 0x06
     cbe:	4f 81       	ldd	r20, Y+7	; 0x07
     cc0:	58 85       	ldd	r21, Y+8	; 0x08
     cc2:	69 81       	ldd	r22, Y+1	; 0x01
     cc4:	7a 81       	ldd	r23, Y+2	; 0x02
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fixsfsi>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <t_fine>
     ce2:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <t_fine+0x1>
     ce6:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <t_fine+0x2>
     cea:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <t_fine+0x3>
	T = (var1 + var2) / 5120.0;
     cee:	2d 81       	ldd	r18, Y+5	; 0x05
     cf0:	3e 81       	ldd	r19, Y+6	; 0x06
     cf2:	4f 81       	ldd	r20, Y+7	; 0x07
     cf4:	58 85       	ldd	r21, Y+8	; 0x08
     cf6:	69 81       	ldd	r22, Y+1	; 0x01
     cf8:	7a 81       	ldd	r23, Y+2	; 0x02
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 ea       	ldi	r20, 0xA0	; 160
     d0c:	55 e4       	ldi	r21, 0x45	; 69
     d0e:	bc 01       	movw	r22, r24
     d10:	cd 01       	movw	r24, r26
     d12:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	89 87       	std	Y+9, r24	; 0x09
     d1c:	9a 87       	std	Y+10, r25	; 0x0a
     d1e:	ab 87       	std	Y+11, r26	; 0x0b
     d20:	bc 87       	std	Y+12, r27	; 0x0c
	return T;
     d22:	89 85       	ldd	r24, Y+9	; 0x09
     d24:	9a 85       	ldd	r25, Y+10	; 0x0a
     d26:	ab 85       	ldd	r26, Y+11	; 0x0b
     d28:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     d2a:	bc 01       	movw	r22, r24
     d2c:	cd 01       	movw	r24, r26
     d2e:	60 96       	adiw	r28, 0x10	; 16
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	bf 90       	pop	r11
     d48:	af 90       	pop	r10
     d4a:	9f 90       	pop	r9
     d4c:	8f 90       	pop	r8
     d4e:	08 95       	ret

00000d50 <BME280_compensate_P_double>:

double BME280_compensate_P_double(int32_t adc_P)
{
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	60 97       	sbiw	r28, 0x10	; 16
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	6d 87       	std	Y+13, r22	; 0x0d
     d6e:	7e 87       	std	Y+14, r23	; 0x0e
     d70:	8f 87       	std	Y+15, r24	; 0x0f
     d72:	98 8b       	std	Y+16, r25	; 0x10
	double var1, var2, p;
	var1 = ((double)t_fine/2.0) - 64000.0;
     d74:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <t_fine>
     d78:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <t_fine+0x1>
     d7c:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <t_fine+0x2>
     d80:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <t_fine+0x3>
     d84:	bc 01       	movw	r22, r24
     d86:	cd 01       	movw	r24, r26
     d88:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	50 e4       	ldi	r21, 0x40	; 64
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	4a e7       	ldi	r20, 0x7A	; 122
     daa:	57 e4       	ldi	r21, 0x47	; 71
     dac:	bc 01       	movw	r22, r24
     dae:	cd 01       	movw	r24, r26
     db0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__subsf3>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	ab 83       	std	Y+3, r26	; 0x03
     dbe:	bc 83       	std	Y+4, r27	; 0x04
	var2 = var1 * var1 * ((double)dig_P6) / 32768.0;
     dc0:	29 81       	ldd	r18, Y+1	; 0x01
     dc2:	3a 81       	ldd	r19, Y+2	; 0x02
     dc4:	4b 81       	ldd	r20, Y+3	; 0x03
     dc6:	5c 81       	ldd	r21, Y+4	; 0x04
     dc8:	69 81       	ldd	r22, Y+1	; 0x01
     dca:	7a 81       	ldd	r23, Y+2	; 0x02
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	6c 01       	movw	r12, r24
     dda:	7d 01       	movw	r14, r26
     ddc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <dig_P6>
     de0:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <dig_P6+0x1>
     de4:	09 2e       	mov	r0, r25
     de6:	00 0c       	add	r0, r0
     de8:	aa 0b       	sbc	r26, r26
     dea:	bb 0b       	sbc	r27, r27
     dec:	bc 01       	movw	r22, r24
     dee:	cd 01       	movw	r24, r26
     df0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	9c 01       	movw	r18, r24
     dfa:	ad 01       	movw	r20, r26
     dfc:	c7 01       	movw	r24, r14
     dfe:	b6 01       	movw	r22, r12
     e00:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	57 e4       	ldi	r21, 0x47	; 71
     e10:	bc 01       	movw	r22, r24
     e12:	cd 01       	movw	r24, r26
     e14:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	af 83       	std	Y+7, r26	; 0x07
     e22:	b8 87       	std	Y+8, r27	; 0x08
	var2 = var2 + var1 * ((double)dig_P5) * 2.0;
     e24:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <dig_P5>
     e28:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <dig_P5+0x1>
     e2c:	09 2e       	mov	r0, r25
     e2e:	00 0c       	add	r0, r0
     e30:	aa 0b       	sbc	r26, r26
     e32:	bb 0b       	sbc	r27, r27
     e34:	bc 01       	movw	r22, r24
     e36:	cd 01       	movw	r24, r26
     e38:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	29 81       	ldd	r18, Y+1	; 0x01
     e42:	3a 81       	ldd	r19, Y+2	; 0x02
     e44:	4b 81       	ldd	r20, Y+3	; 0x03
     e46:	5c 81       	ldd	r21, Y+4	; 0x04
     e48:	bc 01       	movw	r22, r24
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	9c 01       	movw	r18, r24
     e56:	ad 01       	movw	r20, r26
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	9c 01       	movw	r18, r24
     e66:	ad 01       	movw	r20, r26
     e68:	6d 81       	ldd	r22, Y+5	; 0x05
     e6a:	7e 81       	ldd	r23, Y+6	; 0x06
     e6c:	8f 81       	ldd	r24, Y+7	; 0x07
     e6e:	98 85       	ldd	r25, Y+8	; 0x08
     e70:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	8d 83       	std	Y+5, r24	; 0x05
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	af 83       	std	Y+7, r26	; 0x07
     e7e:	b8 87       	std	Y+8, r27	; 0x08
	var2 = (var2/4.0)+(((double)dig_P4) * 65536.0);
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e8       	ldi	r20, 0x80	; 128
     e86:	50 e4       	ldi	r21, 0x40	; 64
     e88:	6d 81       	ldd	r22, Y+5	; 0x05
     e8a:	7e 81       	ldd	r23, Y+6	; 0x06
     e8c:	8f 81       	ldd	r24, Y+7	; 0x07
     e8e:	98 85       	ldd	r25, Y+8	; 0x08
     e90:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	6c 01       	movw	r12, r24
     e9a:	7d 01       	movw	r14, r26
     e9c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dig_P4>
     ea0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dig_P4+0x1>
     ea4:	09 2e       	mov	r0, r25
     ea6:	00 0c       	add	r0, r0
     ea8:	aa 0b       	sbc	r26, r26
     eaa:	bb 0b       	sbc	r27, r27
     eac:	bc 01       	movw	r22, r24
     eae:	cd 01       	movw	r24, r26
     eb0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	57 e4       	ldi	r21, 0x47	; 71
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9c 01       	movw	r18, r24
     ece:	ad 01       	movw	r20, r26
     ed0:	c7 01       	movw	r24, r14
     ed2:	b6 01       	movw	r22, r12
     ed4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	9e 83       	std	Y+6, r25	; 0x06
     ee0:	af 83       	std	Y+7, r26	; 0x07
     ee2:	b8 87       	std	Y+8, r27	; 0x08
	var1 = (((double)dig_P3) * var1 * var1 / 524288.0 + ((double)dig_P2) * var1) / 524288.0;
     ee4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <dig_P3>
     ee8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <dig_P3+0x1>
     eec:	09 2e       	mov	r0, r25
     eee:	00 0c       	add	r0, r0
     ef0:	aa 0b       	sbc	r26, r26
     ef2:	bb 0b       	sbc	r27, r27
     ef4:	bc 01       	movw	r22, r24
     ef6:	cd 01       	movw	r24, r26
     ef8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	29 81       	ldd	r18, Y+1	; 0x01
     f02:	3a 81       	ldd	r19, Y+2	; 0x02
     f04:	4b 81       	ldd	r20, Y+3	; 0x03
     f06:	5c 81       	ldd	r21, Y+4	; 0x04
     f08:	bc 01       	movw	r22, r24
     f0a:	cd 01       	movw	r24, r26
     f0c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	29 81       	ldd	r18, Y+1	; 0x01
     f16:	3a 81       	ldd	r19, Y+2	; 0x02
     f18:	4b 81       	ldd	r20, Y+3	; 0x03
     f1a:	5c 81       	ldd	r21, Y+4	; 0x04
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	59 e4       	ldi	r21, 0x49	; 73
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	6c 01       	movw	r12, r24
     f3e:	7d 01       	movw	r14, r26
     f40:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <dig_P2>
     f44:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <dig_P2+0x1>
     f48:	09 2e       	mov	r0, r25
     f4a:	00 0c       	add	r0, r0
     f4c:	aa 0b       	sbc	r26, r26
     f4e:	bb 0b       	sbc	r27, r27
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	29 81       	ldd	r18, Y+1	; 0x01
     f5e:	3a 81       	ldd	r19, Y+2	; 0x02
     f60:	4b 81       	ldd	r20, Y+3	; 0x03
     f62:	5c 81       	ldd	r21, Y+4	; 0x04
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9c 01       	movw	r18, r24
     f72:	ad 01       	movw	r20, r26
     f74:	c7 01       	movw	r24, r14
     f76:	b6 01       	movw	r22, r12
     f78:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	59 e4       	ldi	r21, 0x49	; 73
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	ab 83       	std	Y+3, r26	; 0x03
     f9a:	bc 83       	std	Y+4, r27	; 0x04
	var1 = (1.0 + var1 / 32768.0)*((double)dig_P1);
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	57 e4       	ldi	r21, 0x47	; 71
     fa4:	69 81       	ldd	r22, Y+1	; 0x01
     fa6:	7a 81       	ldd	r23, Y+2	; 0x02
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e8       	ldi	r20, 0x80	; 128
     fba:	5f e3       	ldi	r21, 0x3F	; 63
     fbc:	bc 01       	movw	r22, r24
     fbe:	cd 01       	movw	r24, r26
     fc0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	6c 01       	movw	r12, r24
     fca:	7d 01       	movw	r14, r26
     fcc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <dig_P1>
     fd0:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <dig_P1+0x1>
     fd4:	cc 01       	movw	r24, r24
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatunsisf>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	9c 01       	movw	r18, r24
     fe8:	ad 01       	movw	r20, r26
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	ab 83       	std	Y+3, r26	; 0x03
     ffc:	bc 83       	std	Y+4, r27	; 0x04
	if (var1 == 0.0)
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	a9 01       	movw	r20, r18
    1004:	69 81       	ldd	r22, Y+1	; 0x01
    1006:	7a 81       	ldd	r23, Y+2	; 0x02
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	0e 94 3f 0c 	call	0x187e	; 0x187e <__cmpsf2>
    1010:	88 23       	and	r24, r24
    1012:	21 f4       	brne	.+8      	; 0x101c <BME280_compensate_P_double+0x2cc>
	{
		return 0; // avoid exception caused by division by zero
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	dc 01       	movw	r26, r24
    101a:	da c0       	rjmp	.+436    	; 0x11d0 <BME280_compensate_P_double+0x480>
	}
	p = 1048576.0 - (double)adc_P;
    101c:	6d 85       	ldd	r22, Y+13	; 0x0d
    101e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1020:	8f 85       	ldd	r24, Y+15	; 0x0f
    1022:	98 89       	ldd	r25, Y+16	; 0x10
    1024:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9c 01       	movw	r18, r24
    102e:	ad 01       	movw	r20, r26
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	80 e8       	ldi	r24, 0x80	; 128
    1036:	99 e4       	ldi	r25, 0x49	; 73
    1038:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__subsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	89 87       	std	Y+9, r24	; 0x09
    1042:	9a 87       	std	Y+10, r25	; 0x0a
    1044:	ab 87       	std	Y+11, r26	; 0x0b
    1046:	bc 87       	std	Y+12, r27	; 0x0c
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e8       	ldi	r20, 0x80	; 128
    104e:	55 e4       	ldi	r21, 0x45	; 69
    1050:	6d 81       	ldd	r22, Y+5	; 0x05
    1052:	7e 81       	ldd	r23, Y+6	; 0x06
    1054:	8f 81       	ldd	r24, Y+7	; 0x07
    1056:	98 85       	ldd	r25, Y+8	; 0x08
    1058:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	9c 01       	movw	r18, r24
    1062:	ad 01       	movw	r20, r26
    1064:	69 85       	ldd	r22, Y+9	; 0x09
    1066:	7a 85       	ldd	r23, Y+10	; 0x0a
    1068:	8b 85       	ldd	r24, Y+11	; 0x0b
    106a:	9c 85       	ldd	r25, Y+12	; 0x0c
    106c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__subsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e5       	ldi	r19, 0x50	; 80
    1078:	43 ec       	ldi	r20, 0xC3	; 195
    107a:	55 e4       	ldi	r21, 0x45	; 69
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	29 81       	ldd	r18, Y+1	; 0x01
    108a:	3a 81       	ldd	r19, Y+2	; 0x02
    108c:	4b 81       	ldd	r20, Y+3	; 0x03
    108e:	5c 81       	ldd	r21, Y+4	; 0x04
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	89 87       	std	Y+9, r24	; 0x09
    109e:	9a 87       	std	Y+10, r25	; 0x0a
    10a0:	ab 87       	std	Y+11, r26	; 0x0b
    10a2:	bc 87       	std	Y+12, r27	; 0x0c
	var1 = ((double)dig_P9) * p * p / 2147483648.0;
    10a4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <dig_P9>
    10a8:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <dig_P9+0x1>
    10ac:	09 2e       	mov	r0, r25
    10ae:	00 0c       	add	r0, r0
    10b0:	aa 0b       	sbc	r26, r26
    10b2:	bb 0b       	sbc	r27, r27
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	29 85       	ldd	r18, Y+9	; 0x09
    10c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    10c4:	4b 85       	ldd	r20, Y+11	; 0x0b
    10c6:	5c 85       	ldd	r21, Y+12	; 0x0c
    10c8:	bc 01       	movw	r22, r24
    10ca:	cd 01       	movw	r24, r26
    10cc:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	29 85       	ldd	r18, Y+9	; 0x09
    10d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    10da:	5c 85       	ldd	r21, Y+12	; 0x0c
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	5f e4       	ldi	r21, 0x4F	; 79
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	ab 83       	std	Y+3, r26	; 0x03
    1102:	bc 83       	std	Y+4, r27	; 0x04
	var2 = p * ((double)dig_P8) / 32768.0;
    1104:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <dig_P8>
    1108:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <dig_P8+0x1>
    110c:	09 2e       	mov	r0, r25
    110e:	00 0c       	add	r0, r0
    1110:	aa 0b       	sbc	r26, r26
    1112:	bb 0b       	sbc	r27, r27
    1114:	bc 01       	movw	r22, r24
    1116:	cd 01       	movw	r24, r26
    1118:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	29 85       	ldd	r18, Y+9	; 0x09
    1122:	3a 85       	ldd	r19, Y+10	; 0x0a
    1124:	4b 85       	ldd	r20, Y+11	; 0x0b
    1126:	5c 85       	ldd	r21, Y+12	; 0x0c
    1128:	bc 01       	movw	r22, r24
    112a:	cd 01       	movw	r24, r26
    112c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	9e 83       	std	Y+6, r25	; 0x06
    114c:	af 83       	std	Y+7, r26	; 0x07
    114e:	b8 87       	std	Y+8, r27	; 0x08
	p = p + (var1 + var2 + ((double)dig_P7)) / 16.0;
    1150:	2d 81       	ldd	r18, Y+5	; 0x05
    1152:	3e 81       	ldd	r19, Y+6	; 0x06
    1154:	4f 81       	ldd	r20, Y+7	; 0x07
    1156:	58 85       	ldd	r21, Y+8	; 0x08
    1158:	69 81       	ldd	r22, Y+1	; 0x01
    115a:	7a 81       	ldd	r23, Y+2	; 0x02
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	6c 01       	movw	r12, r24
    116a:	7d 01       	movw	r14, r26
    116c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_P7>
    1170:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_P7+0x1>
    1174:	09 2e       	mov	r0, r25
    1176:	00 0c       	add	r0, r0
    1178:	aa 0b       	sbc	r26, r26
    117a:	bb 0b       	sbc	r27, r27
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9c 01       	movw	r18, r24
    118a:	ad 01       	movw	r20, r26
    118c:	c7 01       	movw	r24, r14
    118e:	b6 01       	movw	r22, r12
    1190:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e8       	ldi	r20, 0x80	; 128
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	bc 01       	movw	r22, r24
    11a2:	cd 01       	movw	r24, r26
    11a4:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9c 01       	movw	r18, r24
    11ae:	ad 01       	movw	r20, r26
    11b0:	69 85       	ldd	r22, Y+9	; 0x09
    11b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    11b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	89 87       	std	Y+9, r24	; 0x09
    11c2:	9a 87       	std	Y+10, r25	; 0x0a
    11c4:	ab 87       	std	Y+11, r26	; 0x0b
    11c6:	bc 87       	std	Y+12, r27	; 0x0c
	return p;
    11c8:	89 85       	ldd	r24, Y+9	; 0x09
    11ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    11cc:	ab 85       	ldd	r26, Y+11	; 0x0b
    11ce:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    11d0:	bc 01       	movw	r22, r24
    11d2:	cd 01       	movw	r24, r26
    11d4:	60 96       	adiw	r28, 0x10	; 16
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	08 95       	ret

000011ee <BME280_compensate_H_double>:

double BME280_compensate_H_double(int32_t adc_H)
{
    11ee:	4f 92       	push	r4
    11f0:	5f 92       	push	r5
    11f2:	6f 92       	push	r6
    11f4:	7f 92       	push	r7
    11f6:	8f 92       	push	r8
    11f8:	9f 92       	push	r9
    11fa:	af 92       	push	r10
    11fc:	bf 92       	push	r11
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	28 97       	sbiw	r28, 0x08	; 8
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	6d 83       	std	Y+5, r22	; 0x05
    121c:	7e 83       	std	Y+6, r23	; 0x06
    121e:	8f 83       	std	Y+7, r24	; 0x07
    1220:	98 87       	std	Y+8, r25	; 0x08
	double var_H;
	var_H = (((double)t_fine) - 76800.0);
    1222:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <t_fine>
    1226:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <t_fine+0x1>
    122a:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <t_fine+0x2>
    122e:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <t_fine+0x3>
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	46 e9       	ldi	r20, 0x96	; 150
    1244:	57 e4       	ldi	r21, 0x47	; 71
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__subsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	ab 83       	std	Y+3, r26	; 0x03
    1258:	bc 83       	std	Y+4, r27	; 0x04
	var_H = (adc_H - (((double)dig_H4) * 64.0 + ((double)dig_H5) / 16384.0 * var_H)) * (((double)dig_H2) / 65536.0 * (1.0 + ((double)dig_H6) / 67108864.0 * var_H * (1.0 + ((double)dig_H3) / 67108864.0 * var_H)));
    125a:	6d 81       	ldd	r22, Y+5	; 0x05
    125c:	7e 81       	ldd	r23, Y+6	; 0x06
    125e:	8f 81       	ldd	r24, Y+7	; 0x07
    1260:	98 85       	ldd	r25, Y+8	; 0x08
    1262:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
    1266:	6b 01       	movw	r12, r22
    1268:	7c 01       	movw	r14, r24
    126a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <dig_H4>
    126e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <dig_H4+0x1>
    1272:	09 2e       	mov	r0, r25
    1274:	00 0c       	add	r0, r0
    1276:	aa 0b       	sbc	r26, r26
    1278:	bb 0b       	sbc	r27, r27
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e8       	ldi	r20, 0x80	; 128
    128c:	52 e4       	ldi	r21, 0x42	; 66
    128e:	bc 01       	movw	r22, r24
    1290:	cd 01       	movw	r24, r26
    1292:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	4c 01       	movw	r8, r24
    129c:	5d 01       	movw	r10, r26
    129e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <dig_H5>
    12a2:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <dig_H5+0x1>
    12a6:	09 2e       	mov	r0, r25
    12a8:	00 0c       	add	r0, r0
    12aa:	aa 0b       	sbc	r26, r26
    12ac:	bb 0b       	sbc	r27, r27
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e8       	ldi	r20, 0x80	; 128
    12c0:	56 e4       	ldi	r21, 0x46	; 70
    12c2:	bc 01       	movw	r22, r24
    12c4:	cd 01       	movw	r24, r26
    12c6:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	29 81       	ldd	r18, Y+1	; 0x01
    12d0:	3a 81       	ldd	r19, Y+2	; 0x02
    12d2:	4b 81       	ldd	r20, Y+3	; 0x03
    12d4:	5c 81       	ldd	r21, Y+4	; 0x04
    12d6:	bc 01       	movw	r22, r24
    12d8:	cd 01       	movw	r24, r26
    12da:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9c 01       	movw	r18, r24
    12e4:	ad 01       	movw	r20, r26
    12e6:	c5 01       	movw	r24, r10
    12e8:	b4 01       	movw	r22, r8
    12ea:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	9c 01       	movw	r18, r24
    12f4:	ad 01       	movw	r20, r26
    12f6:	c7 01       	movw	r24, r14
    12f8:	b6 01       	movw	r22, r12
    12fa:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__subsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	6c 01       	movw	r12, r24
    1304:	7d 01       	movw	r14, r26
    1306:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <dig_H2>
    130a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <dig_H2+0x1>
    130e:	09 2e       	mov	r0, r25
    1310:	00 0c       	add	r0, r0
    1312:	aa 0b       	sbc	r26, r26
    1314:	bb 0b       	sbc	r27, r27
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__floatsisf>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	57 e4       	ldi	r21, 0x47	; 71
    132a:	bc 01       	movw	r22, r24
    132c:	cd 01       	movw	r24, r26
    132e:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	4c 01       	movw	r8, r24
    1338:	5d 01       	movw	r10, r26
    133a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dig_H6>
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatunsisf>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5c e4       	ldi	r21, 0x4C	; 76
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	29 81       	ldd	r18, Y+1	; 0x01
    1368:	3a 81       	ldd	r19, Y+2	; 0x02
    136a:	4b 81       	ldd	r20, Y+3	; 0x03
    136c:	5c 81       	ldd	r21, Y+4	; 0x04
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	2c 01       	movw	r4, r24
    137c:	3d 01       	movw	r6, r26
    137e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <dig_H3>
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a0 e0       	ldi	r26, 0x00	; 0
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatunsisf>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e8       	ldi	r20, 0x80	; 128
    139c:	5c e4       	ldi	r21, 0x4C	; 76
    139e:	bc 01       	movw	r22, r24
    13a0:	cd 01       	movw	r24, r26
    13a2:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	29 81       	ldd	r18, Y+1	; 0x01
    13ac:	3a 81       	ldd	r19, Y+2	; 0x02
    13ae:	4b 81       	ldd	r20, Y+3	; 0x03
    13b0:	5c 81       	ldd	r21, Y+4	; 0x04
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e8       	ldi	r20, 0x80	; 128
    13c4:	5f e3       	ldi	r21, 0x3F	; 63
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	9c 01       	movw	r18, r24
    13d4:	ad 01       	movw	r20, r26
    13d6:	c3 01       	movw	r24, r6
    13d8:	b2 01       	movw	r22, r4
    13da:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e8       	ldi	r20, 0x80	; 128
    13e8:	5f e3       	ldi	r21, 0x3F	; 63
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9c 01       	movw	r18, r24
    13f8:	ad 01       	movw	r20, r26
    13fa:	c5 01       	movw	r24, r10
    13fc:	b4 01       	movw	r22, r8
    13fe:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	9c 01       	movw	r18, r24
    1408:	ad 01       	movw	r20, r26
    140a:	c7 01       	movw	r24, r14
    140c:	b6 01       	movw	r22, r12
    140e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	9a 83       	std	Y+2, r25	; 0x02
    141a:	ab 83       	std	Y+3, r26	; 0x03
    141c:	bc 83       	std	Y+4, r27	; 0x04
	var_H = var_H * (1.0 - ((double)dig_H1) * var_H / 524288.0);
    141e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <dig_H1>
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatunsisf>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	29 81       	ldd	r18, Y+1	; 0x01
    1438:	3a 81       	ldd	r19, Y+2	; 0x02
    143a:	4b 81       	ldd	r20, Y+3	; 0x03
    143c:	5c 81       	ldd	r21, Y+4	; 0x04
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	59 e4       	ldi	r21, 0x49	; 73
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	9c 01       	movw	r18, r24
    1460:	ad 01       	movw	r20, r26
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	80 e8       	ldi	r24, 0x80	; 128
    1468:	9f e3       	ldi	r25, 0x3F	; 63
    146a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__subsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9c 01       	movw	r18, r24
    1474:	ad 01       	movw	r20, r26
    1476:	69 81       	ldd	r22, Y+1	; 0x01
    1478:	7a 81       	ldd	r23, Y+2	; 0x02
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	ab 83       	std	Y+3, r26	; 0x03
    148c:	bc 83       	std	Y+4, r27	; 0x04
	if (var_H > 100.0)
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	48 ec       	ldi	r20, 0xC8	; 200
    1494:	52 e4       	ldi	r21, 0x42	; 66
    1496:	69 81       	ldd	r22, Y+1	; 0x01
    1498:	7a 81       	ldd	r23, Y+2	; 0x02
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__gesf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	4c f4       	brge	.+18     	; 0x14b8 <BME280_compensate_H_double+0x2ca>
	var_H = 100.0;
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	a8 ec       	ldi	r26, 0xC8	; 200
    14ac:	b2 e4       	ldi	r27, 0x42	; 66
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	ab 83       	std	Y+3, r26	; 0x03
    14b4:	bc 83       	std	Y+4, r27	; 0x04
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <BME280_compensate_H_double+0x2e8>
	else if (var_H < 0.0)
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	69 81       	ldd	r22, Y+1	; 0x01
    14c0:	7a 81       	ldd	r23, Y+2	; 0x02
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	0e 94 3f 0c 	call	0x187e	; 0x187e <__cmpsf2>
    14ca:	88 23       	and	r24, r24
    14cc:	24 f4       	brge	.+8      	; 0x14d6 <BME280_compensate_H_double+0x2e8>
	var_H = 0.0;
    14ce:	19 82       	std	Y+1, r1	; 0x01
    14d0:	1a 82       	std	Y+2, r1	; 0x02
    14d2:	1b 82       	std	Y+3, r1	; 0x03
    14d4:	1c 82       	std	Y+4, r1	; 0x04
	return var_H;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	ab 81       	ldd	r26, Y+3	; 0x03
    14dc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	28 96       	adiw	r28, 0x08	; 8
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	df 90       	pop	r13
    14f8:	cf 90       	pop	r12
    14fa:	bf 90       	pop	r11
    14fc:	af 90       	pop	r10
    14fe:	9f 90       	pop	r9
    1500:	8f 90       	pop	r8
    1502:	7f 90       	pop	r7
    1504:	6f 90       	pop	r6
    1506:	5f 90       	pop	r5
    1508:	4f 90       	pop	r4
    150a:	08 95       	ret

0000150c <writeToRegister>:

// util functions
boolean writeToRegister(unsigned char registerAddress, unsigned char data)
{
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	00 d0       	rcall	.+0      	; 0x1512 <writeToRegister+0x6>
    1512:	1f 92       	push	r1
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	8a 83       	std	Y+2, r24	; 0x02
    151a:	6b 83       	std	Y+3, r22	; 0x03
	boolean state = FALSE;
    151c:	19 82       	std	Y+1, r1	; 0x01
	
	sendStartCondition();
    151e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <sendStartCondition>
	
	if(sendByte(slaveAddressW) && sendByte(registerAddress) && sendByte(data))
    1522:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <slaveAddressW>
    1526:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    152a:	88 23       	and	r24, r24
    152c:	61 f0       	breq	.+24     	; 0x1546 <writeToRegister+0x3a>
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    1534:	88 23       	and	r24, r24
    1536:	39 f0       	breq	.+14     	; 0x1546 <writeToRegister+0x3a>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    153e:	88 23       	and	r24, r24
    1540:	11 f0       	breq	.+4      	; 0x1546 <writeToRegister+0x3a>
		state = TRUE;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	89 83       	std	Y+1, r24	; 0x01
	
	sendStopCondition();
    1546:	0e 94 19 11 	call	0x2232	; 0x2232 <sendStopCondition>
	
	return state;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <readFromRegister>:

unsigned char readFromRegister(unsigned char registerAddress)
{
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	1f 92       	push	r1
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
	return readRegister(slaveAddressR, registerAddress);
    1564:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
    1568:	69 81       	ldd	r22, Y+1	; 0x01
    156a:	0e 94 c5 11 	call	0x238a	; 0x238a <readRegister>
    156e:	0f 90       	pop	r0
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <main>:
#define DEBUG_LED_conf() (DDRD |= (1 << PIND4))
#define DEBUG_LED_on() PORTD |= (1 << PIND4)
#define DEBUG_LED_off() PORTD &= ~(1 << PIND4)

int main(void)
{
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	c0 54       	subi	r28, 0x40	; 64
    158c:	d1 09       	sbc	r29, r1
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
	// I2C-Address of BME280
	unsigned char slaveAddressBME280 = 0b11101110;
    1598:	8e ee       	ldi	r24, 0xEE	; 238
    159a:	89 83       	std	Y+1, r24	; 0x01
	
	// I2C-Address of LCD1602
	unsigned char slaveAddressLCD1602 = 0b01001110;
    159c:	8e e4       	ldi	r24, 0x4E	; 78
    159e:	8a 83       	std	Y+2, r24	; 0x02
	
	initI2C(10,'u');
    15a0:	45 e7       	ldi	r20, 0x75	; 117
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	80 e2       	ldi	r24, 0x20	; 32
    15a8:	91 e4       	ldi	r25, 0x41	; 65
    15aa:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <initI2C>
	
	initLCD(slaveAddressLCD1602);
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <initLCD>
	
	BME280_init(slaveAddressBME280);
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <BME280_init>
	
	// config BME280 in general
	BME280_set_filter_coefficient_2();
    15ba:	0e 94 9d 01 	call	0x33a	; 0x33a <BME280_set_filter_coefficient_2>
	BME280_set_normal_mode();
    15be:	0e 94 c9 01 	call	0x392	; 0x392 <BME280_set_normal_mode>
	BME280_set_standby_time_62_5();
    15c2:	0e 94 08 01 	call	0x210	; 0x210 <BME280_set_standby_time_62_5>
	
	// config BME280 temperature measurement
	BME280_set_temperature_oversampling_1();
    15c6:	0e 94 2a 01 	call	0x254	; 0x254 <BME280_set_temperature_oversampling_1>
	BME280_calibrate_temperature();
    15ca:	0e 94 de 01 	call	0x3bc	; 0x3bc <BME280_calibrate_temperature>
	
	// config BME280 pressure measurement
	BME280_set_pressure_oversampling_1();
    15ce:	0e 94 4c 01 	call	0x298	; 0x298 <BME280_set_pressure_oversampling_1>
	BME280_calibrate_pressure();
    15d2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <BME280_calibrate_pressure>
	
	//config BME280 humidity meaurement
	BME280_set_humidity_oversampling_1();
    15d6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <BME280_set_humidity_oversampling_1>
	BME280_calibrate_humidity();
    15da:	0e 94 a0 03 	call	0x740	; 0x740 <BME280_calibrate_humidity>
	
	while(1)
	{
		char temp[16] = {0};
    15de:	20 e1       	ldi	r18, 0x10	; 16
    15e0:	ce 01       	movw	r24, r28
    15e2:	41 96       	adiw	r24, 0x11	; 17
    15e4:	fc 01       	movw	r30, r24
    15e6:	32 2f       	mov	r19, r18
    15e8:	11 92       	st	Z+, r1
    15ea:	3a 95       	dec	r19
    15ec:	e9 f7       	brne	.-6      	; 0x15e8 <main+0x72>
		dtostrf(BME280_get_temperature(), 5, 2, temp);
    15ee:	0e 94 3f 04 	call	0x87e	; 0x87e <BME280_get_temperature>
    15f2:	6b 01       	movw	r12, r22
    15f4:	7c 01       	movw	r14, r24
    15f6:	ce 01       	movw	r24, r28
    15f8:	41 96       	adiw	r24, 0x11	; 17
    15fa:	8c 01       	movw	r16, r24
    15fc:	22 e0       	ldi	r18, 0x02	; 2
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	45 e0       	ldi	r20, 0x05	; 5
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	c7 01       	movw	r24, r14
    1606:	b6 01       	movw	r22, r12
    1608:	0e 94 6d 12 	call	0x24da	; 0x24da <dtostrf>
		
		char press[16] = {0};
    160c:	20 e1       	ldi	r18, 0x10	; 16
    160e:	ce 01       	movw	r24, r28
    1610:	81 96       	adiw	r24, 0x21	; 33
    1612:	fc 01       	movw	r30, r24
    1614:	32 2f       	mov	r19, r18
    1616:	11 92       	st	Z+, r1
    1618:	3a 95       	dec	r19
    161a:	e9 f7       	brne	.-6      	; 0x1616 <main+0xa0>
		dtostrf(BME280_get_pressure()/100000, 5, 3, press);
    161c:	0e 94 b2 04 	call	0x964	; 0x964 <BME280_get_pressure>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e5       	ldi	r19, 0x50	; 80
    1628:	43 ec       	ldi	r20, 0xC3	; 195
    162a:	57 e4       	ldi	r21, 0x47	; 71
    162c:	bc 01       	movw	r22, r24
    162e:	cd 01       	movw	r24, r26
    1630:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	6c 01       	movw	r12, r24
    163a:	7d 01       	movw	r14, r26
    163c:	ce 01       	movw	r24, r28
    163e:	81 96       	adiw	r24, 0x21	; 33
    1640:	8c 01       	movw	r16, r24
    1642:	23 e0       	ldi	r18, 0x03	; 3
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	45 e0       	ldi	r20, 0x05	; 5
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	c7 01       	movw	r24, r14
    164c:	b6 01       	movw	r22, r12
    164e:	0e 94 6d 12 	call	0x24da	; 0x24da <dtostrf>
		
		char hum[16] = {0};
    1652:	20 e1       	ldi	r18, 0x10	; 16
    1654:	ce 01       	movw	r24, r28
    1656:	c1 96       	adiw	r24, 0x31	; 49
    1658:	fc 01       	movw	r30, r24
    165a:	32 2f       	mov	r19, r18
    165c:	11 92       	st	Z+, r1
    165e:	3a 95       	dec	r19
    1660:	e9 f7       	brne	.-6      	; 0x165c <main+0xe6>
		dtostrf(BME280_get_humidity(), 4, 2, hum);
    1662:	0e 94 25 05 	call	0xa4a	; 0xa4a <BME280_get_humidity>
    1666:	6b 01       	movw	r12, r22
    1668:	7c 01       	movw	r14, r24
    166a:	ce 01       	movw	r24, r28
    166c:	c1 96       	adiw	r24, 0x31	; 49
    166e:	8c 01       	movw	r16, r24
    1670:	22 e0       	ldi	r18, 0x02	; 2
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	44 e0       	ldi	r20, 0x04	; 4
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	c7 01       	movw	r24, r14
    167a:	b6 01       	movw	r22, r12
    167c:	0e 94 6d 12 	call	0x24da	; 0x24da <dtostrf>
		
		setCursor(0, 0);
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <setCursor>
		writeString(temp);
    1688:	ce 01       	movw	r24, r28
    168a:	41 96       	adiw	r24, 0x11	; 17
    168c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <writeString>
		writeChar(0xDF);
    1690:	8f ed       	ldi	r24, 0xDF	; 223
    1692:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <writeChar>
		writeString("C");
    1696:	85 e0       	ldi	r24, 0x05	; 5
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <writeString>
		
		setCursor(1, 0);
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <setCursor>
		writeString(press);
    16a6:	ce 01       	movw	r24, r28
    16a8:	81 96       	adiw	r24, 0x21	; 33
    16aa:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <writeString>
		writeString(" bar");
    16ae:	87 e0       	ldi	r24, 0x07	; 7
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <writeString>
		writeString(hum);
		writeString(" %rh");
		*/
		
		
		setCursor(3,17);
    16b6:	61 e1       	ldi	r22, 0x11	; 17
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <setCursor>
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	a8 ec       	ldi	r26, 0xC8	; 200
    16c4:	b2 e4       	ldi	r27, 0x42	; 66
    16c6:	8b 83       	std	Y+3, r24	; 0x03
    16c8:	9c 83       	std	Y+4, r25	; 0x04
    16ca:	ad 83       	std	Y+5, r26	; 0x05
    16cc:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4a e7       	ldi	r20, 0x7A	; 122
    16d4:	55 e4       	ldi	r21, 0x45	; 69
    16d6:	6b 81       	ldd	r22, Y+3	; 0x03
    16d8:	7c 81       	ldd	r23, Y+4	; 0x04
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	8f 83       	std	Y+7, r24	; 0x07
    16e8:	98 87       	std	Y+8, r25	; 0x08
    16ea:	a9 87       	std	Y+9, r26	; 0x09
    16ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e8       	ldi	r20, 0x80	; 128
    16f4:	5f e3       	ldi	r21, 0x3F	; 63
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	0e 94 3f 0c 	call	0x187e	; 0x187e <__cmpsf2>
    1702:	88 23       	and	r24, r24
    1704:	2c f4       	brge	.+10     	; 0x1710 <main+0x19a>
		__ticks = 1;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9c 87       	std	Y+12, r25	; 0x0c
    170c:	8b 87       	std	Y+11, r24	; 0x0b
    170e:	3f c0       	rjmp	.+126    	; 0x178e <main+0x218>
	else if (__tmp > 65535)
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	3f ef       	ldi	r19, 0xFF	; 255
    1714:	4f e7       	ldi	r20, 0x7F	; 127
    1716:	57 e4       	ldi	r21, 0x47	; 71
    1718:	6f 81       	ldd	r22, Y+7	; 0x07
    171a:	78 85       	ldd	r23, Y+8	; 0x08
    171c:	89 85       	ldd	r24, Y+9	; 0x09
    171e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1720:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__gesf2>
    1724:	18 16       	cp	r1, r24
    1726:	4c f5       	brge	.+82     	; 0x177a <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e2       	ldi	r20, 0x20	; 32
    172e:	51 e4       	ldi	r21, 0x41	; 65
    1730:	6b 81       	ldd	r22, Y+3	; 0x03
    1732:	7c 81       	ldd	r23, Y+4	; 0x04
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9c 87       	std	Y+12, r25	; 0x0c
    174e:	8b 87       	std	Y+11, r24	; 0x0b
    1750:	0f c0       	rjmp	.+30     	; 0x1770 <main+0x1fa>
    1752:	80 e9       	ldi	r24, 0x90	; 144
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	9e 87       	std	Y+14, r25	; 0x0e
    1758:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    175a:	8d 85       	ldd	r24, Y+13	; 0x0d
    175c:	9e 85       	ldd	r25, Y+14	; 0x0e
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <main+0x1e8>
    1762:	9e 87       	std	Y+14, r25	; 0x0e
    1764:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1766:	8b 85       	ldd	r24, Y+11	; 0x0b
    1768:	9c 85       	ldd	r25, Y+12	; 0x0c
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	9c 87       	std	Y+12, r25	; 0x0c
    176e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1770:	8b 85       	ldd	r24, Y+11	; 0x0b
    1772:	9c 85       	ldd	r25, Y+12	; 0x0c
    1774:	89 2b       	or	r24, r25
    1776:	69 f7       	brne	.-38     	; 0x1752 <main+0x1dc>
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <main+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177a:	6f 81       	ldd	r22, Y+7	; 0x07
    177c:	78 85       	ldd	r23, Y+8	; 0x08
    177e:	89 85       	ldd	r24, Y+9	; 0x09
    1780:	9a 85       	ldd	r25, Y+10	; 0x0a
    1782:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9c 87       	std	Y+12, r25	; 0x0c
    178c:	8b 87       	std	Y+11, r24	; 0x0b
    178e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1790:	9c 85       	ldd	r25, Y+12	; 0x0c
    1792:	98 8b       	std	Y+16, r25	; 0x10
    1794:	8f 87       	std	Y+15, r24	; 0x0f
    1796:	8f 85       	ldd	r24, Y+15	; 0x0f
    1798:	98 89       	ldd	r25, Y+16	; 0x10
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <main+0x224>
    179e:	98 8b       	std	Y+16, r25	; 0x10
    17a0:	8f 87       	std	Y+15, r24	; 0x0f
		
		_delay_ms(100);
	}
    17a2:	1d cf       	rjmp	.-454    	; 0x15de <main+0x68>

000017a4 <__subsf3>:
    17a4:	50 58       	subi	r21, 0x80	; 128

000017a6 <__addsf3>:
    17a6:	bb 27       	eor	r27, r27
    17a8:	aa 27       	eor	r26, r26
    17aa:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__addsf3x>
    17ae:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_round>
    17b2:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__fp_pscA>
    17b6:	38 f0       	brcs	.+14     	; 0x17c6 <__addsf3+0x20>
    17b8:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__fp_pscB>
    17bc:	20 f0       	brcs	.+8      	; 0x17c6 <__addsf3+0x20>
    17be:	39 f4       	brne	.+14     	; 0x17ce <__addsf3+0x28>
    17c0:	9f 3f       	cpi	r25, 0xFF	; 255
    17c2:	19 f4       	brne	.+6      	; 0x17ca <__addsf3+0x24>
    17c4:	26 f4       	brtc	.+8      	; 0x17ce <__addsf3+0x28>
    17c6:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_nan>
    17ca:	0e f4       	brtc	.+2      	; 0x17ce <__addsf3+0x28>
    17cc:	e0 95       	com	r30
    17ce:	e7 fb       	bst	r30, 7
    17d0:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_inf>

000017d4 <__addsf3x>:
    17d4:	e9 2f       	mov	r30, r25
    17d6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_split3>
    17da:	58 f3       	brcs	.-42     	; 0x17b2 <__addsf3+0xc>
    17dc:	ba 17       	cp	r27, r26
    17de:	62 07       	cpc	r22, r18
    17e0:	73 07       	cpc	r23, r19
    17e2:	84 07       	cpc	r24, r20
    17e4:	95 07       	cpc	r25, r21
    17e6:	20 f0       	brcs	.+8      	; 0x17f0 <__addsf3x+0x1c>
    17e8:	79 f4       	brne	.+30     	; 0x1808 <__addsf3x+0x34>
    17ea:	a6 f5       	brtc	.+104    	; 0x1854 <__addsf3x+0x80>
    17ec:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__fp_zero>
    17f0:	0e f4       	brtc	.+2      	; 0x17f4 <__addsf3x+0x20>
    17f2:	e0 95       	com	r30
    17f4:	0b 2e       	mov	r0, r27
    17f6:	ba 2f       	mov	r27, r26
    17f8:	a0 2d       	mov	r26, r0
    17fa:	0b 01       	movw	r0, r22
    17fc:	b9 01       	movw	r22, r18
    17fe:	90 01       	movw	r18, r0
    1800:	0c 01       	movw	r0, r24
    1802:	ca 01       	movw	r24, r20
    1804:	a0 01       	movw	r20, r0
    1806:	11 24       	eor	r1, r1
    1808:	ff 27       	eor	r31, r31
    180a:	59 1b       	sub	r21, r25
    180c:	99 f0       	breq	.+38     	; 0x1834 <__addsf3x+0x60>
    180e:	59 3f       	cpi	r21, 0xF9	; 249
    1810:	50 f4       	brcc	.+20     	; 0x1826 <__addsf3x+0x52>
    1812:	50 3e       	cpi	r21, 0xE0	; 224
    1814:	68 f1       	brcs	.+90     	; 0x1870 <__addsf3x+0x9c>
    1816:	1a 16       	cp	r1, r26
    1818:	f0 40       	sbci	r31, 0x00	; 0
    181a:	a2 2f       	mov	r26, r18
    181c:	23 2f       	mov	r18, r19
    181e:	34 2f       	mov	r19, r20
    1820:	44 27       	eor	r20, r20
    1822:	58 5f       	subi	r21, 0xF8	; 248
    1824:	f3 cf       	rjmp	.-26     	; 0x180c <__addsf3x+0x38>
    1826:	46 95       	lsr	r20
    1828:	37 95       	ror	r19
    182a:	27 95       	ror	r18
    182c:	a7 95       	ror	r26
    182e:	f0 40       	sbci	r31, 0x00	; 0
    1830:	53 95       	inc	r21
    1832:	c9 f7       	brne	.-14     	; 0x1826 <__addsf3x+0x52>
    1834:	7e f4       	brtc	.+30     	; 0x1854 <__addsf3x+0x80>
    1836:	1f 16       	cp	r1, r31
    1838:	ba 0b       	sbc	r27, r26
    183a:	62 0b       	sbc	r22, r18
    183c:	73 0b       	sbc	r23, r19
    183e:	84 0b       	sbc	r24, r20
    1840:	ba f0       	brmi	.+46     	; 0x1870 <__addsf3x+0x9c>
    1842:	91 50       	subi	r25, 0x01	; 1
    1844:	a1 f0       	breq	.+40     	; 0x186e <__addsf3x+0x9a>
    1846:	ff 0f       	add	r31, r31
    1848:	bb 1f       	adc	r27, r27
    184a:	66 1f       	adc	r22, r22
    184c:	77 1f       	adc	r23, r23
    184e:	88 1f       	adc	r24, r24
    1850:	c2 f7       	brpl	.-16     	; 0x1842 <__addsf3x+0x6e>
    1852:	0e c0       	rjmp	.+28     	; 0x1870 <__addsf3x+0x9c>
    1854:	ba 0f       	add	r27, r26
    1856:	62 1f       	adc	r22, r18
    1858:	73 1f       	adc	r23, r19
    185a:	84 1f       	adc	r24, r20
    185c:	48 f4       	brcc	.+18     	; 0x1870 <__addsf3x+0x9c>
    185e:	87 95       	ror	r24
    1860:	77 95       	ror	r23
    1862:	67 95       	ror	r22
    1864:	b7 95       	ror	r27
    1866:	f7 95       	ror	r31
    1868:	9e 3f       	cpi	r25, 0xFE	; 254
    186a:	08 f0       	brcs	.+2      	; 0x186e <__addsf3x+0x9a>
    186c:	b0 cf       	rjmp	.-160    	; 0x17ce <__addsf3+0x28>
    186e:	93 95       	inc	r25
    1870:	88 0f       	add	r24, r24
    1872:	08 f0       	brcs	.+2      	; 0x1876 <__addsf3x+0xa2>
    1874:	99 27       	eor	r25, r25
    1876:	ee 0f       	add	r30, r30
    1878:	97 95       	ror	r25
    187a:	87 95       	ror	r24
    187c:	08 95       	ret

0000187e <__cmpsf2>:
    187e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fp_cmp>
    1882:	08 f4       	brcc	.+2      	; 0x1886 <__cmpsf2+0x8>
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	08 95       	ret

00001888 <__divsf3>:
    1888:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__divsf3x>
    188c:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_round>
    1890:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__fp_pscB>
    1894:	58 f0       	brcs	.+22     	; 0x18ac <__divsf3+0x24>
    1896:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__fp_pscA>
    189a:	40 f0       	brcs	.+16     	; 0x18ac <__divsf3+0x24>
    189c:	29 f4       	brne	.+10     	; 0x18a8 <__divsf3+0x20>
    189e:	5f 3f       	cpi	r21, 0xFF	; 255
    18a0:	29 f0       	breq	.+10     	; 0x18ac <__divsf3+0x24>
    18a2:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_inf>
    18a6:	51 11       	cpse	r21, r1
    18a8:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_szero>
    18ac:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_nan>

000018b0 <__divsf3x>:
    18b0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_split3>
    18b4:	68 f3       	brcs	.-38     	; 0x1890 <__divsf3+0x8>

000018b6 <__divsf3_pse>:
    18b6:	99 23       	and	r25, r25
    18b8:	b1 f3       	breq	.-20     	; 0x18a6 <__divsf3+0x1e>
    18ba:	55 23       	and	r21, r21
    18bc:	91 f3       	breq	.-28     	; 0x18a2 <__divsf3+0x1a>
    18be:	95 1b       	sub	r25, r21
    18c0:	55 0b       	sbc	r21, r21
    18c2:	bb 27       	eor	r27, r27
    18c4:	aa 27       	eor	r26, r26
    18c6:	62 17       	cp	r22, r18
    18c8:	73 07       	cpc	r23, r19
    18ca:	84 07       	cpc	r24, r20
    18cc:	38 f0       	brcs	.+14     	; 0x18dc <__divsf3_pse+0x26>
    18ce:	9f 5f       	subi	r25, 0xFF	; 255
    18d0:	5f 4f       	sbci	r21, 0xFF	; 255
    18d2:	22 0f       	add	r18, r18
    18d4:	33 1f       	adc	r19, r19
    18d6:	44 1f       	adc	r20, r20
    18d8:	aa 1f       	adc	r26, r26
    18da:	a9 f3       	breq	.-22     	; 0x18c6 <__divsf3_pse+0x10>
    18dc:	35 d0       	rcall	.+106    	; 0x1948 <__divsf3_pse+0x92>
    18de:	0e 2e       	mov	r0, r30
    18e0:	3a f0       	brmi	.+14     	; 0x18f0 <__divsf3_pse+0x3a>
    18e2:	e0 e8       	ldi	r30, 0x80	; 128
    18e4:	32 d0       	rcall	.+100    	; 0x194a <__divsf3_pse+0x94>
    18e6:	91 50       	subi	r25, 0x01	; 1
    18e8:	50 40       	sbci	r21, 0x00	; 0
    18ea:	e6 95       	lsr	r30
    18ec:	00 1c       	adc	r0, r0
    18ee:	ca f7       	brpl	.-14     	; 0x18e2 <__divsf3_pse+0x2c>
    18f0:	2b d0       	rcall	.+86     	; 0x1948 <__divsf3_pse+0x92>
    18f2:	fe 2f       	mov	r31, r30
    18f4:	29 d0       	rcall	.+82     	; 0x1948 <__divsf3_pse+0x92>
    18f6:	66 0f       	add	r22, r22
    18f8:	77 1f       	adc	r23, r23
    18fa:	88 1f       	adc	r24, r24
    18fc:	bb 1f       	adc	r27, r27
    18fe:	26 17       	cp	r18, r22
    1900:	37 07       	cpc	r19, r23
    1902:	48 07       	cpc	r20, r24
    1904:	ab 07       	cpc	r26, r27
    1906:	b0 e8       	ldi	r27, 0x80	; 128
    1908:	09 f0       	breq	.+2      	; 0x190c <__divsf3_pse+0x56>
    190a:	bb 0b       	sbc	r27, r27
    190c:	80 2d       	mov	r24, r0
    190e:	bf 01       	movw	r22, r30
    1910:	ff 27       	eor	r31, r31
    1912:	93 58       	subi	r25, 0x83	; 131
    1914:	5f 4f       	sbci	r21, 0xFF	; 255
    1916:	3a f0       	brmi	.+14     	; 0x1926 <__divsf3_pse+0x70>
    1918:	9e 3f       	cpi	r25, 0xFE	; 254
    191a:	51 05       	cpc	r21, r1
    191c:	78 f0       	brcs	.+30     	; 0x193c <__divsf3_pse+0x86>
    191e:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_inf>
    1922:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_szero>
    1926:	5f 3f       	cpi	r21, 0xFF	; 255
    1928:	e4 f3       	brlt	.-8      	; 0x1922 <__divsf3_pse+0x6c>
    192a:	98 3e       	cpi	r25, 0xE8	; 232
    192c:	d4 f3       	brlt	.-12     	; 0x1922 <__divsf3_pse+0x6c>
    192e:	86 95       	lsr	r24
    1930:	77 95       	ror	r23
    1932:	67 95       	ror	r22
    1934:	b7 95       	ror	r27
    1936:	f7 95       	ror	r31
    1938:	9f 5f       	subi	r25, 0xFF	; 255
    193a:	c9 f7       	brne	.-14     	; 0x192e <__divsf3_pse+0x78>
    193c:	88 0f       	add	r24, r24
    193e:	91 1d       	adc	r25, r1
    1940:	96 95       	lsr	r25
    1942:	87 95       	ror	r24
    1944:	97 f9       	bld	r25, 7
    1946:	08 95       	ret
    1948:	e1 e0       	ldi	r30, 0x01	; 1
    194a:	66 0f       	add	r22, r22
    194c:	77 1f       	adc	r23, r23
    194e:	88 1f       	adc	r24, r24
    1950:	bb 1f       	adc	r27, r27
    1952:	62 17       	cp	r22, r18
    1954:	73 07       	cpc	r23, r19
    1956:	84 07       	cpc	r24, r20
    1958:	ba 07       	cpc	r27, r26
    195a:	20 f0       	brcs	.+8      	; 0x1964 <__divsf3_pse+0xae>
    195c:	62 1b       	sub	r22, r18
    195e:	73 0b       	sbc	r23, r19
    1960:	84 0b       	sbc	r24, r20
    1962:	ba 0b       	sbc	r27, r26
    1964:	ee 1f       	adc	r30, r30
    1966:	88 f7       	brcc	.-30     	; 0x194a <__divsf3_pse+0x94>
    1968:	e0 95       	com	r30
    196a:	08 95       	ret

0000196c <__fixsfsi>:
    196c:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fixunssfsi>
    1970:	68 94       	set
    1972:	b1 11       	cpse	r27, r1
    1974:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_szero>
    1978:	08 95       	ret

0000197a <__fixunssfsi>:
    197a:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__fp_splitA>
    197e:	88 f0       	brcs	.+34     	; 0x19a2 <__fixunssfsi+0x28>
    1980:	9f 57       	subi	r25, 0x7F	; 127
    1982:	98 f0       	brcs	.+38     	; 0x19aa <__fixunssfsi+0x30>
    1984:	b9 2f       	mov	r27, r25
    1986:	99 27       	eor	r25, r25
    1988:	b7 51       	subi	r27, 0x17	; 23
    198a:	b0 f0       	brcs	.+44     	; 0x19b8 <__fixunssfsi+0x3e>
    198c:	e1 f0       	breq	.+56     	; 0x19c6 <__fixunssfsi+0x4c>
    198e:	66 0f       	add	r22, r22
    1990:	77 1f       	adc	r23, r23
    1992:	88 1f       	adc	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	1a f0       	brmi	.+6      	; 0x199e <__fixunssfsi+0x24>
    1998:	ba 95       	dec	r27
    199a:	c9 f7       	brne	.-14     	; 0x198e <__fixunssfsi+0x14>
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <__fixunssfsi+0x4c>
    199e:	b1 30       	cpi	r27, 0x01	; 1
    19a0:	91 f0       	breq	.+36     	; 0x19c6 <__fixunssfsi+0x4c>
    19a2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__fp_zero>
    19a6:	b1 e0       	ldi	r27, 0x01	; 1
    19a8:	08 95       	ret
    19aa:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__fp_zero>
    19ae:	67 2f       	mov	r22, r23
    19b0:	78 2f       	mov	r23, r24
    19b2:	88 27       	eor	r24, r24
    19b4:	b8 5f       	subi	r27, 0xF8	; 248
    19b6:	39 f0       	breq	.+14     	; 0x19c6 <__fixunssfsi+0x4c>
    19b8:	b9 3f       	cpi	r27, 0xF9	; 249
    19ba:	cc f3       	brlt	.-14     	; 0x19ae <__fixunssfsi+0x34>
    19bc:	86 95       	lsr	r24
    19be:	77 95       	ror	r23
    19c0:	67 95       	ror	r22
    19c2:	b3 95       	inc	r27
    19c4:	d9 f7       	brne	.-10     	; 0x19bc <__fixunssfsi+0x42>
    19c6:	3e f4       	brtc	.+14     	; 0x19d6 <__fixunssfsi+0x5c>
    19c8:	90 95       	com	r25
    19ca:	80 95       	com	r24
    19cc:	70 95       	com	r23
    19ce:	61 95       	neg	r22
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	8f 4f       	sbci	r24, 0xFF	; 255
    19d4:	9f 4f       	sbci	r25, 0xFF	; 255
    19d6:	08 95       	ret

000019d8 <__floatunsisf>:
    19d8:	e8 94       	clt
    19da:	09 c0       	rjmp	.+18     	; 0x19ee <__floatsisf+0x12>

000019dc <__floatsisf>:
    19dc:	97 fb       	bst	r25, 7
    19de:	3e f4       	brtc	.+14     	; 0x19ee <__floatsisf+0x12>
    19e0:	90 95       	com	r25
    19e2:	80 95       	com	r24
    19e4:	70 95       	com	r23
    19e6:	61 95       	neg	r22
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ea:	8f 4f       	sbci	r24, 0xFF	; 255
    19ec:	9f 4f       	sbci	r25, 0xFF	; 255
    19ee:	99 23       	and	r25, r25
    19f0:	a9 f0       	breq	.+42     	; 0x1a1c <__floatsisf+0x40>
    19f2:	f9 2f       	mov	r31, r25
    19f4:	96 e9       	ldi	r25, 0x96	; 150
    19f6:	bb 27       	eor	r27, r27
    19f8:	93 95       	inc	r25
    19fa:	f6 95       	lsr	r31
    19fc:	87 95       	ror	r24
    19fe:	77 95       	ror	r23
    1a00:	67 95       	ror	r22
    1a02:	b7 95       	ror	r27
    1a04:	f1 11       	cpse	r31, r1
    1a06:	f8 cf       	rjmp	.-16     	; 0x19f8 <__floatsisf+0x1c>
    1a08:	fa f4       	brpl	.+62     	; 0x1a48 <__floatsisf+0x6c>
    1a0a:	bb 0f       	add	r27, r27
    1a0c:	11 f4       	brne	.+4      	; 0x1a12 <__floatsisf+0x36>
    1a0e:	60 ff       	sbrs	r22, 0
    1a10:	1b c0       	rjmp	.+54     	; 0x1a48 <__floatsisf+0x6c>
    1a12:	6f 5f       	subi	r22, 0xFF	; 255
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	8f 4f       	sbci	r24, 0xFF	; 255
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	16 c0       	rjmp	.+44     	; 0x1a48 <__floatsisf+0x6c>
    1a1c:	88 23       	and	r24, r24
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <__floatsisf+0x48>
    1a20:	96 e9       	ldi	r25, 0x96	; 150
    1a22:	11 c0       	rjmp	.+34     	; 0x1a46 <__floatsisf+0x6a>
    1a24:	77 23       	and	r23, r23
    1a26:	21 f0       	breq	.+8      	; 0x1a30 <__floatsisf+0x54>
    1a28:	9e e8       	ldi	r25, 0x8E	; 142
    1a2a:	87 2f       	mov	r24, r23
    1a2c:	76 2f       	mov	r23, r22
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <__floatsisf+0x5e>
    1a30:	66 23       	and	r22, r22
    1a32:	71 f0       	breq	.+28     	; 0x1a50 <__floatsisf+0x74>
    1a34:	96 e8       	ldi	r25, 0x86	; 134
    1a36:	86 2f       	mov	r24, r22
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	2a f0       	brmi	.+10     	; 0x1a48 <__floatsisf+0x6c>
    1a3e:	9a 95       	dec	r25
    1a40:	66 0f       	add	r22, r22
    1a42:	77 1f       	adc	r23, r23
    1a44:	88 1f       	adc	r24, r24
    1a46:	da f7       	brpl	.-10     	; 0x1a3e <__floatsisf+0x62>
    1a48:	88 0f       	add	r24, r24
    1a4a:	96 95       	lsr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	97 f9       	bld	r25, 7
    1a50:	08 95       	ret

00001a52 <__fp_cmp>:
    1a52:	99 0f       	add	r25, r25
    1a54:	00 08       	sbc	r0, r0
    1a56:	55 0f       	add	r21, r21
    1a58:	aa 0b       	sbc	r26, r26
    1a5a:	e0 e8       	ldi	r30, 0x80	; 128
    1a5c:	fe ef       	ldi	r31, 0xFE	; 254
    1a5e:	16 16       	cp	r1, r22
    1a60:	17 06       	cpc	r1, r23
    1a62:	e8 07       	cpc	r30, r24
    1a64:	f9 07       	cpc	r31, r25
    1a66:	c0 f0       	brcs	.+48     	; 0x1a98 <__fp_cmp+0x46>
    1a68:	12 16       	cp	r1, r18
    1a6a:	13 06       	cpc	r1, r19
    1a6c:	e4 07       	cpc	r30, r20
    1a6e:	f5 07       	cpc	r31, r21
    1a70:	98 f0       	brcs	.+38     	; 0x1a98 <__fp_cmp+0x46>
    1a72:	62 1b       	sub	r22, r18
    1a74:	73 0b       	sbc	r23, r19
    1a76:	84 0b       	sbc	r24, r20
    1a78:	95 0b       	sbc	r25, r21
    1a7a:	39 f4       	brne	.+14     	; 0x1a8a <__fp_cmp+0x38>
    1a7c:	0a 26       	eor	r0, r26
    1a7e:	61 f0       	breq	.+24     	; 0x1a98 <__fp_cmp+0x46>
    1a80:	23 2b       	or	r18, r19
    1a82:	24 2b       	or	r18, r20
    1a84:	25 2b       	or	r18, r21
    1a86:	21 f4       	brne	.+8      	; 0x1a90 <__fp_cmp+0x3e>
    1a88:	08 95       	ret
    1a8a:	0a 26       	eor	r0, r26
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <__fp_cmp+0x3e>
    1a8e:	a1 40       	sbci	r26, 0x01	; 1
    1a90:	a6 95       	lsr	r26
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	81 1d       	adc	r24, r1
    1a96:	81 1d       	adc	r24, r1
    1a98:	08 95       	ret

00001a9a <__fp_inf>:
    1a9a:	97 f9       	bld	r25, 7
    1a9c:	9f 67       	ori	r25, 0x7F	; 127
    1a9e:	80 e8       	ldi	r24, 0x80	; 128
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	08 95       	ret

00001aa6 <__fp_nan>:
    1aa6:	9f ef       	ldi	r25, 0xFF	; 255
    1aa8:	80 ec       	ldi	r24, 0xC0	; 192
    1aaa:	08 95       	ret

00001aac <__fp_pscA>:
    1aac:	00 24       	eor	r0, r0
    1aae:	0a 94       	dec	r0
    1ab0:	16 16       	cp	r1, r22
    1ab2:	17 06       	cpc	r1, r23
    1ab4:	18 06       	cpc	r1, r24
    1ab6:	09 06       	cpc	r0, r25
    1ab8:	08 95       	ret

00001aba <__fp_pscB>:
    1aba:	00 24       	eor	r0, r0
    1abc:	0a 94       	dec	r0
    1abe:	12 16       	cp	r1, r18
    1ac0:	13 06       	cpc	r1, r19
    1ac2:	14 06       	cpc	r1, r20
    1ac4:	05 06       	cpc	r0, r21
    1ac6:	08 95       	ret

00001ac8 <__fp_round>:
    1ac8:	09 2e       	mov	r0, r25
    1aca:	03 94       	inc	r0
    1acc:	00 0c       	add	r0, r0
    1ace:	11 f4       	brne	.+4      	; 0x1ad4 <__fp_round+0xc>
    1ad0:	88 23       	and	r24, r24
    1ad2:	52 f0       	brmi	.+20     	; 0x1ae8 <__fp_round+0x20>
    1ad4:	bb 0f       	add	r27, r27
    1ad6:	40 f4       	brcc	.+16     	; 0x1ae8 <__fp_round+0x20>
    1ad8:	bf 2b       	or	r27, r31
    1ada:	11 f4       	brne	.+4      	; 0x1ae0 <__fp_round+0x18>
    1adc:	60 ff       	sbrs	r22, 0
    1ade:	04 c0       	rjmp	.+8      	; 0x1ae8 <__fp_round+0x20>
    1ae0:	6f 5f       	subi	r22, 0xFF	; 255
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	08 95       	ret

00001aea <__fp_split3>:
    1aea:	57 fd       	sbrc	r21, 7
    1aec:	90 58       	subi	r25, 0x80	; 128
    1aee:	44 0f       	add	r20, r20
    1af0:	55 1f       	adc	r21, r21
    1af2:	59 f0       	breq	.+22     	; 0x1b0a <__fp_splitA+0x10>
    1af4:	5f 3f       	cpi	r21, 0xFF	; 255
    1af6:	71 f0       	breq	.+28     	; 0x1b14 <__fp_splitA+0x1a>
    1af8:	47 95       	ror	r20

00001afa <__fp_splitA>:
    1afa:	88 0f       	add	r24, r24
    1afc:	97 fb       	bst	r25, 7
    1afe:	99 1f       	adc	r25, r25
    1b00:	61 f0       	breq	.+24     	; 0x1b1a <__fp_splitA+0x20>
    1b02:	9f 3f       	cpi	r25, 0xFF	; 255
    1b04:	79 f0       	breq	.+30     	; 0x1b24 <__fp_splitA+0x2a>
    1b06:	87 95       	ror	r24
    1b08:	08 95       	ret
    1b0a:	12 16       	cp	r1, r18
    1b0c:	13 06       	cpc	r1, r19
    1b0e:	14 06       	cpc	r1, r20
    1b10:	55 1f       	adc	r21, r21
    1b12:	f2 cf       	rjmp	.-28     	; 0x1af8 <__fp_split3+0xe>
    1b14:	46 95       	lsr	r20
    1b16:	f1 df       	rcall	.-30     	; 0x1afa <__fp_splitA>
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <__fp_splitA+0x30>
    1b1a:	16 16       	cp	r1, r22
    1b1c:	17 06       	cpc	r1, r23
    1b1e:	18 06       	cpc	r1, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	f1 cf       	rjmp	.-30     	; 0x1b06 <__fp_splitA+0xc>
    1b24:	86 95       	lsr	r24
    1b26:	71 05       	cpc	r23, r1
    1b28:	61 05       	cpc	r22, r1
    1b2a:	08 94       	sec
    1b2c:	08 95       	ret

00001b2e <__fp_zero>:
    1b2e:	e8 94       	clt

00001b30 <__fp_szero>:
    1b30:	bb 27       	eor	r27, r27
    1b32:	66 27       	eor	r22, r22
    1b34:	77 27       	eor	r23, r23
    1b36:	cb 01       	movw	r24, r22
    1b38:	97 f9       	bld	r25, 7
    1b3a:	08 95       	ret

00001b3c <__gesf2>:
    1b3c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fp_cmp>
    1b40:	08 f4       	brcc	.+2      	; 0x1b44 <__gesf2+0x8>
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	08 95       	ret

00001b46 <__mulsf3>:
    1b46:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__mulsf3x>
    1b4a:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_round>
    1b4e:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__fp_pscA>
    1b52:	38 f0       	brcs	.+14     	; 0x1b62 <__mulsf3+0x1c>
    1b54:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__fp_pscB>
    1b58:	20 f0       	brcs	.+8      	; 0x1b62 <__mulsf3+0x1c>
    1b5a:	95 23       	and	r25, r21
    1b5c:	11 f0       	breq	.+4      	; 0x1b62 <__mulsf3+0x1c>
    1b5e:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_inf>
    1b62:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_nan>
    1b66:	11 24       	eor	r1, r1
    1b68:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_szero>

00001b6c <__mulsf3x>:
    1b6c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_split3>
    1b70:	70 f3       	brcs	.-36     	; 0x1b4e <__mulsf3+0x8>

00001b72 <__mulsf3_pse>:
    1b72:	95 9f       	mul	r25, r21
    1b74:	c1 f3       	breq	.-16     	; 0x1b66 <__mulsf3+0x20>
    1b76:	95 0f       	add	r25, r21
    1b78:	50 e0       	ldi	r21, 0x00	; 0
    1b7a:	55 1f       	adc	r21, r21
    1b7c:	62 9f       	mul	r22, r18
    1b7e:	f0 01       	movw	r30, r0
    1b80:	72 9f       	mul	r23, r18
    1b82:	bb 27       	eor	r27, r27
    1b84:	f0 0d       	add	r31, r0
    1b86:	b1 1d       	adc	r27, r1
    1b88:	63 9f       	mul	r22, r19
    1b8a:	aa 27       	eor	r26, r26
    1b8c:	f0 0d       	add	r31, r0
    1b8e:	b1 1d       	adc	r27, r1
    1b90:	aa 1f       	adc	r26, r26
    1b92:	64 9f       	mul	r22, r20
    1b94:	66 27       	eor	r22, r22
    1b96:	b0 0d       	add	r27, r0
    1b98:	a1 1d       	adc	r26, r1
    1b9a:	66 1f       	adc	r22, r22
    1b9c:	82 9f       	mul	r24, r18
    1b9e:	22 27       	eor	r18, r18
    1ba0:	b0 0d       	add	r27, r0
    1ba2:	a1 1d       	adc	r26, r1
    1ba4:	62 1f       	adc	r22, r18
    1ba6:	73 9f       	mul	r23, r19
    1ba8:	b0 0d       	add	r27, r0
    1baa:	a1 1d       	adc	r26, r1
    1bac:	62 1f       	adc	r22, r18
    1bae:	83 9f       	mul	r24, r19
    1bb0:	a0 0d       	add	r26, r0
    1bb2:	61 1d       	adc	r22, r1
    1bb4:	22 1f       	adc	r18, r18
    1bb6:	74 9f       	mul	r23, r20
    1bb8:	33 27       	eor	r19, r19
    1bba:	a0 0d       	add	r26, r0
    1bbc:	61 1d       	adc	r22, r1
    1bbe:	23 1f       	adc	r18, r19
    1bc0:	84 9f       	mul	r24, r20
    1bc2:	60 0d       	add	r22, r0
    1bc4:	21 1d       	adc	r18, r1
    1bc6:	82 2f       	mov	r24, r18
    1bc8:	76 2f       	mov	r23, r22
    1bca:	6a 2f       	mov	r22, r26
    1bcc:	11 24       	eor	r1, r1
    1bce:	9f 57       	subi	r25, 0x7F	; 127
    1bd0:	50 40       	sbci	r21, 0x00	; 0
    1bd2:	9a f0       	brmi	.+38     	; 0x1bfa <__mulsf3_pse+0x88>
    1bd4:	f1 f0       	breq	.+60     	; 0x1c12 <__mulsf3_pse+0xa0>
    1bd6:	88 23       	and	r24, r24
    1bd8:	4a f0       	brmi	.+18     	; 0x1bec <__mulsf3_pse+0x7a>
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	bb 1f       	adc	r27, r27
    1be0:	66 1f       	adc	r22, r22
    1be2:	77 1f       	adc	r23, r23
    1be4:	88 1f       	adc	r24, r24
    1be6:	91 50       	subi	r25, 0x01	; 1
    1be8:	50 40       	sbci	r21, 0x00	; 0
    1bea:	a9 f7       	brne	.-22     	; 0x1bd6 <__mulsf3_pse+0x64>
    1bec:	9e 3f       	cpi	r25, 0xFE	; 254
    1bee:	51 05       	cpc	r21, r1
    1bf0:	80 f0       	brcs	.+32     	; 0x1c12 <__mulsf3_pse+0xa0>
    1bf2:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_inf>
    1bf6:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_szero>
    1bfa:	5f 3f       	cpi	r21, 0xFF	; 255
    1bfc:	e4 f3       	brlt	.-8      	; 0x1bf6 <__mulsf3_pse+0x84>
    1bfe:	98 3e       	cpi	r25, 0xE8	; 232
    1c00:	d4 f3       	brlt	.-12     	; 0x1bf6 <__mulsf3_pse+0x84>
    1c02:	86 95       	lsr	r24
    1c04:	77 95       	ror	r23
    1c06:	67 95       	ror	r22
    1c08:	b7 95       	ror	r27
    1c0a:	f7 95       	ror	r31
    1c0c:	e7 95       	ror	r30
    1c0e:	9f 5f       	subi	r25, 0xFF	; 255
    1c10:	c1 f7       	brne	.-16     	; 0x1c02 <__mulsf3_pse+0x90>
    1c12:	fe 2b       	or	r31, r30
    1c14:	88 0f       	add	r24, r24
    1c16:	91 1d       	adc	r25, r1
    1c18:	96 95       	lsr	r25
    1c1a:	87 95       	ror	r24
    1c1c:	97 f9       	bld	r25, 7
    1c1e:	08 95       	ret

00001c20 <initLCD>:

/************************************************************************/
/* Initializes the LCD for 4-Bit mode                                   */
/************************************************************************/
void initLCD(char slaveAddress)
{
    1c20:	cf 93       	push	r28
    1c22:	c8 2f       	mov	r28, r24
	initI2C(10,'u');
    1c24:	45 e7       	ldi	r20, 0x75	; 117
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	80 e2       	ldi	r24, 0x20	; 32
    1c2c:	91 e4       	ldi	r25, 0x41	; 65
    1c2e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <initI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c32:	2f ef       	ldi	r18, 0xFF	; 255
    1c34:	89 e6       	ldi	r24, 0x69	; 105
    1c36:	98 e1       	ldi	r25, 0x18	; 24
    1c38:	21 50       	subi	r18, 0x01	; 1
    1c3a:	80 40       	sbci	r24, 0x00	; 0
    1c3c:	90 40       	sbci	r25, 0x00	; 0
    1c3e:	e1 f7       	brne	.-8      	; 0x1c38 <initLCD+0x18>
    1c40:	00 c0       	rjmp	.+0      	; 0x1c42 <initLCD+0x22>
    1c42:	00 00       	nop
	_delay_ms(500);
	
	sendStartCondition();
    1c44:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <sendStartCondition>
	
	if(sendByte(slaveAddress))
    1c48:	8c 2f       	mov	r24, r28
    1c4a:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    1c4e:	88 23       	and	r24, r24
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <initLCD+0x34>
    1c52:	88 c0       	rjmp	.+272    	; 0x1d64 <initLCD+0x144>
	{
		savedSlaveAddress = slaveAddress;
    1c54:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <savedSlaveAddress>
    1c58:	8f e5       	ldi	r24, 0x5F	; 95
    1c5a:	9a ee       	ldi	r25, 0xEA	; 234
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <initLCD+0x3c>
    1c60:	00 c0       	rjmp	.+0      	; 0x1c62 <initLCD+0x42>
    1c62:	00 00       	nop
		
		//Init LCD
		_delay_ms(15);
		sendByte(0b00110100);
    1c64:	84 e3       	ldi	r24, 0x34	; 52
    1c66:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00110000);
    1c6a:	80 e3       	ldi	r24, 0x30	; 48
    1c6c:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    1c70:	9f e7       	ldi	r25, 0x7F	; 127
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	91 50       	subi	r25, 0x01	; 1
    1c78:	20 40       	sbci	r18, 0x00	; 0
    1c7a:	80 40       	sbci	r24, 0x00	; 0
    1c7c:	e1 f7       	brne	.-8      	; 0x1c76 <initLCD+0x56>
    1c7e:	00 c0       	rjmp	.+0      	; 0x1c80 <initLCD+0x60>
    1c80:	00 00       	nop
		_delay_ms(41);
		sendByte(0b00110100);
    1c82:	84 e3       	ldi	r24, 0x34	; 52
    1c84:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00110000);
    1c88:	80 e3       	ldi	r24, 0x30	; 48
    1c8a:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c8e:	8f e8       	ldi	r24, 0x8F	; 143
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <initLCD+0x72>
    1c96:	00 c0       	rjmp	.+0      	; 0x1c98 <initLCD+0x78>
    1c98:	00 00       	nop
		_delay_us(100);
		sendByte(0b00110100);
    1c9a:	84 e3       	ldi	r24, 0x34	; 52
    1c9c:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00110000);
    1ca0:	80 e3       	ldi	r24, 0x30	; 48
    1ca2:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ca6:	9f e7       	ldi	r25, 0x7F	; 127
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	91 50       	subi	r25, 0x01	; 1
    1cae:	20 40       	sbci	r18, 0x00	; 0
    1cb0:	80 40       	sbci	r24, 0x00	; 0
    1cb2:	e1 f7       	brne	.-8      	; 0x1cac <initLCD+0x8c>
    1cb4:	00 c0       	rjmp	.+0      	; 0x1cb6 <initLCD+0x96>
    1cb6:	00 00       	nop
		_delay_ms(41);
		sendByte(0b00100100);
    1cb8:	84 e2       	ldi	r24, 0x24	; 36
    1cba:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00100000);
    1cbe:	80 e2       	ldi	r24, 0x20	; 32
    1cc0:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cc4:	95 ed       	ldi	r25, 0xD5	; 213
    1cc6:	9a 95       	dec	r25
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <initLCD+0xa6>
    1cca:	00 00       	nop
		
		//Config
		_delay_us(40);
		sendByte(0b00100100);
    1ccc:	84 e2       	ldi	r24, 0x24	; 36
    1cce:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00100000);
    1cd2:	80 e2       	ldi	r24, 0x20	; 32
    1cd4:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b10000100);
    1cd8:	84 e8       	ldi	r24, 0x84	; 132
    1cda:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b10000000);
    1cde:	80 e8       	ldi	r24, 0x80	; 128
    1ce0:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    1ce4:	25 ed       	ldi	r18, 0xD5	; 213
    1ce6:	2a 95       	dec	r18
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <initLCD+0xc6>
    1cea:	00 00       	nop
		
		//Display off
		_delay_us(40);
		sendByte(0b00000100);
    1cec:	84 e0       	ldi	r24, 0x04	; 4
    1cee:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00000000);
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b10000100);
    1cf8:	84 e8       	ldi	r24, 0x84	; 132
    1cfa:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b10000000);
    1cfe:	80 e8       	ldi	r24, 0x80	; 128
    1d00:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    1d04:	85 ed       	ldi	r24, 0xD5	; 213
    1d06:	8a 95       	dec	r24
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <initLCD+0xe6>
    1d0a:	00 00       	nop
		
		//Display clear cursor home
		_delay_us(40);
		sendByte(0b00000100);
    1d0c:	84 e0       	ldi	r24, 0x04	; 4
    1d0e:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00000000);
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00010100);
    1d18:	84 e1       	ldi	r24, 0x14	; 20
    1d1a:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00010000);
    1d1e:	80 e1       	ldi	r24, 0x10	; 16
    1d20:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    1d24:	95 ed       	ldi	r25, 0xD5	; 213
    1d26:	9a 95       	dec	r25
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <initLCD+0x106>
    1d2a:	00 00       	nop
		
		//Set cursor direction
		_delay_us(40);
		sendByte(0b00000100);
    1d2c:	84 e0       	ldi	r24, 0x04	; 4
    1d2e:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00000000);
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b01100100);
    1d38:	84 e6       	ldi	r24, 0x64	; 100
    1d3a:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b01100000);
    1d3e:	80 e6       	ldi	r24, 0x60	; 96
    1d40:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    1d44:	25 ed       	ldi	r18, 0xD5	; 213
    1d46:	2a 95       	dec	r18
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <initLCD+0x126>
    1d4a:	00 00       	nop
		
		//Turn on display
		_delay_us(40);
		sendByte(0b00001100);
    1d4c:	8c e0       	ldi	r24, 0x0C	; 12
    1d4e:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b00001000);
    1d52:	88 e0       	ldi	r24, 0x08	; 8
    1d54:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b11101100);
    1d58:	8c ee       	ldi	r24, 0xEC	; 236
    1d5a:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
		sendByte(0b11101000);
    1d5e:	88 ee       	ldi	r24, 0xE8	; 232
    1d60:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	}
	sendStopCondition();
    1d64:	0e 94 19 11 	call	0x2232	; 0x2232 <sendStopCondition>
}
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <sendCommand>:

/************************************************************************/
/* Sends a command as two nibbles to the LCD                            */
/************************************************************************/
void sendCommand(char command)
{
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	c8 2f       	mov	r28, r24
	sendStartCondition();
    1d72:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <sendStartCondition>
	sendByte(savedSlaveAddress);
    1d76:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <savedSlaveAddress>
    1d7a:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    1d7e:	85 ed       	ldi	r24, 0xD5	; 213
    1d80:	8a 95       	dec	r24
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <sendCommand+0x14>
    1d84:	00 00       	nop
	
	_delay_us(40);
	sendByte((0xF0 &command) | (0b00001100));
    1d86:	dc 2f       	mov	r29, r28
    1d88:	d0 7f       	andi	r29, 0xF0	; 240
    1d8a:	8d 2f       	mov	r24, r29
    1d8c:	8c 60       	ori	r24, 0x0C	; 12
    1d8e:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	sendByte((0xF0 &command) | (0b00001000));
    1d92:	8d 2f       	mov	r24, r29
    1d94:	88 60       	ori	r24, 0x08	; 8
    1d96:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	sendByte(((0x0F &command)<<4) | (0b00001100));
    1d9a:	80 e1       	ldi	r24, 0x10	; 16
    1d9c:	c8 9f       	mul	r28, r24
    1d9e:	e0 01       	movw	r28, r0
    1da0:	11 24       	eor	r1, r1
    1da2:	8c 2f       	mov	r24, r28
    1da4:	8c 60       	ori	r24, 0x0C	; 12
    1da6:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	sendByte(((0x0F &command)<<4) | (0b00001000));
    1daa:	8c 2f       	mov	r24, r28
    1dac:	88 60       	ori	r24, 0x08	; 8
    1dae:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	
	sendStopCondition();
    1db2:	0e 94 19 11 	call	0x2232	; 0x2232 <sendStopCondition>
}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <sendData>:

/************************************************************************/
/* Sends a byte of data as two nibbles to the LCD                       */
/************************************************************************/
void sendData(char command)
{
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	c8 2f       	mov	r28, r24
	sendStartCondition();
    1dc2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <sendStartCondition>
	sendByte(savedSlaveAddress);
    1dc6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <savedSlaveAddress>
    1dca:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    1dce:	85 ed       	ldi	r24, 0xD5	; 213
    1dd0:	8a 95       	dec	r24
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <sendData+0x14>
    1dd4:	00 00       	nop
	
	_delay_us(40);
	sendByte((0xF0 &command) | (0b00001101));
    1dd6:	dc 2f       	mov	r29, r28
    1dd8:	d0 7f       	andi	r29, 0xF0	; 240
    1dda:	8d 2f       	mov	r24, r29
    1ddc:	8d 60       	ori	r24, 0x0D	; 13
    1dde:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	sendByte((0xF0 &command) | (0b00001001));
    1de2:	8d 2f       	mov	r24, r29
    1de4:	89 60       	ori	r24, 0x09	; 9
    1de6:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	sendByte(((0x0F &command)<<4) | (0b00001101));
    1dea:	80 e1       	ldi	r24, 0x10	; 16
    1dec:	c8 9f       	mul	r28, r24
    1dee:	e0 01       	movw	r28, r0
    1df0:	11 24       	eor	r1, r1
    1df2:	8c 2f       	mov	r24, r28
    1df4:	8d 60       	ori	r24, 0x0D	; 13
    1df6:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	sendByte(((0x0F &command)<<4) | (0b00001001));
    1dfa:	8c 2f       	mov	r24, r28
    1dfc:	89 60       	ori	r24, 0x09	; 9
    1dfe:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	
	sendStopCondition();
    1e02:	0e 94 19 11 	call	0x2232	; 0x2232 <sendStopCondition>
}
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	08 95       	ret

00001e0c <setCursor>:
/* col: 0 for first char												*/
/*		15 for last char												*/
/************************************************************************/
void setCursor(char row, char col)
{
	sendCommand((0x80+col)+(0x40*row));
    1e0c:	60 58       	subi	r22, 0x80	; 128
    1e0e:	90 e4       	ldi	r25, 0x40	; 64
    1e10:	89 9f       	mul	r24, r25
    1e12:	60 0d       	add	r22, r0
    1e14:	11 24       	eor	r1, r1
    1e16:	86 2f       	mov	r24, r22
    1e18:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <sendCommand>
    1e1c:	08 95       	ret

00001e1e <writeChar>:
/* Writes a given char on the LCD                                       */
/* The location can be specified with the setCursor() funtion			*/
/************************************************************************/
void writeChar(char character)
{
	sendData(character);
    1e1e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <sendData>
    1e22:	08 95       	ret

00001e24 <writeString>:
/************************************************************************/
/* Writes a given char* (String) on the LCD                             */
/* The start location can be specified with the setCursor() funtion 	*/
/************************************************************************/
void writeString(char* character)
{
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while(character[i] != '\0')
    1e2c:	80 81       	ld	r24, Z
    1e2e:	88 23       	and	r24, r24
    1e30:	59 f0       	breq	.+22     	; 0x1e48 <writeString+0x24>
    1e32:	8f 01       	movw	r16, r30
    1e34:	c0 e0       	ldi	r28, 0x00	; 0
/* Writes a given char on the LCD                                       */
/* The location can be specified with the setCursor() funtion			*/
/************************************************************************/
void writeChar(char character)
{
	sendData(character);
    1e36:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <sendData>
{
	unsigned char i = 0;
	while(character[i] != '\0')
	{
		writeChar(character[i]);
		i++;
    1e3a:	cf 5f       	subi	r28, 0xFF	; 255
/* The start location can be specified with the setCursor() funtion 	*/
/************************************************************************/
void writeString(char* character)
{
	unsigned char i = 0;
	while(character[i] != '\0')
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	ec 0f       	add	r30, r28
    1e40:	f1 1d       	adc	r31, r1
    1e42:	80 81       	ld	r24, Z
    1e44:	81 11       	cpse	r24, r1
    1e46:	f7 cf       	rjmp	.-18     	; 0x1e36 <writeString+0x12>
	{
		writeChar(character[i]);
		i++;
	}
}
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	08 95       	ret

00001e50 <initI2C>:
			SCL_LOW();
		}
	}
	
	return byte;
}
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <initI2C+0x6>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <initI2C+0x8>
    1e58:	1f 92       	push	r1
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	69 83       	std	Y+1, r22	; 0x01
    1e60:	7a 83       	std	Y+2, r23	; 0x02
    1e62:	8b 83       	std	Y+3, r24	; 0x03
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	4d 83       	std	Y+5, r20	; 0x05
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e6e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e70:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1e74:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1e78:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1e7c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delayunit>
    1e86:	8a e2       	ldi	r24, 0x2A	; 42
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	2a e2       	ldi	r18, 0x2A	; 42
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	f9 01       	movw	r30, r18
    1e90:	20 81       	ld	r18, Z
    1e92:	27 7f       	andi	r18, 0xF7	; 247
    1e94:	fc 01       	movw	r30, r24
    1e96:	20 83       	st	Z, r18
    1e98:	8a e2       	ldi	r24, 0x2A	; 42
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	2a e2       	ldi	r18, 0x2A	; 42
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	f9 01       	movw	r30, r18
    1ea2:	20 81       	ld	r18, Z
    1ea4:	2b 7f       	andi	r18, 0xFB	; 251
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	20 83       	st	Z, r18
    1eaa:	00 00       	nop
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <delay_I2C>:
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	ae 97       	sbiw	r28, 0x2e	; 46
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <delayunit>
    1ed4:	88 2f       	mov	r24, r24
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	8d 36       	cpi	r24, 0x6D	; 109
    1eda:	91 05       	cpc	r25, r1
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <delay_I2C+0x24>
    1ede:	f8 c0       	rjmp	.+496    	; 0x20d0 <delay_I2C+0x214>
    1ee0:	85 37       	cpi	r24, 0x75	; 117
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <delay_I2C+0x2c>
    1ee6:	6b c1       	rjmp	.+726    	; 0x21be <delay_I2C+0x302>
    1ee8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1eec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1ef0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    1ef4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	af 83       	std	Y+7, r26	; 0x07
    1efe:	b8 87       	std	Y+8, r27	; 0x08
    1f00:	2b ea       	ldi	r18, 0xAB	; 171
    1f02:	3a ea       	ldi	r19, 0xAA	; 170
    1f04:	4a ea       	ldi	r20, 0xAA	; 170
    1f06:	50 e4       	ldi	r21, 0x40	; 64
    1f08:	6d 81       	ldd	r22, Y+5	; 0x05
    1f0a:	7e 81       	ldd	r23, Y+6	; 0x06
    1f0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f0e:	98 85       	ldd	r25, Y+8	; 0x08
    1f10:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	89 87       	std	Y+9, r24	; 0x09
    1f1a:	9a 87       	std	Y+10, r25	; 0x0a
    1f1c:	ab 87       	std	Y+11, r26	; 0x0b
    1f1e:	bc 87       	std	Y+12, r27	; 0x0c
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	50 e4       	ldi	r21, 0x40	; 64
    1f28:	6d 81       	ldd	r22, Y+5	; 0x05
    1f2a:	7e 81       	ldd	r23, Y+6	; 0x06
    1f2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2e:	98 85       	ldd	r25, Y+8	; 0x08
    1f30:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8d 87       	std	Y+13, r24	; 0x0d
    1f3a:	9e 87       	std	Y+14, r25	; 0x0e
    1f3c:	af 87       	std	Y+15, r26	; 0x0f
    1f3e:	b8 8b       	std	Y+16, r27	; 0x10
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	69 85       	ldd	r22, Y+9	; 0x09
    1f4a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f50:	0e 94 3f 0c 	call	0x187e	; 0x187e <__cmpsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	1c f4       	brge	.+6      	; 0x1f5e <delay_I2C+0xa2>
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	89 8b       	std	Y+17, r24	; 0x11
    1f5c:	b2 c0       	rjmp	.+356    	; 0x20c2 <delay_I2C+0x206>
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	3f ef       	ldi	r19, 0xFF	; 255
    1f62:	4f e7       	ldi	r20, 0x7F	; 127
    1f64:	57 e4       	ldi	r21, 0x47	; 71
    1f66:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f68:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f6c:	98 89       	ldd	r25, Y+16	; 0x10
    1f6e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__gesf2>
    1f72:	18 16       	cp	r1, r24
    1f74:	0c f0       	brlt	.+2      	; 0x1f78 <delay_I2C+0xbc>
    1f76:	7b c0       	rjmp	.+246    	; 0x206e <delay_I2C+0x1b2>
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a e7       	ldi	r20, 0x7A	; 122
    1f7e:	54 e4       	ldi	r21, 0x44	; 68
    1f80:	6d 81       	ldd	r22, Y+5	; 0x05
    1f82:	7e 81       	ldd	r23, Y+6	; 0x06
    1f84:	8f 81       	ldd	r24, Y+7	; 0x07
    1f86:	98 85       	ldd	r25, Y+8	; 0x08
    1f88:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	8a 8b       	std	Y+18, r24	; 0x12
    1f92:	9b 8b       	std	Y+19, r25	; 0x13
    1f94:	ac 8b       	std	Y+20, r26	; 0x14
    1f96:	bd 8b       	std	Y+21, r27	; 0x15
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	4a e7       	ldi	r20, 0x7A	; 122
    1f9e:	55 e4       	ldi	r21, 0x45	; 69
    1fa0:	6a 89       	ldd	r22, Y+18	; 0x12
    1fa2:	7b 89       	ldd	r23, Y+19	; 0x13
    1fa4:	8c 89       	ldd	r24, Y+20	; 0x14
    1fa6:	9d 89       	ldd	r25, Y+21	; 0x15
    1fa8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8e 8b       	std	Y+22, r24	; 0x16
    1fb2:	9f 8b       	std	Y+23, r25	; 0x17
    1fb4:	a8 8f       	std	Y+24, r26	; 0x18
    1fb6:	b9 8f       	std	Y+25, r27	; 0x19
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e8       	ldi	r20, 0x80	; 128
    1fbe:	5f e3       	ldi	r21, 0x3F	; 63
    1fc0:	6e 89       	ldd	r22, Y+22	; 0x16
    1fc2:	7f 89       	ldd	r23, Y+23	; 0x17
    1fc4:	88 8d       	ldd	r24, Y+24	; 0x18
    1fc6:	99 8d       	ldd	r25, Y+25	; 0x19
    1fc8:	0e 94 3f 0c 	call	0x187e	; 0x187e <__cmpsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	2c f4       	brge	.+10     	; 0x1fda <delay_I2C+0x11e>
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9b 8f       	std	Y+27, r25	; 0x1b
    1fd6:	8a 8f       	std	Y+26, r24	; 0x1a
    1fd8:	3f c0       	rjmp	.+126    	; 0x2058 <delay_I2C+0x19c>
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	3f ef       	ldi	r19, 0xFF	; 255
    1fde:	4f e7       	ldi	r20, 0x7F	; 127
    1fe0:	57 e4       	ldi	r21, 0x47	; 71
    1fe2:	6e 89       	ldd	r22, Y+22	; 0x16
    1fe4:	7f 89       	ldd	r23, Y+23	; 0x17
    1fe6:	88 8d       	ldd	r24, Y+24	; 0x18
    1fe8:	99 8d       	ldd	r25, Y+25	; 0x19
    1fea:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__gesf2>
    1fee:	18 16       	cp	r1, r24
    1ff0:	4c f5       	brge	.+82     	; 0x2044 <delay_I2C+0x188>
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e2       	ldi	r20, 0x20	; 32
    1ff8:	51 e4       	ldi	r21, 0x41	; 65
    1ffa:	6a 89       	ldd	r22, Y+18	; 0x12
    1ffc:	7b 89       	ldd	r23, Y+19	; 0x13
    1ffe:	8c 89       	ldd	r24, Y+20	; 0x14
    2000:	9d 89       	ldd	r25, Y+21	; 0x15
    2002:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9b 8f       	std	Y+27, r25	; 0x1b
    2018:	8a 8f       	std	Y+26, r24	; 0x1a
    201a:	0f c0       	rjmp	.+30     	; 0x203a <delay_I2C+0x17e>
    201c:	80 e9       	ldi	r24, 0x90	; 144
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	9d 8f       	std	Y+29, r25	; 0x1d
    2022:	8c 8f       	std	Y+28, r24	; 0x1c
    2024:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2026:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <delay_I2C+0x16c>
    202c:	9d 8f       	std	Y+29, r25	; 0x1d
    202e:	8c 8f       	std	Y+28, r24	; 0x1c
    2030:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2032:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	9b 8f       	std	Y+27, r25	; 0x1b
    2038:	8a 8f       	std	Y+26, r24	; 0x1a
    203a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    203c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    203e:	89 2b       	or	r24, r25
    2040:	69 f7       	brne	.-38     	; 0x201c <delay_I2C+0x160>
    2042:	3f c0       	rjmp	.+126    	; 0x20c2 <delay_I2C+0x206>
    2044:	6e 89       	ldd	r22, Y+22	; 0x16
    2046:	7f 89       	ldd	r23, Y+23	; 0x17
    2048:	88 8d       	ldd	r24, Y+24	; 0x18
    204a:	99 8d       	ldd	r25, Y+25	; 0x19
    204c:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9b 8f       	std	Y+27, r25	; 0x1b
    2056:	8a 8f       	std	Y+26, r24	; 0x1a
    2058:	8a 8d       	ldd	r24, Y+26	; 0x1a
    205a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    205c:	9f 8f       	std	Y+31, r25	; 0x1f
    205e:	8e 8f       	std	Y+30, r24	; 0x1e
    2060:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2062:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <delay_I2C+0x1a8>
    2068:	9f 8f       	std	Y+31, r25	; 0x1f
    206a:	8e 8f       	std	Y+30, r24	; 0x1e
    206c:	2a c0       	rjmp	.+84     	; 0x20c2 <delay_I2C+0x206>
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4f e7       	ldi	r20, 0x7F	; 127
    2074:	53 e4       	ldi	r21, 0x43	; 67
    2076:	69 85       	ldd	r22, Y+9	; 0x09
    2078:	7a 85       	ldd	r23, Y+10	; 0x0a
    207a:	8b 85       	ldd	r24, Y+11	; 0x0b
    207c:	9c 85       	ldd	r25, Y+12	; 0x0c
    207e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__gesf2>
    2082:	18 16       	cp	r1, r24
    2084:	ac f4       	brge	.+42     	; 0x20b0 <delay_I2C+0x1f4>
    2086:	6d 85       	ldd	r22, Y+13	; 0x0d
    2088:	7e 85       	ldd	r23, Y+14	; 0x0e
    208a:	8f 85       	ldd	r24, Y+15	; 0x0f
    208c:	98 89       	ldd	r25, Y+16	; 0x10
    208e:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	99 a3       	std	Y+33, r25	; 0x21
    2098:	88 a3       	std	Y+32, r24	; 0x20
    209a:	88 a1       	ldd	r24, Y+32	; 0x20
    209c:	99 a1       	ldd	r25, Y+33	; 0x21
    209e:	9b a3       	std	Y+35, r25	; 0x23
    20a0:	8a a3       	std	Y+34, r24	; 0x22
    20a2:	8a a1       	ldd	r24, Y+34	; 0x22
    20a4:	9b a1       	ldd	r25, Y+35	; 0x23
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <delay_I2C+0x1ea>
    20aa:	9b a3       	std	Y+35, r25	; 0x23
    20ac:	8a a3       	std	Y+34, r24	; 0x22
    20ae:	87 c0       	rjmp	.+270    	; 0x21be <delay_I2C+0x302>
    20b0:	69 85       	ldd	r22, Y+9	; 0x09
    20b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    20b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    20b8:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	89 8b       	std	Y+17, r24	; 0x11
    20c2:	89 89       	ldd	r24, Y+17	; 0x11
    20c4:	8c a3       	std	Y+36, r24	; 0x24
    20c6:	8c a1       	ldd	r24, Y+36	; 0x24
    20c8:	8a 95       	dec	r24
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <delay_I2C+0x20c>
    20cc:	8c a3       	std	Y+36, r24	; 0x24
    20ce:	77 c0       	rjmp	.+238    	; 0x21be <delay_I2C+0x302>
    20d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    20d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    20d8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    20dc:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	ab 83       	std	Y+3, r26	; 0x03
    20e6:	bc 83       	std	Y+4, r27	; 0x04
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	4a e7       	ldi	r20, 0x7A	; 122
    20ee:	55 e4       	ldi	r21, 0x45	; 69
    20f0:	69 81       	ldd	r22, Y+1	; 0x01
    20f2:	7a 81       	ldd	r23, Y+2	; 0x02
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8d a3       	std	Y+37, r24	; 0x25
    2102:	9e a3       	std	Y+38, r25	; 0x26
    2104:	af a3       	std	Y+39, r26	; 0x27
    2106:	b8 a7       	std	Y+40, r27	; 0x28
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e8       	ldi	r20, 0x80	; 128
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	6d a1       	ldd	r22, Y+37	; 0x25
    2112:	7e a1       	ldd	r23, Y+38	; 0x26
    2114:	8f a1       	ldd	r24, Y+39	; 0x27
    2116:	98 a5       	ldd	r25, Y+40	; 0x28
    2118:	0e 94 3f 0c 	call	0x187e	; 0x187e <__cmpsf2>
    211c:	88 23       	and	r24, r24
    211e:	2c f4       	brge	.+10     	; 0x212a <delay_I2C+0x26e>
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9a a7       	std	Y+42, r25	; 0x2a
    2126:	89 a7       	std	Y+41, r24	; 0x29
    2128:	3f c0       	rjmp	.+126    	; 0x21a8 <delay_I2C+0x2ec>
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	3f ef       	ldi	r19, 0xFF	; 255
    212e:	4f e7       	ldi	r20, 0x7F	; 127
    2130:	57 e4       	ldi	r21, 0x47	; 71
    2132:	6d a1       	ldd	r22, Y+37	; 0x25
    2134:	7e a1       	ldd	r23, Y+38	; 0x26
    2136:	8f a1       	ldd	r24, Y+39	; 0x27
    2138:	98 a5       	ldd	r25, Y+40	; 0x28
    213a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__gesf2>
    213e:	18 16       	cp	r1, r24
    2140:	4c f5       	brge	.+82     	; 0x2194 <delay_I2C+0x2d8>
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e2       	ldi	r20, 0x20	; 32
    2148:	51 e4       	ldi	r21, 0x41	; 65
    214a:	69 81       	ldd	r22, Y+1	; 0x01
    214c:	7a 81       	ldd	r23, Y+2	; 0x02
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9a a7       	std	Y+42, r25	; 0x2a
    2168:	89 a7       	std	Y+41, r24	; 0x29
    216a:	0f c0       	rjmp	.+30     	; 0x218a <delay_I2C+0x2ce>
    216c:	80 e9       	ldi	r24, 0x90	; 144
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	9c a7       	std	Y+44, r25	; 0x2c
    2172:	8b a7       	std	Y+43, r24	; 0x2b
    2174:	8b a5       	ldd	r24, Y+43	; 0x2b
    2176:	9c a5       	ldd	r25, Y+44	; 0x2c
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <delay_I2C+0x2bc>
    217c:	9c a7       	std	Y+44, r25	; 0x2c
    217e:	8b a7       	std	Y+43, r24	; 0x2b
    2180:	89 a5       	ldd	r24, Y+41	; 0x29
    2182:	9a a5       	ldd	r25, Y+42	; 0x2a
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	9a a7       	std	Y+42, r25	; 0x2a
    2188:	89 a7       	std	Y+41, r24	; 0x29
    218a:	89 a5       	ldd	r24, Y+41	; 0x29
    218c:	9a a5       	ldd	r25, Y+42	; 0x2a
    218e:	89 2b       	or	r24, r25
    2190:	69 f7       	brne	.-38     	; 0x216c <delay_I2C+0x2b0>
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <delay_I2C+0x300>
    2194:	6d a1       	ldd	r22, Y+37	; 0x25
    2196:	7e a1       	ldd	r23, Y+38	; 0x26
    2198:	8f a1       	ldd	r24, Y+39	; 0x27
    219a:	98 a5       	ldd	r25, Y+40	; 0x28
    219c:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9a a7       	std	Y+42, r25	; 0x2a
    21a6:	89 a7       	std	Y+41, r24	; 0x29
    21a8:	89 a5       	ldd	r24, Y+41	; 0x29
    21aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ac:	9e a7       	std	Y+46, r25	; 0x2e
    21ae:	8d a7       	std	Y+45, r24	; 0x2d
    21b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    21b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <delay_I2C+0x2f8>
    21b8:	9e a7       	std	Y+46, r25	; 0x2e
    21ba:	8d a7       	std	Y+45, r24	; 0x2d
    21bc:	00 00       	nop
    21be:	00 00       	nop
    21c0:	ae 96       	adiw	r28, 0x2e	; 46
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	08 95       	ret

000021d2 <sendStartCondition>:
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	8a e2       	ldi	r24, 0x2A	; 42
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	2a e2       	ldi	r18, 0x2A	; 42
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	f9 01       	movw	r30, r18
    21e4:	20 81       	ld	r18, Z
    21e6:	27 7f       	andi	r18, 0xF7	; 247
    21e8:	fc 01       	movw	r30, r24
    21ea:	20 83       	st	Z, r18
    21ec:	8a e2       	ldi	r24, 0x2A	; 42
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	2a e2       	ldi	r18, 0x2A	; 42
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	f9 01       	movw	r30, r18
    21f6:	20 81       	ld	r18, Z
    21f8:	2b 7f       	andi	r18, 0xFB	; 251
    21fa:	fc 01       	movw	r30, r24
    21fc:	20 83       	st	Z, r18
    21fe:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
    2202:	8a e2       	ldi	r24, 0x2A	; 42
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	2a e2       	ldi	r18, 0x2A	; 42
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	f9 01       	movw	r30, r18
    220c:	20 81       	ld	r18, Z
    220e:	24 60       	ori	r18, 0x04	; 4
    2210:	fc 01       	movw	r30, r24
    2212:	20 83       	st	Z, r18
    2214:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
    2218:	8a e2       	ldi	r24, 0x2A	; 42
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	2a e2       	ldi	r18, 0x2A	; 42
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	f9 01       	movw	r30, r18
    2222:	20 81       	ld	r18, Z
    2224:	28 60       	ori	r18, 0x08	; 8
    2226:	fc 01       	movw	r30, r24
    2228:	20 83       	st	Z, r18
    222a:	00 00       	nop
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	08 95       	ret

00002232 <sendStopCondition>:
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	8a e2       	ldi	r24, 0x2A	; 42
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	2a e2       	ldi	r18, 0x2A	; 42
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	f9 01       	movw	r30, r18
    2244:	20 81       	ld	r18, Z
    2246:	28 60       	ori	r18, 0x08	; 8
    2248:	fc 01       	movw	r30, r24
    224a:	20 83       	st	Z, r18
    224c:	8a e2       	ldi	r24, 0x2A	; 42
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	2a e2       	ldi	r18, 0x2A	; 42
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	f9 01       	movw	r30, r18
    2256:	20 81       	ld	r18, Z
    2258:	24 60       	ori	r18, 0x04	; 4
    225a:	fc 01       	movw	r30, r24
    225c:	20 83       	st	Z, r18
    225e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
    2262:	8a e2       	ldi	r24, 0x2A	; 42
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	2a e2       	ldi	r18, 0x2A	; 42
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	f9 01       	movw	r30, r18
    226c:	20 81       	ld	r18, Z
    226e:	27 7f       	andi	r18, 0xF7	; 247
    2270:	fc 01       	movw	r30, r24
    2272:	20 83       	st	Z, r18
    2274:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
    2278:	8a e2       	ldi	r24, 0x2A	; 42
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	2a e2       	ldi	r18, 0x2A	; 42
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	f9 01       	movw	r30, r18
    2282:	20 81       	ld	r18, Z
    2284:	2b 7f       	andi	r18, 0xFB	; 251
    2286:	fc 01       	movw	r30, r24
    2288:	20 83       	st	Z, r18
    228a:	00 00       	nop
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	08 95       	ret

00002292 <sendByte>:
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	00 d0       	rcall	.+0      	; 0x2298 <sendByte+0x6>
    2298:	00 d0       	rcall	.+0      	; 0x229a <sendByte+0x8>
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	8c 83       	std	Y+4, r24	; 0x04
    22a0:	8a e2       	ldi	r24, 0x2A	; 42
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	2a e2       	ldi	r18, 0x2A	; 42
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	f9 01       	movw	r30, r18
    22aa:	20 81       	ld	r18, Z
    22ac:	28 60       	ori	r18, 0x08	; 8
    22ae:	fc 01       	movw	r30, r24
    22b0:	20 83       	st	Z, r18
    22b2:	1a 82       	std	Y+2, r1	; 0x02
    22b4:	19 82       	std	Y+1, r1	; 0x01
    22b6:	2f c0       	rjmp	.+94     	; 0x2316 <sendByte+0x84>
    22b8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
    22bc:	8c 81       	ldd	r24, Y+4	; 0x04
    22be:	88 1f       	adc	r24, r24
    22c0:	88 27       	eor	r24, r24
    22c2:	88 1f       	adc	r24, r24
    22c4:	0e 94 49 12 	call	0x2492	; 0x2492 <sendBit>
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	88 0f       	add	r24, r24
    22cc:	8c 83       	std	Y+4, r24	; 0x04
    22ce:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
    22d2:	8a e2       	ldi	r24, 0x2A	; 42
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	2a e2       	ldi	r18, 0x2A	; 42
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	f9 01       	movw	r30, r18
    22dc:	20 81       	ld	r18, Z
    22de:	27 7f       	andi	r18, 0xF7	; 247
    22e0:	fc 01       	movw	r30, r24
    22e2:	20 83       	st	Z, r18
    22e4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
    22e8:	8a e2       	ldi	r24, 0x2A	; 42
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	2a e2       	ldi	r18, 0x2A	; 42
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	f9 01       	movw	r30, r18
    22f2:	20 81       	ld	r18, Z
    22f4:	28 60       	ori	r18, 0x08	; 8
    22f6:	fc 01       	movw	r30, r24
    22f8:	20 83       	st	Z, r18
    22fa:	8a e2       	ldi	r24, 0x2A	; 42
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	2a e2       	ldi	r18, 0x2A	; 42
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	f9 01       	movw	r30, r18
    2304:	20 81       	ld	r18, Z
    2306:	24 60       	ori	r18, 0x04	; 4
    2308:	fc 01       	movw	r30, r24
    230a:	20 83       	st	Z, r18
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	9a 81       	ldd	r25, Y+2	; 0x02
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	9a 83       	std	Y+2, r25	; 0x02
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	08 97       	sbiw	r24, 0x08	; 8
    231c:	6c f2       	brlt	.-102    	; 0x22b8 <sendByte+0x26>
    231e:	8a e2       	ldi	r24, 0x2A	; 42
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	2a e2       	ldi	r18, 0x2A	; 42
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	f9 01       	movw	r30, r18
    2328:	20 81       	ld	r18, Z
    232a:	2b 7f       	andi	r18, 0xFB	; 251
    232c:	fc 01       	movw	r30, r24
    232e:	20 83       	st	Z, r18
    2330:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
    2334:	8a e2       	ldi	r24, 0x2A	; 42
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	2a e2       	ldi	r18, 0x2A	; 42
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	f9 01       	movw	r30, r18
    233e:	20 81       	ld	r18, Z
    2340:	27 7f       	andi	r18, 0xF7	; 247
    2342:	fc 01       	movw	r30, r24
    2344:	20 83       	st	Z, r18
    2346:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
    234a:	1b 82       	std	Y+3, r1	; 0x03
    234c:	89 e2       	ldi	r24, 0x29	; 41
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	fc 01       	movw	r30, r24
    2352:	80 81       	ld	r24, Z
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	84 70       	andi	r24, 0x04	; 4
    235a:	99 27       	eor	r25, r25
    235c:	89 2b       	or	r24, r25
    235e:	11 f4       	brne	.+4      	; 0x2364 <sendByte+0xd2>
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	8b 83       	std	Y+3, r24	; 0x03
    2364:	8a e2       	ldi	r24, 0x2A	; 42
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	2a e2       	ldi	r18, 0x2A	; 42
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	f9 01       	movw	r30, r18
    236e:	20 81       	ld	r18, Z
    2370:	28 60       	ori	r18, 0x08	; 8
    2372:	fc 01       	movw	r30, r24
    2374:	20 83       	st	Z, r18
    2376:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	08 95       	ret

0000238a <readRegister>:

unsigned char readRegister(unsigned char slaveAddress, unsigned char registerAddress)
{
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	27 97       	sbiw	r28, 0x07	; 7
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	8e 83       	std	Y+6, r24	; 0x06
    23a0:	6f 83       	std	Y+7, r22	; 0x07
	unsigned char byte = 0b00000000;
    23a2:	19 82       	std	Y+1, r1	; 0x01
	
	//force write mode
	unsigned char slaveAddressW = slaveAddress & 0b11111110;
    23a4:	8e 81       	ldd	r24, Y+6	; 0x06
    23a6:	8e 7f       	andi	r24, 0xFE	; 254
    23a8:	8c 83       	std	Y+4, r24	; 0x04
	
	//force read mode
	unsigned char slaveAddressR = slaveAddress | 0b00000001;
    23aa:	8e 81       	ldd	r24, Y+6	; 0x06
    23ac:	81 60       	ori	r24, 0x01	; 1
    23ae:	8d 83       	std	Y+5, r24	; 0x05
	
	SCL_LOW();
    23b0:	8a e2       	ldi	r24, 0x2A	; 42
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	2a e2       	ldi	r18, 0x2A	; 42
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	f9 01       	movw	r30, r18
    23ba:	20 81       	ld	r18, Z
    23bc:	28 60       	ori	r18, 0x08	; 8
    23be:	fc 01       	movw	r30, r24
    23c0:	20 83       	st	Z, r18
	
	//choose register
	sendStartCondition();
    23c2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <sendStartCondition>
	sendByte(slaveAddressW);
    23c6:	8c 81       	ldd	r24, Y+4	; 0x04
    23c8:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	sendByte(registerAddress);
    23cc:	8f 81       	ldd	r24, Y+7	; 0x07
    23ce:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
	
	// establish new connection
	sendStartCondition();
    23d2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <sendStartCondition>
	
	// get register from slave
	if(sendByte(slaveAddressR))
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	0e 94 49 11 	call	0x2292	; 0x2292 <sendByte>
    23dc:	88 23       	and	r24, r24
    23de:	09 f4       	brne	.+2      	; 0x23e2 <readRegister+0x58>
    23e0:	4e c0       	rjmp	.+156    	; 0x247e <readRegister+0xf4>
	{
		SCL_LOW();
    23e2:	8a e2       	ldi	r24, 0x2A	; 42
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	2a e2       	ldi	r18, 0x2A	; 42
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	f9 01       	movw	r30, r18
    23ec:	20 81       	ld	r18, Z
    23ee:	28 60       	ori	r18, 0x08	; 8
    23f0:	fc 01       	movw	r30, r24
    23f2:	20 83       	st	Z, r18
		SDA_HIGH();
    23f4:	8a e2       	ldi	r24, 0x2A	; 42
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	2a e2       	ldi	r18, 0x2A	; 42
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	f9 01       	movw	r30, r18
    23fe:	20 81       	ld	r18, Z
    2400:	2b 7f       	andi	r18, 0xFB	; 251
    2402:	fc 01       	movw	r30, r24
    2404:	20 83       	st	Z, r18
		
		// read byte from slave
		for(int i = 7; i >= 0; i--)
    2406:	87 e0       	ldi	r24, 0x07	; 7
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9b 83       	std	Y+3, r25	; 0x03
    240c:	8a 83       	std	Y+2, r24	; 0x02
    240e:	33 c0       	rjmp	.+102    	; 0x2476 <readRegister+0xec>
		{
			delay_I2C();
    2410:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
			
			SCL_HIGH();
    2414:	8a e2       	ldi	r24, 0x2A	; 42
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	2a e2       	ldi	r18, 0x2A	; 42
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	f9 01       	movw	r30, r18
    241e:	20 81       	ld	r18, Z
    2420:	27 7f       	andi	r18, 0xF7	; 247
    2422:	fc 01       	movw	r30, r24
    2424:	20 83       	st	Z, r18
			
			delay_I2C();
    2426:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <delay_I2C>
			
			byte |= (SDA_READ() << i);
    242a:	89 e2       	ldi	r24, 0x29	; 41
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	fc 01       	movw	r30, r24
    2430:	80 81       	ld	r24, Z
    2432:	88 2f       	mov	r24, r24
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	84 70       	andi	r24, 0x04	; 4
    2438:	99 27       	eor	r25, r25
    243a:	21 e0       	ldi	r18, 0x01	; 1
    243c:	89 2b       	or	r24, r25
    243e:	09 f4       	brne	.+2      	; 0x2442 <readRegister+0xb8>
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	82 2f       	mov	r24, r18
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	0a 80       	ldd	r0, Y+2	; 0x02
    2448:	02 c0       	rjmp	.+4      	; 0x244e <readRegister+0xc4>
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	0a 94       	dec	r0
    2450:	e2 f7       	brpl	.-8      	; 0x244a <readRegister+0xc0>
    2452:	98 2f       	mov	r25, r24
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	89 2b       	or	r24, r25
    2458:	89 83       	std	Y+1, r24	; 0x01
			
			SCL_LOW();
    245a:	8a e2       	ldi	r24, 0x2A	; 42
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	2a e2       	ldi	r18, 0x2A	; 42
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	f9 01       	movw	r30, r18
    2464:	20 81       	ld	r18, Z
    2466:	28 60       	ori	r18, 0x08	; 8
    2468:	fc 01       	movw	r30, r24
    246a:	20 83       	st	Z, r18
	{
		SCL_LOW();
		SDA_HIGH();
		
		// read byte from slave
		for(int i = 7; i >= 0; i--)
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	9b 81       	ldd	r25, Y+3	; 0x03
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	9b 83       	std	Y+3, r25	; 0x03
    2474:	8a 83       	std	Y+2, r24	; 0x02
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	9b 81       	ldd	r25, Y+3	; 0x03
    247a:	99 23       	and	r25, r25
    247c:	4c f6       	brge	.-110    	; 0x2410 <readRegister+0x86>
			
			SCL_LOW();
		}
	}
	
	return byte;
    247e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2480:	27 96       	adiw	r28, 0x07	; 7
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	08 95       	ret

00002492 <sendBit>:

void sendBit(char bit)
{
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	1f 92       	push	r1
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	89 83       	std	Y+1, r24	; 0x01
	if(bit == 0)
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	88 23       	and	r24, r24
    24a2:	51 f4       	brne	.+20     	; 0x24b8 <sendBit+0x26>
	{
		SDA_LOW();
    24a4:	8a e2       	ldi	r24, 0x2A	; 42
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	2a e2       	ldi	r18, 0x2A	; 42
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	f9 01       	movw	r30, r18
    24ae:	20 81       	ld	r18, Z
    24b0:	24 60       	ori	r18, 0x04	; 4
    24b2:	fc 01       	movw	r30, r24
    24b4:	20 83       	st	Z, r18
	}
	else if (bit == 1)
	{
		SDA_HIGH();
	}
    24b6:	0c c0       	rjmp	.+24     	; 0x24d0 <sendBit+0x3e>
{
	if(bit == 0)
	{
		SDA_LOW();
	}
	else if (bit == 1)
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	49 f4       	brne	.+18     	; 0x24d0 <sendBit+0x3e>
	{
		SDA_HIGH();
    24be:	8a e2       	ldi	r24, 0x2A	; 42
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	2a e2       	ldi	r18, 0x2A	; 42
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	f9 01       	movw	r30, r18
    24c8:	20 81       	ld	r18, Z
    24ca:	2b 7f       	andi	r18, 0xFB	; 251
    24cc:	fc 01       	movw	r30, r24
    24ce:	20 83       	st	Z, r18
	}
    24d0:	00 00       	nop
    24d2:	0f 90       	pop	r0
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	08 95       	ret

000024da <dtostrf>:
    24da:	ef 92       	push	r14
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	e8 01       	movw	r28, r16
    24e6:	47 fd       	sbrc	r20, 7
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <dtostrf+0x14>
    24ea:	34 e0       	ldi	r19, 0x04	; 4
    24ec:	01 c0       	rjmp	.+2      	; 0x24f0 <dtostrf+0x16>
    24ee:	34 e1       	ldi	r19, 0x14	; 20
    24f0:	04 2e       	mov	r0, r20
    24f2:	00 0c       	add	r0, r0
    24f4:	55 0b       	sbc	r21, r21
    24f6:	57 ff       	sbrs	r21, 7
    24f8:	03 c0       	rjmp	.+6      	; 0x2500 <dtostrf+0x26>
    24fa:	51 95       	neg	r21
    24fc:	41 95       	neg	r20
    24fe:	51 09       	sbc	r21, r1
    2500:	e3 2e       	mov	r14, r19
    2502:	02 2f       	mov	r16, r18
    2504:	24 2f       	mov	r18, r20
    2506:	ae 01       	movw	r20, r28
    2508:	0e 94 8d 12 	call	0x251a	; 0x251a <dtoa_prf>
    250c:	ce 01       	movw	r24, r28
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	ef 90       	pop	r14
    2518:	08 95       	ret

0000251a <dtoa_prf>:
    251a:	a9 e0       	ldi	r26, 0x09	; 9
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e3 e9       	ldi	r30, 0x93	; 147
    2520:	f2 e1       	ldi	r31, 0x12	; 18
    2522:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__prologue_saves__+0xc>
    2526:	6a 01       	movw	r12, r20
    2528:	12 2f       	mov	r17, r18
    252a:	b0 2e       	mov	r11, r16
    252c:	2b e3       	ldi	r18, 0x3B	; 59
    252e:	20 17       	cp	r18, r16
    2530:	20 f0       	brcs	.+8      	; 0x253a <dtoa_prf+0x20>
    2532:	ff 24       	eor	r15, r15
    2534:	f3 94       	inc	r15
    2536:	f0 0e       	add	r15, r16
    2538:	02 c0       	rjmp	.+4      	; 0x253e <dtoa_prf+0x24>
    253a:	2c e3       	ldi	r18, 0x3C	; 60
    253c:	f2 2e       	mov	r15, r18
    253e:	0f 2d       	mov	r16, r15
    2540:	27 e0       	ldi	r18, 0x07	; 7
    2542:	ae 01       	movw	r20, r28
    2544:	4f 5f       	subi	r20, 0xFF	; 255
    2546:	5f 4f       	sbci	r21, 0xFF	; 255
    2548:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__ftoa_engine>
    254c:	bc 01       	movw	r22, r24
    254e:	49 81       	ldd	r20, Y+1	; 0x01
    2550:	84 2f       	mov	r24, r20
    2552:	89 70       	andi	r24, 0x09	; 9
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	31 f0       	breq	.+12     	; 0x2564 <dtoa_prf+0x4a>
    2558:	e1 fc       	sbrc	r14, 1
    255a:	06 c0       	rjmp	.+12     	; 0x2568 <dtoa_prf+0x4e>
    255c:	e0 fe       	sbrs	r14, 0
    255e:	06 c0       	rjmp	.+12     	; 0x256c <dtoa_prf+0x52>
    2560:	90 e2       	ldi	r25, 0x20	; 32
    2562:	05 c0       	rjmp	.+10     	; 0x256e <dtoa_prf+0x54>
    2564:	9d e2       	ldi	r25, 0x2D	; 45
    2566:	03 c0       	rjmp	.+6      	; 0x256e <dtoa_prf+0x54>
    2568:	9b e2       	ldi	r25, 0x2B	; 43
    256a:	01 c0       	rjmp	.+2      	; 0x256e <dtoa_prf+0x54>
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	5e 2d       	mov	r21, r14
    2570:	50 71       	andi	r21, 0x10	; 16
    2572:	43 ff       	sbrs	r20, 3
    2574:	3c c0       	rjmp	.+120    	; 0x25ee <dtoa_prf+0xd4>
    2576:	91 11       	cpse	r25, r1
    2578:	02 c0       	rjmp	.+4      	; 0x257e <dtoa_prf+0x64>
    257a:	83 e0       	ldi	r24, 0x03	; 3
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <dtoa_prf+0x66>
    257e:	84 e0       	ldi	r24, 0x04	; 4
    2580:	81 17       	cp	r24, r17
    2582:	18 f4       	brcc	.+6      	; 0x258a <dtoa_prf+0x70>
    2584:	21 2f       	mov	r18, r17
    2586:	28 1b       	sub	r18, r24
    2588:	01 c0       	rjmp	.+2      	; 0x258c <dtoa_prf+0x72>
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	51 11       	cpse	r21, r1
    258e:	0b c0       	rjmp	.+22     	; 0x25a6 <dtoa_prf+0x8c>
    2590:	f6 01       	movw	r30, r12
    2592:	82 2f       	mov	r24, r18
    2594:	30 e2       	ldi	r19, 0x20	; 32
    2596:	88 23       	and	r24, r24
    2598:	19 f0       	breq	.+6      	; 0x25a0 <dtoa_prf+0x86>
    259a:	31 93       	st	Z+, r19
    259c:	81 50       	subi	r24, 0x01	; 1
    259e:	fb cf       	rjmp	.-10     	; 0x2596 <dtoa_prf+0x7c>
    25a0:	c2 0e       	add	r12, r18
    25a2:	d1 1c       	adc	r13, r1
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	99 23       	and	r25, r25
    25a8:	29 f0       	breq	.+10     	; 0x25b4 <dtoa_prf+0x9a>
    25aa:	d6 01       	movw	r26, r12
    25ac:	9c 93       	st	X, r25
    25ae:	f6 01       	movw	r30, r12
    25b0:	31 96       	adiw	r30, 0x01	; 1
    25b2:	6f 01       	movw	r12, r30
    25b4:	c6 01       	movw	r24, r12
    25b6:	03 96       	adiw	r24, 0x03	; 3
    25b8:	e2 fe       	sbrs	r14, 2
    25ba:	0a c0       	rjmp	.+20     	; 0x25d0 <dtoa_prf+0xb6>
    25bc:	3e e4       	ldi	r19, 0x4E	; 78
    25be:	d6 01       	movw	r26, r12
    25c0:	3c 93       	st	X, r19
    25c2:	41 e4       	ldi	r20, 0x41	; 65
    25c4:	11 96       	adiw	r26, 0x01	; 1
    25c6:	4c 93       	st	X, r20
    25c8:	11 97       	sbiw	r26, 0x01	; 1
    25ca:	12 96       	adiw	r26, 0x02	; 2
    25cc:	3c 93       	st	X, r19
    25ce:	06 c0       	rjmp	.+12     	; 0x25dc <dtoa_prf+0xc2>
    25d0:	3e e6       	ldi	r19, 0x6E	; 110
    25d2:	f6 01       	movw	r30, r12
    25d4:	30 83       	st	Z, r19
    25d6:	41 e6       	ldi	r20, 0x61	; 97
    25d8:	41 83       	std	Z+1, r20	; 0x01
    25da:	32 83       	std	Z+2, r19	; 0x02
    25dc:	fc 01       	movw	r30, r24
    25de:	32 2f       	mov	r19, r18
    25e0:	40 e2       	ldi	r20, 0x20	; 32
    25e2:	33 23       	and	r19, r19
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <dtoa_prf+0xce>
    25e6:	42 c0       	rjmp	.+132    	; 0x266c <dtoa_prf+0x152>
    25e8:	41 93       	st	Z+, r20
    25ea:	31 50       	subi	r19, 0x01	; 1
    25ec:	fa cf       	rjmp	.-12     	; 0x25e2 <dtoa_prf+0xc8>
    25ee:	42 ff       	sbrs	r20, 2
    25f0:	44 c0       	rjmp	.+136    	; 0x267a <dtoa_prf+0x160>
    25f2:	91 11       	cpse	r25, r1
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <dtoa_prf+0xe0>
    25f6:	83 e0       	ldi	r24, 0x03	; 3
    25f8:	01 c0       	rjmp	.+2      	; 0x25fc <dtoa_prf+0xe2>
    25fa:	84 e0       	ldi	r24, 0x04	; 4
    25fc:	81 17       	cp	r24, r17
    25fe:	18 f4       	brcc	.+6      	; 0x2606 <dtoa_prf+0xec>
    2600:	21 2f       	mov	r18, r17
    2602:	28 1b       	sub	r18, r24
    2604:	01 c0       	rjmp	.+2      	; 0x2608 <dtoa_prf+0xee>
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	51 11       	cpse	r21, r1
    260a:	0b c0       	rjmp	.+22     	; 0x2622 <dtoa_prf+0x108>
    260c:	f6 01       	movw	r30, r12
    260e:	82 2f       	mov	r24, r18
    2610:	30 e2       	ldi	r19, 0x20	; 32
    2612:	88 23       	and	r24, r24
    2614:	19 f0       	breq	.+6      	; 0x261c <dtoa_prf+0x102>
    2616:	31 93       	st	Z+, r19
    2618:	81 50       	subi	r24, 0x01	; 1
    261a:	fb cf       	rjmp	.-10     	; 0x2612 <dtoa_prf+0xf8>
    261c:	c2 0e       	add	r12, r18
    261e:	d1 1c       	adc	r13, r1
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	99 23       	and	r25, r25
    2624:	29 f0       	breq	.+10     	; 0x2630 <dtoa_prf+0x116>
    2626:	d6 01       	movw	r26, r12
    2628:	9c 93       	st	X, r25
    262a:	f6 01       	movw	r30, r12
    262c:	31 96       	adiw	r30, 0x01	; 1
    262e:	6f 01       	movw	r12, r30
    2630:	c6 01       	movw	r24, r12
    2632:	03 96       	adiw	r24, 0x03	; 3
    2634:	e2 fe       	sbrs	r14, 2
    2636:	0b c0       	rjmp	.+22     	; 0x264e <dtoa_prf+0x134>
    2638:	39 e4       	ldi	r19, 0x49	; 73
    263a:	d6 01       	movw	r26, r12
    263c:	3c 93       	st	X, r19
    263e:	3e e4       	ldi	r19, 0x4E	; 78
    2640:	11 96       	adiw	r26, 0x01	; 1
    2642:	3c 93       	st	X, r19
    2644:	11 97       	sbiw	r26, 0x01	; 1
    2646:	36 e4       	ldi	r19, 0x46	; 70
    2648:	12 96       	adiw	r26, 0x02	; 2
    264a:	3c 93       	st	X, r19
    264c:	07 c0       	rjmp	.+14     	; 0x265c <dtoa_prf+0x142>
    264e:	39 e6       	ldi	r19, 0x69	; 105
    2650:	f6 01       	movw	r30, r12
    2652:	30 83       	st	Z, r19
    2654:	3e e6       	ldi	r19, 0x6E	; 110
    2656:	31 83       	std	Z+1, r19	; 0x01
    2658:	36 e6       	ldi	r19, 0x66	; 102
    265a:	32 83       	std	Z+2, r19	; 0x02
    265c:	fc 01       	movw	r30, r24
    265e:	32 2f       	mov	r19, r18
    2660:	40 e2       	ldi	r20, 0x20	; 32
    2662:	33 23       	and	r19, r19
    2664:	19 f0       	breq	.+6      	; 0x266c <dtoa_prf+0x152>
    2666:	41 93       	st	Z+, r20
    2668:	31 50       	subi	r19, 0x01	; 1
    266a:	fb cf       	rjmp	.-10     	; 0x2662 <dtoa_prf+0x148>
    266c:	fc 01       	movw	r30, r24
    266e:	e2 0f       	add	r30, r18
    2670:	f1 1d       	adc	r31, r1
    2672:	10 82       	st	Z, r1
    2674:	8e ef       	ldi	r24, 0xFE	; 254
    2676:	9f ef       	ldi	r25, 0xFF	; 255
    2678:	a6 c0       	rjmp	.+332    	; 0x27c6 <dtoa_prf+0x2ac>
    267a:	21 e0       	ldi	r18, 0x01	; 1
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	91 11       	cpse	r25, r1
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <dtoa_prf+0x16c>
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	16 16       	cp	r1, r22
    2688:	17 06       	cpc	r1, r23
    268a:	1c f4       	brge	.+6      	; 0x2692 <dtoa_prf+0x178>
    268c:	fb 01       	movw	r30, r22
    268e:	31 96       	adiw	r30, 0x01	; 1
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <dtoa_prf+0x17c>
    2692:	e1 e0       	ldi	r30, 0x01	; 1
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	2e 0f       	add	r18, r30
    2698:	3f 1f       	adc	r19, r31
    269a:	bb 20       	and	r11, r11
    269c:	21 f0       	breq	.+8      	; 0x26a6 <dtoa_prf+0x18c>
    269e:	eb 2d       	mov	r30, r11
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	31 96       	adiw	r30, 0x01	; 1
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <dtoa_prf+0x190>
    26a6:	e0 e0       	ldi	r30, 0x00	; 0
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	2e 0f       	add	r18, r30
    26ac:	3f 1f       	adc	r19, r31
    26ae:	e1 2f       	mov	r30, r17
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	2e 17       	cp	r18, r30
    26b4:	3f 07       	cpc	r19, r31
    26b6:	1c f4       	brge	.+6      	; 0x26be <dtoa_prf+0x1a4>
    26b8:	12 1b       	sub	r17, r18
    26ba:	21 2f       	mov	r18, r17
    26bc:	01 c0       	rjmp	.+2      	; 0x26c0 <dtoa_prf+0x1a6>
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	8e 2d       	mov	r24, r14
    26c2:	88 71       	andi	r24, 0x18	; 24
    26c4:	59 f4       	brne	.+22     	; 0x26dc <dtoa_prf+0x1c2>
    26c6:	f6 01       	movw	r30, r12
    26c8:	82 2f       	mov	r24, r18
    26ca:	30 e2       	ldi	r19, 0x20	; 32
    26cc:	88 23       	and	r24, r24
    26ce:	19 f0       	breq	.+6      	; 0x26d6 <dtoa_prf+0x1bc>
    26d0:	31 93       	st	Z+, r19
    26d2:	81 50       	subi	r24, 0x01	; 1
    26d4:	fb cf       	rjmp	.-10     	; 0x26cc <dtoa_prf+0x1b2>
    26d6:	c2 0e       	add	r12, r18
    26d8:	d1 1c       	adc	r13, r1
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	99 23       	and	r25, r25
    26de:	29 f0       	breq	.+10     	; 0x26ea <dtoa_prf+0x1d0>
    26e0:	d6 01       	movw	r26, r12
    26e2:	9c 93       	st	X, r25
    26e4:	f6 01       	movw	r30, r12
    26e6:	31 96       	adiw	r30, 0x01	; 1
    26e8:	6f 01       	movw	r12, r30
    26ea:	51 11       	cpse	r21, r1
    26ec:	0b c0       	rjmp	.+22     	; 0x2704 <dtoa_prf+0x1ea>
    26ee:	f6 01       	movw	r30, r12
    26f0:	82 2f       	mov	r24, r18
    26f2:	90 e3       	ldi	r25, 0x30	; 48
    26f4:	88 23       	and	r24, r24
    26f6:	19 f0       	breq	.+6      	; 0x26fe <dtoa_prf+0x1e4>
    26f8:	91 93       	st	Z+, r25
    26fa:	81 50       	subi	r24, 0x01	; 1
    26fc:	fb cf       	rjmp	.-10     	; 0x26f4 <dtoa_prf+0x1da>
    26fe:	c2 0e       	add	r12, r18
    2700:	d1 1c       	adc	r13, r1
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	0f 2d       	mov	r16, r15
    2706:	06 0f       	add	r16, r22
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	34 2f       	mov	r19, r20
    270c:	30 71       	andi	r19, 0x10	; 16
    270e:	44 ff       	sbrs	r20, 4
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <dtoa_prf+0x1fe>
    2712:	91 33       	cpi	r25, 0x31	; 49
    2714:	09 f4       	brne	.+2      	; 0x2718 <dtoa_prf+0x1fe>
    2716:	01 50       	subi	r16, 0x01	; 1
    2718:	10 16       	cp	r1, r16
    271a:	24 f4       	brge	.+8      	; 0x2724 <dtoa_prf+0x20a>
    271c:	09 30       	cpi	r16, 0x09	; 9
    271e:	18 f0       	brcs	.+6      	; 0x2726 <dtoa_prf+0x20c>
    2720:	08 e0       	ldi	r16, 0x08	; 8
    2722:	01 c0       	rjmp	.+2      	; 0x2726 <dtoa_prf+0x20c>
    2724:	01 e0       	ldi	r16, 0x01	; 1
    2726:	ab 01       	movw	r20, r22
    2728:	77 ff       	sbrs	r23, 7
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <dtoa_prf+0x216>
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	50 e0       	ldi	r21, 0x00	; 0
    2730:	fb 01       	movw	r30, r22
    2732:	e4 1b       	sub	r30, r20
    2734:	f5 0b       	sbc	r31, r21
    2736:	a1 e0       	ldi	r26, 0x01	; 1
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	ac 0f       	add	r26, r28
    273c:	bd 1f       	adc	r27, r29
    273e:	ea 0f       	add	r30, r26
    2740:	fb 1f       	adc	r31, r27
    2742:	8e e2       	ldi	r24, 0x2E	; 46
    2744:	a8 2e       	mov	r10, r24
    2746:	4b 01       	movw	r8, r22
    2748:	80 1a       	sub	r8, r16
    274a:	91 08       	sbc	r9, r1
    274c:	0b 2d       	mov	r16, r11
    274e:	10 e0       	ldi	r17, 0x00	; 0
    2750:	11 95       	neg	r17
    2752:	01 95       	neg	r16
    2754:	11 09       	sbc	r17, r1
    2756:	4f 3f       	cpi	r20, 0xFF	; 255
    2758:	bf ef       	ldi	r27, 0xFF	; 255
    275a:	5b 07       	cpc	r21, r27
    275c:	21 f4       	brne	.+8      	; 0x2766 <dtoa_prf+0x24c>
    275e:	d6 01       	movw	r26, r12
    2760:	ac 92       	st	X, r10
    2762:	11 96       	adiw	r26, 0x01	; 1
    2764:	6d 01       	movw	r12, r26
    2766:	64 17       	cp	r22, r20
    2768:	75 07       	cpc	r23, r21
    276a:	2c f0       	brlt	.+10     	; 0x2776 <dtoa_prf+0x25c>
    276c:	84 16       	cp	r8, r20
    276e:	95 06       	cpc	r9, r21
    2770:	14 f4       	brge	.+4      	; 0x2776 <dtoa_prf+0x25c>
    2772:	81 81       	ldd	r24, Z+1	; 0x01
    2774:	01 c0       	rjmp	.+2      	; 0x2778 <dtoa_prf+0x25e>
    2776:	80 e3       	ldi	r24, 0x30	; 48
    2778:	41 50       	subi	r20, 0x01	; 1
    277a:	51 09       	sbc	r21, r1
    277c:	31 96       	adiw	r30, 0x01	; 1
    277e:	d6 01       	movw	r26, r12
    2780:	11 96       	adiw	r26, 0x01	; 1
    2782:	7d 01       	movw	r14, r26
    2784:	40 17       	cp	r20, r16
    2786:	51 07       	cpc	r21, r17
    2788:	24 f0       	brlt	.+8      	; 0x2792 <dtoa_prf+0x278>
    278a:	d6 01       	movw	r26, r12
    278c:	8c 93       	st	X, r24
    278e:	67 01       	movw	r12, r14
    2790:	e2 cf       	rjmp	.-60     	; 0x2756 <dtoa_prf+0x23c>
    2792:	64 17       	cp	r22, r20
    2794:	75 07       	cpc	r23, r21
    2796:	39 f4       	brne	.+14     	; 0x27a6 <dtoa_prf+0x28c>
    2798:	96 33       	cpi	r25, 0x36	; 54
    279a:	20 f4       	brcc	.+8      	; 0x27a4 <dtoa_prf+0x28a>
    279c:	95 33       	cpi	r25, 0x35	; 53
    279e:	19 f4       	brne	.+6      	; 0x27a6 <dtoa_prf+0x28c>
    27a0:	31 11       	cpse	r19, r1
    27a2:	01 c0       	rjmp	.+2      	; 0x27a6 <dtoa_prf+0x28c>
    27a4:	81 e3       	ldi	r24, 0x31	; 49
    27a6:	f6 01       	movw	r30, r12
    27a8:	80 83       	st	Z, r24
    27aa:	f7 01       	movw	r30, r14
    27ac:	82 2f       	mov	r24, r18
    27ae:	90 e2       	ldi	r25, 0x20	; 32
    27b0:	88 23       	and	r24, r24
    27b2:	19 f0       	breq	.+6      	; 0x27ba <dtoa_prf+0x2a0>
    27b4:	91 93       	st	Z+, r25
    27b6:	81 50       	subi	r24, 0x01	; 1
    27b8:	fb cf       	rjmp	.-10     	; 0x27b0 <dtoa_prf+0x296>
    27ba:	f7 01       	movw	r30, r14
    27bc:	e2 0f       	add	r30, r18
    27be:	f1 1d       	adc	r31, r1
    27c0:	10 82       	st	Z, r1
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	29 96       	adiw	r28, 0x09	; 9
    27c8:	ec e0       	ldi	r30, 0x0C	; 12
    27ca:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__epilogue_restores__+0xc>

000027ce <__ftoa_engine>:
    27ce:	28 30       	cpi	r18, 0x08	; 8
    27d0:	08 f0       	brcs	.+2      	; 0x27d4 <__ftoa_engine+0x6>
    27d2:	27 e0       	ldi	r18, 0x07	; 7
    27d4:	33 27       	eor	r19, r19
    27d6:	da 01       	movw	r26, r20
    27d8:	99 0f       	add	r25, r25
    27da:	31 1d       	adc	r19, r1
    27dc:	87 fd       	sbrc	r24, 7
    27de:	91 60       	ori	r25, 0x01	; 1
    27e0:	00 96       	adiw	r24, 0x00	; 0
    27e2:	61 05       	cpc	r22, r1
    27e4:	71 05       	cpc	r23, r1
    27e6:	39 f4       	brne	.+14     	; 0x27f6 <__ftoa_engine+0x28>
    27e8:	32 60       	ori	r19, 0x02	; 2
    27ea:	2e 5f       	subi	r18, 0xFE	; 254
    27ec:	3d 93       	st	X+, r19
    27ee:	30 e3       	ldi	r19, 0x30	; 48
    27f0:	2a 95       	dec	r18
    27f2:	e1 f7       	brne	.-8      	; 0x27ec <__ftoa_engine+0x1e>
    27f4:	08 95       	ret
    27f6:	9f 3f       	cpi	r25, 0xFF	; 255
    27f8:	30 f0       	brcs	.+12     	; 0x2806 <__ftoa_engine+0x38>
    27fa:	80 38       	cpi	r24, 0x80	; 128
    27fc:	71 05       	cpc	r23, r1
    27fe:	61 05       	cpc	r22, r1
    2800:	09 f0       	breq	.+2      	; 0x2804 <__ftoa_engine+0x36>
    2802:	3c 5f       	subi	r19, 0xFC	; 252
    2804:	3c 5f       	subi	r19, 0xFC	; 252
    2806:	3d 93       	st	X+, r19
    2808:	91 30       	cpi	r25, 0x01	; 1
    280a:	08 f0       	brcs	.+2      	; 0x280e <__ftoa_engine+0x40>
    280c:	80 68       	ori	r24, 0x80	; 128
    280e:	91 1d       	adc	r25, r1
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	1f 93       	push	r17
    2816:	0f 93       	push	r16
    2818:	ff 92       	push	r15
    281a:	ef 92       	push	r14
    281c:	19 2f       	mov	r17, r25
    281e:	98 7f       	andi	r25, 0xF8	; 248
    2820:	96 95       	lsr	r25
    2822:	e9 2f       	mov	r30, r25
    2824:	96 95       	lsr	r25
    2826:	96 95       	lsr	r25
    2828:	e9 0f       	add	r30, r25
    282a:	ff 27       	eor	r31, r31
    282c:	ee 53       	subi	r30, 0x3E	; 62
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	99 27       	eor	r25, r25
    2832:	33 27       	eor	r19, r19
    2834:	ee 24       	eor	r14, r14
    2836:	ff 24       	eor	r15, r15
    2838:	a7 01       	movw	r20, r14
    283a:	e7 01       	movw	r28, r14
    283c:	05 90       	lpm	r0, Z+
    283e:	08 94       	sec
    2840:	07 94       	ror	r0
    2842:	28 f4       	brcc	.+10     	; 0x284e <__ftoa_engine+0x80>
    2844:	36 0f       	add	r19, r22
    2846:	e7 1e       	adc	r14, r23
    2848:	f8 1e       	adc	r15, r24
    284a:	49 1f       	adc	r20, r25
    284c:	51 1d       	adc	r21, r1
    284e:	66 0f       	add	r22, r22
    2850:	77 1f       	adc	r23, r23
    2852:	88 1f       	adc	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	06 94       	lsr	r0
    2858:	a1 f7       	brne	.-24     	; 0x2842 <__ftoa_engine+0x74>
    285a:	05 90       	lpm	r0, Z+
    285c:	07 94       	ror	r0
    285e:	28 f4       	brcc	.+10     	; 0x286a <__ftoa_engine+0x9c>
    2860:	e7 0e       	add	r14, r23
    2862:	f8 1e       	adc	r15, r24
    2864:	49 1f       	adc	r20, r25
    2866:	56 1f       	adc	r21, r22
    2868:	c1 1d       	adc	r28, r1
    286a:	77 0f       	add	r23, r23
    286c:	88 1f       	adc	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	66 1f       	adc	r22, r22
    2872:	06 94       	lsr	r0
    2874:	a1 f7       	brne	.-24     	; 0x285e <__ftoa_engine+0x90>
    2876:	05 90       	lpm	r0, Z+
    2878:	07 94       	ror	r0
    287a:	28 f4       	brcc	.+10     	; 0x2886 <__ftoa_engine+0xb8>
    287c:	f8 0e       	add	r15, r24
    287e:	49 1f       	adc	r20, r25
    2880:	56 1f       	adc	r21, r22
    2882:	c7 1f       	adc	r28, r23
    2884:	d1 1d       	adc	r29, r1
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	66 1f       	adc	r22, r22
    288c:	77 1f       	adc	r23, r23
    288e:	06 94       	lsr	r0
    2890:	a1 f7       	brne	.-24     	; 0x287a <__ftoa_engine+0xac>
    2892:	05 90       	lpm	r0, Z+
    2894:	07 94       	ror	r0
    2896:	20 f4       	brcc	.+8      	; 0x28a0 <__ftoa_engine+0xd2>
    2898:	49 0f       	add	r20, r25
    289a:	56 1f       	adc	r21, r22
    289c:	c7 1f       	adc	r28, r23
    289e:	d8 1f       	adc	r29, r24
    28a0:	99 0f       	add	r25, r25
    28a2:	66 1f       	adc	r22, r22
    28a4:	77 1f       	adc	r23, r23
    28a6:	88 1f       	adc	r24, r24
    28a8:	06 94       	lsr	r0
    28aa:	a9 f7       	brne	.-22     	; 0x2896 <__ftoa_engine+0xc8>
    28ac:	84 91       	lpm	r24, Z
    28ae:	10 95       	com	r17
    28b0:	17 70       	andi	r17, 0x07	; 7
    28b2:	41 f0       	breq	.+16     	; 0x28c4 <__ftoa_engine+0xf6>
    28b4:	d6 95       	lsr	r29
    28b6:	c7 95       	ror	r28
    28b8:	57 95       	ror	r21
    28ba:	47 95       	ror	r20
    28bc:	f7 94       	ror	r15
    28be:	e7 94       	ror	r14
    28c0:	1a 95       	dec	r17
    28c2:	c1 f7       	brne	.-16     	; 0x28b4 <__ftoa_engine+0xe6>
    28c4:	e8 e6       	ldi	r30, 0x68	; 104
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	68 94       	set
    28ca:	15 90       	lpm	r1, Z+
    28cc:	15 91       	lpm	r17, Z+
    28ce:	35 91       	lpm	r19, Z+
    28d0:	65 91       	lpm	r22, Z+
    28d2:	95 91       	lpm	r25, Z+
    28d4:	05 90       	lpm	r0, Z+
    28d6:	7f e2       	ldi	r23, 0x2F	; 47
    28d8:	73 95       	inc	r23
    28da:	e1 18       	sub	r14, r1
    28dc:	f1 0a       	sbc	r15, r17
    28de:	43 0b       	sbc	r20, r19
    28e0:	56 0b       	sbc	r21, r22
    28e2:	c9 0b       	sbc	r28, r25
    28e4:	d0 09       	sbc	r29, r0
    28e6:	c0 f7       	brcc	.-16     	; 0x28d8 <__ftoa_engine+0x10a>
    28e8:	e1 0c       	add	r14, r1
    28ea:	f1 1e       	adc	r15, r17
    28ec:	43 1f       	adc	r20, r19
    28ee:	56 1f       	adc	r21, r22
    28f0:	c9 1f       	adc	r28, r25
    28f2:	d0 1d       	adc	r29, r0
    28f4:	7e f4       	brtc	.+30     	; 0x2914 <__ftoa_engine+0x146>
    28f6:	70 33       	cpi	r23, 0x30	; 48
    28f8:	11 f4       	brne	.+4      	; 0x28fe <__ftoa_engine+0x130>
    28fa:	8a 95       	dec	r24
    28fc:	e6 cf       	rjmp	.-52     	; 0x28ca <__ftoa_engine+0xfc>
    28fe:	e8 94       	clt
    2900:	01 50       	subi	r16, 0x01	; 1
    2902:	30 f0       	brcs	.+12     	; 0x2910 <__ftoa_engine+0x142>
    2904:	08 0f       	add	r16, r24
    2906:	0a f4       	brpl	.+2      	; 0x290a <__ftoa_engine+0x13c>
    2908:	00 27       	eor	r16, r16
    290a:	02 17       	cp	r16, r18
    290c:	08 f4       	brcc	.+2      	; 0x2910 <__ftoa_engine+0x142>
    290e:	20 2f       	mov	r18, r16
    2910:	23 95       	inc	r18
    2912:	02 2f       	mov	r16, r18
    2914:	7a 33       	cpi	r23, 0x3A	; 58
    2916:	28 f0       	brcs	.+10     	; 0x2922 <__ftoa_engine+0x154>
    2918:	79 e3       	ldi	r23, 0x39	; 57
    291a:	7d 93       	st	X+, r23
    291c:	2a 95       	dec	r18
    291e:	e9 f7       	brne	.-6      	; 0x291a <__ftoa_engine+0x14c>
    2920:	10 c0       	rjmp	.+32     	; 0x2942 <__ftoa_engine+0x174>
    2922:	7d 93       	st	X+, r23
    2924:	2a 95       	dec	r18
    2926:	89 f6       	brne	.-94     	; 0x28ca <__ftoa_engine+0xfc>
    2928:	06 94       	lsr	r0
    292a:	97 95       	ror	r25
    292c:	67 95       	ror	r22
    292e:	37 95       	ror	r19
    2930:	17 95       	ror	r17
    2932:	17 94       	ror	r1
    2934:	e1 18       	sub	r14, r1
    2936:	f1 0a       	sbc	r15, r17
    2938:	43 0b       	sbc	r20, r19
    293a:	56 0b       	sbc	r21, r22
    293c:	c9 0b       	sbc	r28, r25
    293e:	d0 09       	sbc	r29, r0
    2940:	98 f0       	brcs	.+38     	; 0x2968 <__ftoa_engine+0x19a>
    2942:	23 95       	inc	r18
    2944:	7e 91       	ld	r23, -X
    2946:	73 95       	inc	r23
    2948:	7a 33       	cpi	r23, 0x3A	; 58
    294a:	08 f0       	brcs	.+2      	; 0x294e <__ftoa_engine+0x180>
    294c:	70 e3       	ldi	r23, 0x30	; 48
    294e:	7c 93       	st	X, r23
    2950:	20 13       	cpse	r18, r16
    2952:	b8 f7       	brcc	.-18     	; 0x2942 <__ftoa_engine+0x174>
    2954:	7e 91       	ld	r23, -X
    2956:	70 61       	ori	r23, 0x10	; 16
    2958:	7d 93       	st	X+, r23
    295a:	30 f0       	brcs	.+12     	; 0x2968 <__ftoa_engine+0x19a>
    295c:	83 95       	inc	r24
    295e:	71 e3       	ldi	r23, 0x31	; 49
    2960:	7d 93       	st	X+, r23
    2962:	70 e3       	ldi	r23, 0x30	; 48
    2964:	2a 95       	dec	r18
    2966:	e1 f7       	brne	.-8      	; 0x2960 <__ftoa_engine+0x192>
    2968:	11 24       	eor	r1, r1
    296a:	ef 90       	pop	r14
    296c:	ff 90       	pop	r15
    296e:	0f 91       	pop	r16
    2970:	1f 91       	pop	r17
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	99 27       	eor	r25, r25
    2978:	87 fd       	sbrc	r24, 7
    297a:	90 95       	com	r25
    297c:	08 95       	ret

0000297e <__prologue_saves__>:
    297e:	2f 92       	push	r2
    2980:	3f 92       	push	r3
    2982:	4f 92       	push	r4
    2984:	5f 92       	push	r5
    2986:	6f 92       	push	r6
    2988:	7f 92       	push	r7
    298a:	8f 92       	push	r8
    298c:	9f 92       	push	r9
    298e:	af 92       	push	r10
    2990:	bf 92       	push	r11
    2992:	cf 92       	push	r12
    2994:	df 92       	push	r13
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	ca 1b       	sub	r28, r26
    29a8:	db 0b       	sbc	r29, r27
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	09 94       	ijmp

000029b6 <__epilogue_restores__>:
    29b6:	2a 88       	ldd	r2, Y+18	; 0x12
    29b8:	39 88       	ldd	r3, Y+17	; 0x11
    29ba:	48 88       	ldd	r4, Y+16	; 0x10
    29bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    29be:	6e 84       	ldd	r6, Y+14	; 0x0e
    29c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    29c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    29c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    29c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    29c8:	b9 84       	ldd	r11, Y+9	; 0x09
    29ca:	c8 84       	ldd	r12, Y+8	; 0x08
    29cc:	df 80       	ldd	r13, Y+7	; 0x07
    29ce:	ee 80       	ldd	r14, Y+6	; 0x06
    29d0:	fd 80       	ldd	r15, Y+5	; 0x05
    29d2:	0c 81       	ldd	r16, Y+4	; 0x04
    29d4:	1b 81       	ldd	r17, Y+3	; 0x03
    29d6:	aa 81       	ldd	r26, Y+2	; 0x02
    29d8:	b9 81       	ldd	r27, Y+1	; 0x01
    29da:	ce 0f       	add	r28, r30
    29dc:	d1 1d       	adc	r29, r1
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	ed 01       	movw	r28, r26
    29ea:	08 95       	ret

000029ec <_exit>:
    29ec:	f8 94       	cli

000029ee <__stop_program>:
    29ee:	ff cf       	rjmp	.-2      	; 0x29ee <__stop_program>
