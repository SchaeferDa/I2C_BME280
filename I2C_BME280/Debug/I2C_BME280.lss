
I2C_BME280.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000019fe  00001a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010a  0080010a  00001a9c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001817  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b22  00000000  00000000  0000346f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e2f  00000000  00000000  00003f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00004dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000779  00000000  00000000  0000510c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aea  00000000  00000000  00005885  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000636f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ef       	ldi	r30, 0xFE	; 254
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 30       	cpi	r26, 0x0A	; 10
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e0       	ldi	r26, 0x0A	; 10
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 31       	cpi	r26, 0x17	; 23
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 04 03 	call	0x608	; 0x608 <main>
      9e:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initBME280>:
int16_t dig_T2;
int16_t dig_T3;
int32_t t_fine;

void initBME280(char address)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	1f 92       	push	r1
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
	slaveAddressR = address | 0b00000001;
      b2:	89 81       	ldd	r24, Y+1	; 0x01
      b4:	81 60       	ori	r24, 0x01	; 1
      b6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	slaveAddressW = address & 0b11111110;
      ba:	89 81       	ldd	r24, Y+1	; 0x01
      bc:	8e 7f       	andi	r24, 0xFE	; 254
      be:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <slaveAddressW>
}
      c2:	00 00       	nop
      c4:	0f 90       	pop	r0
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <configBME280ForTemperatureMeasurement>:

void configBME280ForTemperatureMeasurement()
{
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
	// T_oversampling = x1; P_oversampling = x1; activate sleep mode
	writeToRegister(0xF4, 0b00100100);
      d4:	64 e2       	ldi	r22, 0x24	; 36
      d6:	84 ef       	ldi	r24, 0xF4	; 244
      d8:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeToRegister>
	
	// filter = 2
	writeToRegister(0xF5, 0b00000100);
      dc:	64 e0       	ldi	r22, 0x04	; 4
      de:	85 ef       	ldi	r24, 0xF5	; 245
      e0:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeToRegister>
	
	// T_oversampling = x1; P_oversampling = x1; activate forced mode
	writeToRegister(0xF4, 0b00100101);
      e4:	65 e2       	ldi	r22, 0x25	; 37
      e6:	84 ef       	ldi	r24, 0xF4	; 244
      e8:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeToRegister>
	
	// get calibration values
	getCalibrationValues();
      ec:	0e 94 80 01 	call	0x300	; 0x300 <getCalibrationValues>
}
      f0:	00 00       	nop
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <writeToRegister>:

boolean writeToRegister(char registerAddress, char data)
{
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	00 d0       	rcall	.+0      	; 0xfe <writeToRegister+0x6>
      fe:	1f 92       	push	r1
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	8a 83       	std	Y+2, r24	; 0x02
     106:	6b 83       	std	Y+3, r22	; 0x03
	boolean state = FALSE;
     108:	19 82       	std	Y+1, r1	; 0x01
	
	sendStartCondition();
     10a:	0e 94 d4 06 	call	0xda8	; 0xda8 <sendStartCondition>
	
	if(sendByte(slaveAddressW) && sendByte(registerAddress) && sendByte(data))
     10e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <slaveAddressW>
     112:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
     116:	88 23       	and	r24, r24
     118:	61 f0       	breq	.+24     	; 0x132 <writeToRegister+0x3a>
     11a:	8a 81       	ldd	r24, Y+2	; 0x02
     11c:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
     120:	88 23       	and	r24, r24
     122:	39 f0       	breq	.+14     	; 0x132 <writeToRegister+0x3a>
     124:	8b 81       	ldd	r24, Y+3	; 0x03
     126:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
     12a:	88 23       	and	r24, r24
     12c:	11 f0       	breq	.+4      	; 0x132 <writeToRegister+0x3a>
		state = TRUE;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	89 83       	std	Y+1, r24	; 0x01
	
	sendStopCondition();
     132:	0e 94 04 07 	call	0xe08	; 0xe08 <sendStopCondition>
	
	return state;
     136:	89 81       	ldd	r24, Y+1	; 0x01
}
     138:	0f 90       	pop	r0
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <getTemperature>:

int32_t getTemperature()
{
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	00 d0       	rcall	.+0      	; 0x14a <getTemperature+0x6>
     14a:	00 d0       	rcall	.+0      	; 0x14c <getTemperature+0x8>
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
	// initiate measurement
	writeToRegister(0xF4, 0b00100001);
     150:	61 e2       	ldi	r22, 0x21	; 33
     152:	84 ef       	ldi	r24, 0xF4	; 244
     154:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeToRegister>
	
	int32_t temp = 0;
     158:	19 82       	std	Y+1, r1	; 0x01
     15a:	1a 82       	std	Y+2, r1	; 0x02
     15c:	1b 82       	std	Y+3, r1	; 0x03
     15e:	1c 82       	std	Y+4, r1	; 0x04
	
	temp |= (readRegister(slaveAddressW, 0xFA) << 12);
     160:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <slaveAddressW>
     164:	6a ef       	ldi	r22, 0xFA	; 250
     166:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	98 2f       	mov	r25, r24
     170:	88 27       	eor	r24, r24
     172:	92 95       	swap	r25
     174:	90 7f       	andi	r25, 0xF0	; 240
     176:	09 2e       	mov	r0, r25
     178:	00 0c       	add	r0, r0
     17a:	aa 0b       	sbc	r26, r26
     17c:	bb 0b       	sbc	r27, r27
     17e:	29 81       	ldd	r18, Y+1	; 0x01
     180:	3a 81       	ldd	r19, Y+2	; 0x02
     182:	4b 81       	ldd	r20, Y+3	; 0x03
     184:	5c 81       	ldd	r21, Y+4	; 0x04
     186:	82 2b       	or	r24, r18
     188:	93 2b       	or	r25, r19
     18a:	a4 2b       	or	r26, r20
     18c:	b5 2b       	or	r27, r21
     18e:	89 83       	std	Y+1, r24	; 0x01
     190:	9a 83       	std	Y+2, r25	; 0x02
     192:	ab 83       	std	Y+3, r26	; 0x03
     194:	bc 83       	std	Y+4, r27	; 0x04
	temp |= (readRegister(slaveAddressW, 0xFB) << 4);
     196:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <slaveAddressW>
     19a:	6b ef       	ldi	r22, 0xFB	; 251
     19c:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	82 95       	swap	r24
     1a6:	92 95       	swap	r25
     1a8:	90 7f       	andi	r25, 0xF0	; 240
     1aa:	98 27       	eor	r25, r24
     1ac:	80 7f       	andi	r24, 0xF0	; 240
     1ae:	98 27       	eor	r25, r24
     1b0:	09 2e       	mov	r0, r25
     1b2:	00 0c       	add	r0, r0
     1b4:	aa 0b       	sbc	r26, r26
     1b6:	bb 0b       	sbc	r27, r27
     1b8:	29 81       	ldd	r18, Y+1	; 0x01
     1ba:	3a 81       	ldd	r19, Y+2	; 0x02
     1bc:	4b 81       	ldd	r20, Y+3	; 0x03
     1be:	5c 81       	ldd	r21, Y+4	; 0x04
     1c0:	82 2b       	or	r24, r18
     1c2:	93 2b       	or	r25, r19
     1c4:	a4 2b       	or	r26, r20
     1c6:	b5 2b       	or	r27, r21
     1c8:	89 83       	std	Y+1, r24	; 0x01
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	ab 83       	std	Y+3, r26	; 0x03
     1ce:	bc 83       	std	Y+4, r27	; 0x04
	temp |= readRegister(slaveAddressW, 0xFC) >> 4;
     1d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <slaveAddressW>
     1d4:	6c ef       	ldi	r22, 0xFC	; 252
     1d6:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     1da:	82 95       	swap	r24
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	88 2f       	mov	r24, r24
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	09 2e       	mov	r0, r25
     1e4:	00 0c       	add	r0, r0
     1e6:	aa 0b       	sbc	r26, r26
     1e8:	bb 0b       	sbc	r27, r27
     1ea:	29 81       	ldd	r18, Y+1	; 0x01
     1ec:	3a 81       	ldd	r19, Y+2	; 0x02
     1ee:	4b 81       	ldd	r20, Y+3	; 0x03
     1f0:	5c 81       	ldd	r21, Y+4	; 0x04
     1f2:	82 2b       	or	r24, r18
     1f4:	93 2b       	or	r25, r19
     1f6:	a4 2b       	or	r26, r20
     1f8:	b5 2b       	or	r27, r21
     1fa:	89 83       	std	Y+1, r24	; 0x01
     1fc:	9a 83       	std	Y+2, r25	; 0x02
     1fe:	ab 83       	std	Y+3, r26	; 0x03
     200:	bc 83       	std	Y+4, r27	; 0x04
	
	return BME280_compensate_T_int32(temp);
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02
     206:	ab 81       	ldd	r26, Y+3	; 0x03
     208:	bc 81       	ldd	r27, Y+4	; 0x04
     20a:	bc 01       	movw	r22, r24
     20c:	cd 01       	movw	r24, r26
     20e:	0e 94 01 02 	call	0x402	; 0x402 <BME280_compensate_T_int32>
     212:	dc 01       	movw	r26, r24
     214:	cb 01       	movw	r24, r22
}
     216:	bc 01       	movw	r22, r24
     218:	cd 01       	movw	r24, r26
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <getRawTemperature>:

int32_t getRawTemperature()
{
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	00 d0       	rcall	.+0      	; 0x22e <getRawTemperature+0x6>
     22e:	00 d0       	rcall	.+0      	; 0x230 <getRawTemperature+0x8>
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
	// initiate measurement
	writeToRegister(0xF4, 0b00100001);
     234:	61 e2       	ldi	r22, 0x21	; 33
     236:	84 ef       	ldi	r24, 0xF4	; 244
     238:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeToRegister>
	
	int32_t temp = 0;
     23c:	19 82       	std	Y+1, r1	; 0x01
     23e:	1a 82       	std	Y+2, r1	; 0x02
     240:	1b 82       	std	Y+3, r1	; 0x03
     242:	1c 82       	std	Y+4, r1	; 0x04
	
	temp |= (readRegister(slaveAddressW, 0xFA) << 12);
     244:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <slaveAddressW>
     248:	6a ef       	ldi	r22, 0xFA	; 250
     24a:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     24e:	88 2f       	mov	r24, r24
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	98 2f       	mov	r25, r24
     254:	88 27       	eor	r24, r24
     256:	92 95       	swap	r25
     258:	90 7f       	andi	r25, 0xF0	; 240
     25a:	09 2e       	mov	r0, r25
     25c:	00 0c       	add	r0, r0
     25e:	aa 0b       	sbc	r26, r26
     260:	bb 0b       	sbc	r27, r27
     262:	29 81       	ldd	r18, Y+1	; 0x01
     264:	3a 81       	ldd	r19, Y+2	; 0x02
     266:	4b 81       	ldd	r20, Y+3	; 0x03
     268:	5c 81       	ldd	r21, Y+4	; 0x04
     26a:	82 2b       	or	r24, r18
     26c:	93 2b       	or	r25, r19
     26e:	a4 2b       	or	r26, r20
     270:	b5 2b       	or	r27, r21
     272:	89 83       	std	Y+1, r24	; 0x01
     274:	9a 83       	std	Y+2, r25	; 0x02
     276:	ab 83       	std	Y+3, r26	; 0x03
     278:	bc 83       	std	Y+4, r27	; 0x04
	temp |= (readRegister(slaveAddressW, 0xFB) << 4);
     27a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <slaveAddressW>
     27e:	6b ef       	ldi	r22, 0xFB	; 251
     280:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     284:	88 2f       	mov	r24, r24
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	82 95       	swap	r24
     28a:	92 95       	swap	r25
     28c:	90 7f       	andi	r25, 0xF0	; 240
     28e:	98 27       	eor	r25, r24
     290:	80 7f       	andi	r24, 0xF0	; 240
     292:	98 27       	eor	r25, r24
     294:	09 2e       	mov	r0, r25
     296:	00 0c       	add	r0, r0
     298:	aa 0b       	sbc	r26, r26
     29a:	bb 0b       	sbc	r27, r27
     29c:	29 81       	ldd	r18, Y+1	; 0x01
     29e:	3a 81       	ldd	r19, Y+2	; 0x02
     2a0:	4b 81       	ldd	r20, Y+3	; 0x03
     2a2:	5c 81       	ldd	r21, Y+4	; 0x04
     2a4:	82 2b       	or	r24, r18
     2a6:	93 2b       	or	r25, r19
     2a8:	a4 2b       	or	r26, r20
     2aa:	b5 2b       	or	r27, r21
     2ac:	89 83       	std	Y+1, r24	; 0x01
     2ae:	9a 83       	std	Y+2, r25	; 0x02
     2b0:	ab 83       	std	Y+3, r26	; 0x03
     2b2:	bc 83       	std	Y+4, r27	; 0x04
	temp |= readRegister(slaveAddressW, 0xFC) >> 4;
     2b4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <slaveAddressW>
     2b8:	6c ef       	ldi	r22, 0xFC	; 252
     2ba:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     2be:	82 95       	swap	r24
     2c0:	8f 70       	andi	r24, 0x0F	; 15
     2c2:	88 2f       	mov	r24, r24
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	09 2e       	mov	r0, r25
     2c8:	00 0c       	add	r0, r0
     2ca:	aa 0b       	sbc	r26, r26
     2cc:	bb 0b       	sbc	r27, r27
     2ce:	29 81       	ldd	r18, Y+1	; 0x01
     2d0:	3a 81       	ldd	r19, Y+2	; 0x02
     2d2:	4b 81       	ldd	r20, Y+3	; 0x03
     2d4:	5c 81       	ldd	r21, Y+4	; 0x04
     2d6:	82 2b       	or	r24, r18
     2d8:	93 2b       	or	r25, r19
     2da:	a4 2b       	or	r26, r20
     2dc:	b5 2b       	or	r27, r21
     2de:	89 83       	std	Y+1, r24	; 0x01
     2e0:	9a 83       	std	Y+2, r25	; 0x02
     2e2:	ab 83       	std	Y+3, r26	; 0x03
     2e4:	bc 83       	std	Y+4, r27	; 0x04
	
	return temp;
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	ab 81       	ldd	r26, Y+3	; 0x03
     2ec:	bc 81       	ldd	r27, Y+4	; 0x04
}
     2ee:	bc 01       	movw	r22, r24
     2f0:	cd 01       	movw	r24, r26
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <getCalibrationValues>:

void getCalibrationValues()
{	
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	dig_T1 = 0;
     308:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <dig_T1+0x1>
     30c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <dig_T1>
	dig_T2 = 0;
     310:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <dig_T2+0x1>
     314:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <dig_T2>
	dig_T3 = 0;
     318:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <dig_T3+0x1>
     31c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <dig_T3>
	
	dig_T1 |= readRegister(slaveAddressR, 0x88);
     320:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     324:	68 e8       	ldi	r22, 0x88	; 136
     326:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     32a:	28 2f       	mov	r18, r24
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <dig_T1>
     332:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <dig_T1+0x1>
     336:	82 2b       	or	r24, r18
     338:	93 2b       	or	r25, r19
     33a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <dig_T1+0x1>
     33e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <dig_T1>
	dig_T1 |= (readRegister(slaveAddressR, 0x89) << 8);
     342:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     346:	69 e8       	ldi	r22, 0x89	; 137
     348:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     34c:	88 2f       	mov	r24, r24
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	98 2f       	mov	r25, r24
     352:	88 27       	eor	r24, r24
     354:	9c 01       	movw	r18, r24
     356:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <dig_T1>
     35a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <dig_T1+0x1>
     35e:	82 2b       	or	r24, r18
     360:	93 2b       	or	r25, r19
     362:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <dig_T1+0x1>
     366:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <dig_T1>
	
	dig_T2 |= readRegister(slaveAddressR, 0x8A);
     36a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     36e:	6a e8       	ldi	r22, 0x8A	; 138
     370:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     374:	28 2f       	mov	r18, r24
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_T2>
     37c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_T2+0x1>
     380:	82 2b       	or	r24, r18
     382:	93 2b       	or	r25, r19
     384:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <dig_T2+0x1>
     388:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dig_T2>
	dig_T2 |= (readRegister(slaveAddressR, 0x8B) << 8);
     38c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     390:	6b e8       	ldi	r22, 0x8B	; 139
     392:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	38 2f       	mov	r19, r24
     39c:	22 27       	eor	r18, r18
     39e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_T2>
     3a2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_T2+0x1>
     3a6:	82 2b       	or	r24, r18
     3a8:	93 2b       	or	r25, r19
     3aa:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <dig_T2+0x1>
     3ae:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dig_T2>
	
	dig_T3 |= readRegister(slaveAddressR, 0x8C);
     3b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     3b6:	6c e8       	ldi	r22, 0x8C	; 140
     3b8:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     3bc:	28 2f       	mov	r18, r24
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T3>
     3c4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T3+0x1>
     3c8:	82 2b       	or	r24, r18
     3ca:	93 2b       	or	r25, r19
     3cc:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <dig_T3+0x1>
     3d0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dig_T3>
	dig_T3 |= (readRegister(slaveAddressR, 0x8D) << 8);
     3d4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     3d8:	6d e8       	ldi	r22, 0x8D	; 141
     3da:	0e 94 b0 07 	call	0xf60	; 0xf60 <readRegister>
     3de:	88 2f       	mov	r24, r24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	38 2f       	mov	r19, r24
     3e4:	22 27       	eor	r18, r18
     3e6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T3>
     3ea:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T3+0x1>
     3ee:	82 2b       	or	r24, r18
     3f0:	93 2b       	or	r25, r19
     3f2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <dig_T3+0x1>
     3f6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dig_T3>
}
     3fa:	00 00       	nop
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <BME280_compensate_T_int32>:

// from Bosch Sensortec [datasheet]
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	60 97       	sbiw	r28, 0x10	; 16
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	6d 87       	std	Y+13, r22	; 0x0d
     428:	7e 87       	std	Y+14, r23	; 0x0e
     42a:	8f 87       	std	Y+15, r24	; 0x0f
     42c:	98 8b       	std	Y+16, r25	; 0x10
	int32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
     42e:	8d 85       	ldd	r24, Y+13	; 0x0d
     430:	9e 85       	ldd	r25, Y+14	; 0x0e
     432:	af 85       	ldd	r26, Y+15	; 0x0f
     434:	b8 89       	ldd	r27, Y+16	; 0x10
     436:	9c 01       	movw	r18, r24
     438:	ad 01       	movw	r20, r26
     43a:	68 94       	set
     43c:	12 f8       	bld	r1, 2
     43e:	55 95       	asr	r21
     440:	47 95       	ror	r20
     442:	37 95       	ror	r19
     444:	27 95       	ror	r18
     446:	16 94       	lsr	r1
     448:	d1 f7       	brne	.-12     	; 0x43e <BME280_compensate_T_int32+0x3c>
     44a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <dig_T1>
     44e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <dig_T1+0x1>
     452:	cc 01       	movw	r24, r24
     454:	a0 e0       	ldi	r26, 0x00	; 0
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	aa 1f       	adc	r26, r26
     45e:	bb 1f       	adc	r27, r27
     460:	28 1b       	sub	r18, r24
     462:	39 0b       	sbc	r19, r25
     464:	4a 0b       	sbc	r20, r26
     466:	5b 0b       	sbc	r21, r27
     468:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dig_T2>
     46c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dig_T2+0x1>
     470:	09 2e       	mov	r0, r25
     472:	00 0c       	add	r0, r0
     474:	aa 0b       	sbc	r26, r26
     476:	bb 0b       	sbc	r27, r27
     478:	bc 01       	movw	r22, r24
     47a:	cd 01       	movw	r24, r26
     47c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__mulsi3>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	07 2e       	mov	r0, r23
     486:	7b e0       	ldi	r23, 0x0B	; 11
     488:	b5 95       	asr	r27
     48a:	a7 95       	ror	r26
     48c:	97 95       	ror	r25
     48e:	87 95       	ror	r24
     490:	7a 95       	dec	r23
     492:	d1 f7       	brne	.-12     	; 0x488 <BME280_compensate_T_int32+0x86>
     494:	70 2d       	mov	r23, r0
     496:	89 83       	std	Y+1, r24	; 0x01
     498:	9a 83       	std	Y+2, r25	; 0x02
     49a:	ab 83       	std	Y+3, r26	; 0x03
     49c:	bc 83       	std	Y+4, r27	; 0x04
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
     49e:	8d 85       	ldd	r24, Y+13	; 0x0d
     4a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     4a2:	af 85       	ldd	r26, Y+15	; 0x0f
     4a4:	b8 89       	ldd	r27, Y+16	; 0x10
     4a6:	9c 01       	movw	r18, r24
     4a8:	ad 01       	movw	r20, r26
     4aa:	68 94       	set
     4ac:	13 f8       	bld	r1, 3
     4ae:	55 95       	asr	r21
     4b0:	47 95       	ror	r20
     4b2:	37 95       	ror	r19
     4b4:	27 95       	ror	r18
     4b6:	16 94       	lsr	r1
     4b8:	d1 f7       	brne	.-12     	; 0x4ae <BME280_compensate_T_int32+0xac>
     4ba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <dig_T1>
     4be:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <dig_T1+0x1>
     4c2:	cc 01       	movw	r24, r24
     4c4:	a0 e0       	ldi	r26, 0x00	; 0
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	79 01       	movw	r14, r18
     4ca:	8a 01       	movw	r16, r20
     4cc:	e8 1a       	sub	r14, r24
     4ce:	f9 0a       	sbc	r15, r25
     4d0:	0a 0b       	sbc	r16, r26
     4d2:	1b 0b       	sbc	r17, r27
     4d4:	8d 85       	ldd	r24, Y+13	; 0x0d
     4d6:	9e 85       	ldd	r25, Y+14	; 0x0e
     4d8:	af 85       	ldd	r26, Y+15	; 0x0f
     4da:	b8 89       	ldd	r27, Y+16	; 0x10
     4dc:	9c 01       	movw	r18, r24
     4de:	ad 01       	movw	r20, r26
     4e0:	68 94       	set
     4e2:	13 f8       	bld	r1, 3
     4e4:	55 95       	asr	r21
     4e6:	47 95       	ror	r20
     4e8:	37 95       	ror	r19
     4ea:	27 95       	ror	r18
     4ec:	16 94       	lsr	r1
     4ee:	d1 f7       	brne	.-12     	; 0x4e4 <BME280_compensate_T_int32+0xe2>
     4f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <dig_T1>
     4f4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <dig_T1+0x1>
     4f8:	cc 01       	movw	r24, r24
     4fa:	a0 e0       	ldi	r26, 0x00	; 0
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	59 01       	movw	r10, r18
     500:	6a 01       	movw	r12, r20
     502:	a8 1a       	sub	r10, r24
     504:	b9 0a       	sbc	r11, r25
     506:	ca 0a       	sbc	r12, r26
     508:	db 0a       	sbc	r13, r27
     50a:	d6 01       	movw	r26, r12
     50c:	c5 01       	movw	r24, r10
     50e:	a8 01       	movw	r20, r16
     510:	97 01       	movw	r18, r14
     512:	bc 01       	movw	r22, r24
     514:	cd 01       	movw	r24, r26
     516:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__mulsi3>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	9c 01       	movw	r18, r24
     520:	ad 01       	movw	r20, r26
     522:	01 2e       	mov	r0, r17
     524:	1c e0       	ldi	r17, 0x0C	; 12
     526:	55 95       	asr	r21
     528:	47 95       	ror	r20
     52a:	37 95       	ror	r19
     52c:	27 95       	ror	r18
     52e:	1a 95       	dec	r17
     530:	d1 f7       	brne	.-12     	; 0x526 <BME280_compensate_T_int32+0x124>
     532:	10 2d       	mov	r17, r0
     534:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dig_T3>
     538:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <dig_T3+0x1>
     53c:	09 2e       	mov	r0, r25
     53e:	00 0c       	add	r0, r0
     540:	aa 0b       	sbc	r26, r26
     542:	bb 0b       	sbc	r27, r27
     544:	bc 01       	movw	r22, r24
     546:	cd 01       	movw	r24, r26
     548:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__mulsi3>
     54c:	dc 01       	movw	r26, r24
     54e:	cb 01       	movw	r24, r22
     550:	07 2e       	mov	r0, r23
     552:	7e e0       	ldi	r23, 0x0E	; 14
     554:	b5 95       	asr	r27
     556:	a7 95       	ror	r26
     558:	97 95       	ror	r25
     55a:	87 95       	ror	r24
     55c:	7a 95       	dec	r23
     55e:	d1 f7       	brne	.-12     	; 0x554 <BME280_compensate_T_int32+0x152>
     560:	70 2d       	mov	r23, r0
     562:	8d 83       	std	Y+5, r24	; 0x05
     564:	9e 83       	std	Y+6, r25	; 0x06
     566:	af 83       	std	Y+7, r26	; 0x07
     568:	b8 87       	std	Y+8, r27	; 0x08
	t_fine = var1 + var2;
     56a:	29 81       	ldd	r18, Y+1	; 0x01
     56c:	3a 81       	ldd	r19, Y+2	; 0x02
     56e:	4b 81       	ldd	r20, Y+3	; 0x03
     570:	5c 81       	ldd	r21, Y+4	; 0x04
     572:	8d 81       	ldd	r24, Y+5	; 0x05
     574:	9e 81       	ldd	r25, Y+6	; 0x06
     576:	af 81       	ldd	r26, Y+7	; 0x07
     578:	b8 85       	ldd	r27, Y+8	; 0x08
     57a:	82 0f       	add	r24, r18
     57c:	93 1f       	adc	r25, r19
     57e:	a4 1f       	adc	r26, r20
     580:	b5 1f       	adc	r27, r21
     582:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <t_fine>
     586:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <t_fine+0x1>
     58a:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <t_fine+0x2>
     58e:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <t_fine+0x3>
	T = (t_fine * 5 + 128) >> 8;
     592:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <t_fine>
     596:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <t_fine+0x1>
     59a:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <t_fine+0x2>
     59e:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <t_fine+0x3>
     5a2:	da 01       	movw	r26, r20
     5a4:	c9 01       	movw	r24, r18
     5a6:	88 0f       	add	r24, r24
     5a8:	99 1f       	adc	r25, r25
     5aa:	aa 1f       	adc	r26, r26
     5ac:	bb 1f       	adc	r27, r27
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	aa 1f       	adc	r26, r26
     5b4:	bb 1f       	adc	r27, r27
     5b6:	82 0f       	add	r24, r18
     5b8:	93 1f       	adc	r25, r19
     5ba:	a4 1f       	adc	r26, r20
     5bc:	b5 1f       	adc	r27, r21
     5be:	80 58       	subi	r24, 0x80	; 128
     5c0:	9f 4f       	sbci	r25, 0xFF	; 255
     5c2:	af 4f       	sbci	r26, 0xFF	; 255
     5c4:	bf 4f       	sbci	r27, 0xFF	; 255
     5c6:	89 2f       	mov	r24, r25
     5c8:	9a 2f       	mov	r25, r26
     5ca:	ab 2f       	mov	r26, r27
     5cc:	bb 27       	eor	r27, r27
     5ce:	a7 fd       	sbrc	r26, 7
     5d0:	ba 95       	dec	r27
     5d2:	89 87       	std	Y+9, r24	; 0x09
     5d4:	9a 87       	std	Y+10, r25	; 0x0a
     5d6:	ab 87       	std	Y+11, r26	; 0x0b
     5d8:	bc 87       	std	Y+12, r27	; 0x0c
	
	return T;
     5da:	89 85       	ldd	r24, Y+9	; 0x09
     5dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5de:	ab 85       	ldd	r26, Y+11	; 0x0b
     5e0:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     5e2:	bc 01       	movw	r22, r24
     5e4:	cd 01       	movw	r24, r26
     5e6:	60 96       	adiw	r28, 0x10	; 16
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	bf 90       	pop	r11
     604:	af 90       	pop	r10
     606:	08 95       	ret

00000608 <main>:
#define DEBUG_LED_conf() (DDRD |= (1 << PIND4))
#define DEBUG_LED_on() PORTD |= (1 << PIND4)
#define DEBUG_LED_off() PORTD &= ~(1 << PIND4)

int main(void)
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	e0 97       	sbiw	r28, 0x30	; 48
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
	// I2C-Address of BME280
	char slaveAddressBME280 = 0b11101110;
     61c:	8e ee       	ldi	r24, 0xEE	; 238
     61e:	89 83       	std	Y+1, r24	; 0x01
	
	// I2C-Address of LCD1602
	char slaveAddressLCD1602 = 0b01001110;
     620:	8e e4       	ldi	r24, 0x4E	; 78
     622:	8a 83       	std	Y+2, r24	; 0x02
	
	initI2C(10,'u');
     624:	45 e7       	ldi	r20, 0x75	; 117
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	80 e2       	ldi	r24, 0x20	; 32
     62c:	91 e4       	ldi	r25, 0x41	; 65
     62e:	0e 94 13 05 	call	0xa26	; 0xa26 <initI2C>
	
	initLCD(slaveAddressLCD1602);
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	0e 94 58 08 	call	0x10b0	; 0x10b0 <initLCD>
	
	initBME280(slaveAddressBME280);
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	0e 94 53 00 	call	0xa6	; 0xa6 <initBME280>
	
	configBME280ForTemperatureMeasurement();
     63e:	0e 94 66 00 	call	0xcc	; 0xcc <configBME280ForTemperatureMeasurement>
	
	while(1)
	{
		char temp[16] = {0};
     642:	20 e1       	ldi	r18, 0x10	; 16
     644:	ce 01       	movw	r24, r28
     646:	41 96       	adiw	r24, 0x11	; 17
     648:	fc 01       	movw	r30, r24
     64a:	32 2f       	mov	r19, r18
     64c:	11 92       	st	Z+, r1
     64e:	3a 95       	dec	r19
     650:	e9 f7       	brne	.-6      	; 0x64c <main+0x44>
		sprintf(temp, "%ld", getTemperature());
     652:	0e 94 a2 00 	call	0x144	; 0x144 <getTemperature>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	2b 2f       	mov	r18, r27
     65c:	2f 93       	push	r18
     65e:	2a 2f       	mov	r18, r26
     660:	2f 93       	push	r18
     662:	29 2f       	mov	r18, r25
     664:	2f 93       	push	r18
     666:	8f 93       	push	r24
     668:	85 e0       	ldi	r24, 0x05	; 5
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	89 2f       	mov	r24, r25
     66e:	8f 93       	push	r24
     670:	85 e0       	ldi	r24, 0x05	; 5
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	8f 93       	push	r24
     676:	ce 01       	movw	r24, r28
     678:	41 96       	adiw	r24, 0x11	; 17
     67a:	29 2f       	mov	r18, r25
     67c:	2f 93       	push	r18
     67e:	8f 93       	push	r24
     680:	0e 94 13 0a 	call	0x1426	; 0x1426 <sprintf>
     684:	8d b7       	in	r24, 0x3d	; 61
     686:	9e b7       	in	r25, 0x3e	; 62
     688:	08 96       	adiw	r24, 0x08	; 8
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
		
		char rawTemp[16] = {0};
     694:	20 e1       	ldi	r18, 0x10	; 16
     696:	ce 01       	movw	r24, r28
     698:	81 96       	adiw	r24, 0x21	; 33
     69a:	fc 01       	movw	r30, r24
     69c:	32 2f       	mov	r19, r18
     69e:	11 92       	st	Z+, r1
     6a0:	3a 95       	dec	r19
     6a2:	e9 f7       	brne	.-6      	; 0x69e <main+0x96>
		sprintf(rawTemp, "%ld", getRawTemperature());
     6a4:	0e 94 14 01 	call	0x228	; 0x228 <getRawTemperature>
     6a8:	dc 01       	movw	r26, r24
     6aa:	cb 01       	movw	r24, r22
     6ac:	2b 2f       	mov	r18, r27
     6ae:	2f 93       	push	r18
     6b0:	2a 2f       	mov	r18, r26
     6b2:	2f 93       	push	r18
     6b4:	29 2f       	mov	r18, r25
     6b6:	2f 93       	push	r18
     6b8:	8f 93       	push	r24
     6ba:	85 e0       	ldi	r24, 0x05	; 5
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	89 2f       	mov	r24, r25
     6c0:	8f 93       	push	r24
     6c2:	85 e0       	ldi	r24, 0x05	; 5
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	8f 93       	push	r24
     6c8:	ce 01       	movw	r24, r28
     6ca:	81 96       	adiw	r24, 0x21	; 33
     6cc:	29 2f       	mov	r18, r25
     6ce:	2f 93       	push	r18
     6d0:	8f 93       	push	r24
     6d2:	0e 94 13 0a 	call	0x1426	; 0x1426 <sprintf>
     6d6:	8d b7       	in	r24, 0x3d	; 61
     6d8:	9e b7       	in	r25, 0x3e	; 62
     6da:	08 96       	adiw	r24, 0x08	; 8
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
		
		clearScreen();
     6e6:	0e 94 6d 09 	call	0x12da	; 0x12da <clearScreen>
		
		setCursor(0, 0);
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 4e 09 	call	0x129c	; 0x129c <setCursor>
		writeString(temp);
     6f2:	ce 01       	movw	r24, r28
     6f4:	41 96       	adiw	r24, 0x11	; 17
     6f6:	0e 94 57 09 	call	0x12ae	; 0x12ae <writeString>
		
		setCursor(1, 0);
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	0e 94 4e 09 	call	0x129c	; 0x129c <setCursor>
		writeString(rawTemp);
     702:	ce 01       	movw	r24, r28
     704:	81 96       	adiw	r24, 0x21	; 33
     706:	0e 94 57 09 	call	0x12ae	; 0x12ae <writeString>
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	aa e7       	ldi	r26, 0x7A	; 122
     710:	b4 e4       	ldi	r27, 0x44	; 68
     712:	8b 83       	std	Y+3, r24	; 0x03
     714:	9c 83       	std	Y+4, r25	; 0x04
     716:	ad 83       	std	Y+5, r26	; 0x05
     718:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	4a e7       	ldi	r20, 0x7A	; 122
     720:	55 e4       	ldi	r21, 0x45	; 69
     722:	6b 81       	ldd	r22, Y+3	; 0x03
     724:	7c 81       	ldd	r23, Y+4	; 0x04
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	9e 81       	ldd	r25, Y+6	; 0x06
     72a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	8f 83       	std	Y+7, r24	; 0x07
     734:	98 87       	std	Y+8, r25	; 0x08
     736:	a9 87       	std	Y+9, r26	; 0x09
     738:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 e8       	ldi	r20, 0x80	; 128
     740:	5f e3       	ldi	r21, 0x3F	; 63
     742:	6f 81       	ldd	r22, Y+7	; 0x07
     744:	78 85       	ldd	r23, Y+8	; 0x08
     746:	89 85       	ldd	r24, Y+9	; 0x09
     748:	9a 85       	ldd	r25, Y+10	; 0x0a
     74a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__cmpsf2>
     74e:	88 23       	and	r24, r24
     750:	2c f4       	brge	.+10     	; 0x75c <main+0x154>
		__ticks = 1;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	9c 87       	std	Y+12, r25	; 0x0c
     758:	8b 87       	std	Y+11, r24	; 0x0b
     75a:	3f c0       	rjmp	.+126    	; 0x7da <main+0x1d2>
	else if (__tmp > 65535)
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	3f ef       	ldi	r19, 0xFF	; 255
     760:	4f e7       	ldi	r20, 0x7F	; 127
     762:	57 e4       	ldi	r21, 0x47	; 71
     764:	6f 81       	ldd	r22, Y+7	; 0x07
     766:	78 85       	ldd	r23, Y+8	; 0x08
     768:	89 85       	ldd	r24, Y+9	; 0x09
     76a:	9a 85       	ldd	r25, Y+10	; 0x0a
     76c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__gesf2>
     770:	18 16       	cp	r1, r24
     772:	4c f5       	brge	.+82     	; 0x7c6 <main+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	40 e2       	ldi	r20, 0x20	; 32
     77a:	51 e4       	ldi	r21, 0x41	; 65
     77c:	6b 81       	ldd	r22, Y+3	; 0x03
     77e:	7c 81       	ldd	r23, Y+4	; 0x04
     780:	8d 81       	ldd	r24, Y+5	; 0x05
     782:	9e 81       	ldd	r25, Y+6	; 0x06
     784:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	bc 01       	movw	r22, r24
     78e:	cd 01       	movw	r24, r26
     790:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixunssfsi>
     794:	dc 01       	movw	r26, r24
     796:	cb 01       	movw	r24, r22
     798:	9c 87       	std	Y+12, r25	; 0x0c
     79a:	8b 87       	std	Y+11, r24	; 0x0b
     79c:	0f c0       	rjmp	.+30     	; 0x7bc <main+0x1b4>
     79e:	80 e9       	ldi	r24, 0x90	; 144
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	9e 87       	std	Y+14, r25	; 0x0e
     7a4:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <main+0x1a2>
     7ae:	9e 87       	std	Y+14, r25	; 0x0e
     7b0:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     7b4:	9c 85       	ldd	r25, Y+12	; 0x0c
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	9c 87       	std	Y+12, r25	; 0x0c
     7ba:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7bc:	8b 85       	ldd	r24, Y+11	; 0x0b
     7be:	9c 85       	ldd	r25, Y+12	; 0x0c
     7c0:	89 2b       	or	r24, r25
     7c2:	69 f7       	brne	.-38     	; 0x79e <main+0x196>
     7c4:	14 c0       	rjmp	.+40     	; 0x7ee <main+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7c6:	6f 81       	ldd	r22, Y+7	; 0x07
     7c8:	78 85       	ldd	r23, Y+8	; 0x08
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ce:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixunssfsi>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	9c 87       	std	Y+12, r25	; 0x0c
     7d8:	8b 87       	std	Y+11, r24	; 0x0b
     7da:	8b 85       	ldd	r24, Y+11	; 0x0b
     7dc:	9c 85       	ldd	r25, Y+12	; 0x0c
     7de:	98 8b       	std	Y+16, r25	; 0x10
     7e0:	8f 87       	std	Y+15, r24	; 0x0f
     7e2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7e4:	98 89       	ldd	r25, Y+16	; 0x10
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <main+0x1de>
     7ea:	98 8b       	std	Y+16, r25	; 0x10
     7ec:	8f 87       	std	Y+15, r24	; 0x0f
		
		_delay_ms(1000);
	}
     7ee:	29 cf       	rjmp	.-430    	; 0x642 <main+0x3a>

000007f0 <__cmpsf2>:
     7f0:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_cmp>
     7f4:	08 f4       	brcc	.+2      	; 0x7f8 <__cmpsf2+0x8>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	08 95       	ret

000007fa <__fixunssfsi>:
     7fa:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_splitA>
     7fe:	88 f0       	brcs	.+34     	; 0x822 <__fixunssfsi+0x28>
     800:	9f 57       	subi	r25, 0x7F	; 127
     802:	98 f0       	brcs	.+38     	; 0x82a <__fixunssfsi+0x30>
     804:	b9 2f       	mov	r27, r25
     806:	99 27       	eor	r25, r25
     808:	b7 51       	subi	r27, 0x17	; 23
     80a:	b0 f0       	brcs	.+44     	; 0x838 <__fixunssfsi+0x3e>
     80c:	e1 f0       	breq	.+56     	; 0x846 <__fixunssfsi+0x4c>
     80e:	66 0f       	add	r22, r22
     810:	77 1f       	adc	r23, r23
     812:	88 1f       	adc	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	1a f0       	brmi	.+6      	; 0x81e <__fixunssfsi+0x24>
     818:	ba 95       	dec	r27
     81a:	c9 f7       	brne	.-14     	; 0x80e <__fixunssfsi+0x14>
     81c:	14 c0       	rjmp	.+40     	; 0x846 <__fixunssfsi+0x4c>
     81e:	b1 30       	cpi	r27, 0x01	; 1
     820:	91 f0       	breq	.+36     	; 0x846 <__fixunssfsi+0x4c>
     822:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__fp_zero>
     826:	b1 e0       	ldi	r27, 0x01	; 1
     828:	08 95       	ret
     82a:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_zero>
     82e:	67 2f       	mov	r22, r23
     830:	78 2f       	mov	r23, r24
     832:	88 27       	eor	r24, r24
     834:	b8 5f       	subi	r27, 0xF8	; 248
     836:	39 f0       	breq	.+14     	; 0x846 <__fixunssfsi+0x4c>
     838:	b9 3f       	cpi	r27, 0xF9	; 249
     83a:	cc f3       	brlt	.-14     	; 0x82e <__fixunssfsi+0x34>
     83c:	86 95       	lsr	r24
     83e:	77 95       	ror	r23
     840:	67 95       	ror	r22
     842:	b3 95       	inc	r27
     844:	d9 f7       	brne	.-10     	; 0x83c <__fixunssfsi+0x42>
     846:	3e f4       	brtc	.+14     	; 0x856 <__fixunssfsi+0x5c>
     848:	90 95       	com	r25
     84a:	80 95       	com	r24
     84c:	70 95       	com	r23
     84e:	61 95       	neg	r22
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	8f 4f       	sbci	r24, 0xFF	; 255
     854:	9f 4f       	sbci	r25, 0xFF	; 255
     856:	08 95       	ret

00000858 <__fp_cmp>:
     858:	99 0f       	add	r25, r25
     85a:	00 08       	sbc	r0, r0
     85c:	55 0f       	add	r21, r21
     85e:	aa 0b       	sbc	r26, r26
     860:	e0 e8       	ldi	r30, 0x80	; 128
     862:	fe ef       	ldi	r31, 0xFE	; 254
     864:	16 16       	cp	r1, r22
     866:	17 06       	cpc	r1, r23
     868:	e8 07       	cpc	r30, r24
     86a:	f9 07       	cpc	r31, r25
     86c:	c0 f0       	brcs	.+48     	; 0x89e <__fp_cmp+0x46>
     86e:	12 16       	cp	r1, r18
     870:	13 06       	cpc	r1, r19
     872:	e4 07       	cpc	r30, r20
     874:	f5 07       	cpc	r31, r21
     876:	98 f0       	brcs	.+38     	; 0x89e <__fp_cmp+0x46>
     878:	62 1b       	sub	r22, r18
     87a:	73 0b       	sbc	r23, r19
     87c:	84 0b       	sbc	r24, r20
     87e:	95 0b       	sbc	r25, r21
     880:	39 f4       	brne	.+14     	; 0x890 <__fp_cmp+0x38>
     882:	0a 26       	eor	r0, r26
     884:	61 f0       	breq	.+24     	; 0x89e <__fp_cmp+0x46>
     886:	23 2b       	or	r18, r19
     888:	24 2b       	or	r18, r20
     88a:	25 2b       	or	r18, r21
     88c:	21 f4       	brne	.+8      	; 0x896 <__fp_cmp+0x3e>
     88e:	08 95       	ret
     890:	0a 26       	eor	r0, r26
     892:	09 f4       	brne	.+2      	; 0x896 <__fp_cmp+0x3e>
     894:	a1 40       	sbci	r26, 0x01	; 1
     896:	a6 95       	lsr	r26
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	81 1d       	adc	r24, r1
     89c:	81 1d       	adc	r24, r1
     89e:	08 95       	ret

000008a0 <__fp_split3>:
     8a0:	57 fd       	sbrc	r21, 7
     8a2:	90 58       	subi	r25, 0x80	; 128
     8a4:	44 0f       	add	r20, r20
     8a6:	55 1f       	adc	r21, r21
     8a8:	59 f0       	breq	.+22     	; 0x8c0 <__fp_splitA+0x10>
     8aa:	5f 3f       	cpi	r21, 0xFF	; 255
     8ac:	71 f0       	breq	.+28     	; 0x8ca <__fp_splitA+0x1a>
     8ae:	47 95       	ror	r20

000008b0 <__fp_splitA>:
     8b0:	88 0f       	add	r24, r24
     8b2:	97 fb       	bst	r25, 7
     8b4:	99 1f       	adc	r25, r25
     8b6:	61 f0       	breq	.+24     	; 0x8d0 <__fp_splitA+0x20>
     8b8:	9f 3f       	cpi	r25, 0xFF	; 255
     8ba:	79 f0       	breq	.+30     	; 0x8da <__fp_splitA+0x2a>
     8bc:	87 95       	ror	r24
     8be:	08 95       	ret
     8c0:	12 16       	cp	r1, r18
     8c2:	13 06       	cpc	r1, r19
     8c4:	14 06       	cpc	r1, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	f2 cf       	rjmp	.-28     	; 0x8ae <__fp_split3+0xe>
     8ca:	46 95       	lsr	r20
     8cc:	f1 df       	rcall	.-30     	; 0x8b0 <__fp_splitA>
     8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <__fp_splitA+0x30>
     8d0:	16 16       	cp	r1, r22
     8d2:	17 06       	cpc	r1, r23
     8d4:	18 06       	cpc	r1, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	f1 cf       	rjmp	.-30     	; 0x8bc <__fp_splitA+0xc>
     8da:	86 95       	lsr	r24
     8dc:	71 05       	cpc	r23, r1
     8de:	61 05       	cpc	r22, r1
     8e0:	08 94       	sec
     8e2:	08 95       	ret

000008e4 <__fp_zero>:
     8e4:	e8 94       	clt

000008e6 <__fp_szero>:
     8e6:	bb 27       	eor	r27, r27
     8e8:	66 27       	eor	r22, r22
     8ea:	77 27       	eor	r23, r23
     8ec:	cb 01       	movw	r24, r22
     8ee:	97 f9       	bld	r25, 7
     8f0:	08 95       	ret

000008f2 <__gesf2>:
     8f2:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_cmp>
     8f6:	08 f4       	brcc	.+2      	; 0x8fa <__gesf2+0x8>
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	08 95       	ret

000008fc <__mulsf3>:
     8fc:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3x>
     900:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_round>
     904:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fp_pscA>
     908:	38 f0       	brcs	.+14     	; 0x918 <__stack+0x19>
     90a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscB>
     90e:	20 f0       	brcs	.+8      	; 0x918 <__stack+0x19>
     910:	95 23       	and	r25, r21
     912:	11 f0       	breq	.+4      	; 0x918 <__stack+0x19>
     914:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_inf>
     918:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_nan>
     91c:	11 24       	eor	r1, r1
     91e:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_szero>

00000922 <__mulsf3x>:
     922:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_split3>
     926:	70 f3       	brcs	.-36     	; 0x904 <__stack+0x5>

00000928 <__mulsf3_pse>:
     928:	95 9f       	mul	r25, r21
     92a:	c1 f3       	breq	.-16     	; 0x91c <__stack+0x1d>
     92c:	95 0f       	add	r25, r21
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	55 1f       	adc	r21, r21
     932:	62 9f       	mul	r22, r18
     934:	f0 01       	movw	r30, r0
     936:	72 9f       	mul	r23, r18
     938:	bb 27       	eor	r27, r27
     93a:	f0 0d       	add	r31, r0
     93c:	b1 1d       	adc	r27, r1
     93e:	63 9f       	mul	r22, r19
     940:	aa 27       	eor	r26, r26
     942:	f0 0d       	add	r31, r0
     944:	b1 1d       	adc	r27, r1
     946:	aa 1f       	adc	r26, r26
     948:	64 9f       	mul	r22, r20
     94a:	66 27       	eor	r22, r22
     94c:	b0 0d       	add	r27, r0
     94e:	a1 1d       	adc	r26, r1
     950:	66 1f       	adc	r22, r22
     952:	82 9f       	mul	r24, r18
     954:	22 27       	eor	r18, r18
     956:	b0 0d       	add	r27, r0
     958:	a1 1d       	adc	r26, r1
     95a:	62 1f       	adc	r22, r18
     95c:	73 9f       	mul	r23, r19
     95e:	b0 0d       	add	r27, r0
     960:	a1 1d       	adc	r26, r1
     962:	62 1f       	adc	r22, r18
     964:	83 9f       	mul	r24, r19
     966:	a0 0d       	add	r26, r0
     968:	61 1d       	adc	r22, r1
     96a:	22 1f       	adc	r18, r18
     96c:	74 9f       	mul	r23, r20
     96e:	33 27       	eor	r19, r19
     970:	a0 0d       	add	r26, r0
     972:	61 1d       	adc	r22, r1
     974:	23 1f       	adc	r18, r19
     976:	84 9f       	mul	r24, r20
     978:	60 0d       	add	r22, r0
     97a:	21 1d       	adc	r18, r1
     97c:	82 2f       	mov	r24, r18
     97e:	76 2f       	mov	r23, r22
     980:	6a 2f       	mov	r22, r26
     982:	11 24       	eor	r1, r1
     984:	9f 57       	subi	r25, 0x7F	; 127
     986:	50 40       	sbci	r21, 0x00	; 0
     988:	9a f0       	brmi	.+38     	; 0x9b0 <__mulsf3_pse+0x88>
     98a:	f1 f0       	breq	.+60     	; 0x9c8 <__mulsf3_pse+0xa0>
     98c:	88 23       	and	r24, r24
     98e:	4a f0       	brmi	.+18     	; 0x9a2 <__mulsf3_pse+0x7a>
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	bb 1f       	adc	r27, r27
     996:	66 1f       	adc	r22, r22
     998:	77 1f       	adc	r23, r23
     99a:	88 1f       	adc	r24, r24
     99c:	91 50       	subi	r25, 0x01	; 1
     99e:	50 40       	sbci	r21, 0x00	; 0
     9a0:	a9 f7       	brne	.-22     	; 0x98c <__mulsf3_pse+0x64>
     9a2:	9e 3f       	cpi	r25, 0xFE	; 254
     9a4:	51 05       	cpc	r21, r1
     9a6:	80 f0       	brcs	.+32     	; 0x9c8 <__mulsf3_pse+0xa0>
     9a8:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_inf>
     9ac:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_szero>
     9b0:	5f 3f       	cpi	r21, 0xFF	; 255
     9b2:	e4 f3       	brlt	.-8      	; 0x9ac <__mulsf3_pse+0x84>
     9b4:	98 3e       	cpi	r25, 0xE8	; 232
     9b6:	d4 f3       	brlt	.-12     	; 0x9ac <__mulsf3_pse+0x84>
     9b8:	86 95       	lsr	r24
     9ba:	77 95       	ror	r23
     9bc:	67 95       	ror	r22
     9be:	b7 95       	ror	r27
     9c0:	f7 95       	ror	r31
     9c2:	e7 95       	ror	r30
     9c4:	9f 5f       	subi	r25, 0xFF	; 255
     9c6:	c1 f7       	brne	.-16     	; 0x9b8 <__mulsf3_pse+0x90>
     9c8:	fe 2b       	or	r31, r30
     9ca:	88 0f       	add	r24, r24
     9cc:	91 1d       	adc	r25, r1
     9ce:	96 95       	lsr	r25
     9d0:	87 95       	ror	r24
     9d2:	97 f9       	bld	r25, 7
     9d4:	08 95       	ret

000009d6 <__fp_inf>:
     9d6:	97 f9       	bld	r25, 7
     9d8:	9f 67       	ori	r25, 0x7F	; 127
     9da:	80 e8       	ldi	r24, 0x80	; 128
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	08 95       	ret

000009e2 <__fp_nan>:
     9e2:	9f ef       	ldi	r25, 0xFF	; 255
     9e4:	80 ec       	ldi	r24, 0xC0	; 192
     9e6:	08 95       	ret

000009e8 <__fp_pscA>:
     9e8:	00 24       	eor	r0, r0
     9ea:	0a 94       	dec	r0
     9ec:	16 16       	cp	r1, r22
     9ee:	17 06       	cpc	r1, r23
     9f0:	18 06       	cpc	r1, r24
     9f2:	09 06       	cpc	r0, r25
     9f4:	08 95       	ret

000009f6 <__fp_pscB>:
     9f6:	00 24       	eor	r0, r0
     9f8:	0a 94       	dec	r0
     9fa:	12 16       	cp	r1, r18
     9fc:	13 06       	cpc	r1, r19
     9fe:	14 06       	cpc	r1, r20
     a00:	05 06       	cpc	r0, r21
     a02:	08 95       	ret

00000a04 <__fp_round>:
     a04:	09 2e       	mov	r0, r25
     a06:	03 94       	inc	r0
     a08:	00 0c       	add	r0, r0
     a0a:	11 f4       	brne	.+4      	; 0xa10 <__fp_round+0xc>
     a0c:	88 23       	and	r24, r24
     a0e:	52 f0       	brmi	.+20     	; 0xa24 <__fp_round+0x20>
     a10:	bb 0f       	add	r27, r27
     a12:	40 f4       	brcc	.+16     	; 0xa24 <__fp_round+0x20>
     a14:	bf 2b       	or	r27, r31
     a16:	11 f4       	brne	.+4      	; 0xa1c <__fp_round+0x18>
     a18:	60 ff       	sbrs	r22, 0
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <__fp_round+0x20>
     a1c:	6f 5f       	subi	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	8f 4f       	sbci	r24, 0xFF	; 255
     a22:	9f 4f       	sbci	r25, 0xFF	; 255
     a24:	08 95       	ret

00000a26 <initI2C>:
			SCL_LOW();
		}
	}
	
	return byte;
}
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <initI2C+0x6>
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <initI2C+0x8>
     a2e:	1f 92       	push	r1
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	69 83       	std	Y+1, r22	; 0x01
     a36:	7a 83       	std	Y+2, r23	; 0x02
     a38:	8b 83       	std	Y+3, r24	; 0x03
     a3a:	9c 83       	std	Y+4, r25	; 0x04
     a3c:	4d 83       	std	Y+5, r20	; 0x05
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	ab 81       	ldd	r26, Y+3	; 0x03
     a44:	bc 81       	ldd	r27, Y+4	; 0x04
     a46:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     a4a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     a4e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     a52:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     a56:	8d 81       	ldd	r24, Y+5	; 0x05
     a58:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delayunit>
     a5c:	8a e2       	ldi	r24, 0x2A	; 42
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	2a e2       	ldi	r18, 0x2A	; 42
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	f9 01       	movw	r30, r18
     a66:	20 81       	ld	r18, Z
     a68:	27 7f       	andi	r18, 0xF7	; 247
     a6a:	fc 01       	movw	r30, r24
     a6c:	20 83       	st	Z, r18
     a6e:	8a e2       	ldi	r24, 0x2A	; 42
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	2a e2       	ldi	r18, 0x2A	; 42
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	f9 01       	movw	r30, r18
     a78:	20 81       	ld	r18, Z
     a7a:	2b 7f       	andi	r18, 0xFB	; 251
     a7c:	fc 01       	movw	r30, r24
     a7e:	20 83       	st	Z, r18
     a80:	00 00       	nop
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <delay_I2C>:
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	ae 97       	sbiw	r28, 0x2e	; 46
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <delayunit>
     aaa:	88 2f       	mov	r24, r24
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	8d 36       	cpi	r24, 0x6D	; 109
     ab0:	91 05       	cpc	r25, r1
     ab2:	09 f4       	brne	.+2      	; 0xab6 <delay_I2C+0x24>
     ab4:	f8 c0       	rjmp	.+496    	; 0xca6 <delay_I2C+0x214>
     ab6:	85 37       	cpi	r24, 0x75	; 117
     ab8:	91 05       	cpc	r25, r1
     aba:	09 f0       	breq	.+2      	; 0xabe <delay_I2C+0x2c>
     abc:	6b c1       	rjmp	.+726    	; 0xd94 <delay_I2C+0x302>
     abe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ac2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ac6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     aca:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     ace:	8d 83       	std	Y+5, r24	; 0x05
     ad0:	9e 83       	std	Y+6, r25	; 0x06
     ad2:	af 83       	std	Y+7, r26	; 0x07
     ad4:	b8 87       	std	Y+8, r27	; 0x08
     ad6:	2b ea       	ldi	r18, 0xAB	; 171
     ad8:	3a ea       	ldi	r19, 0xAA	; 170
     ada:	4a ea       	ldi	r20, 0xAA	; 170
     adc:	50 e4       	ldi	r21, 0x40	; 64
     ade:	6d 81       	ldd	r22, Y+5	; 0x05
     ae0:	7e 81       	ldd	r23, Y+6	; 0x06
     ae2:	8f 81       	ldd	r24, Y+7	; 0x07
     ae4:	98 85       	ldd	r25, Y+8	; 0x08
     ae6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3>
     aea:	dc 01       	movw	r26, r24
     aec:	cb 01       	movw	r24, r22
     aee:	89 87       	std	Y+9, r24	; 0x09
     af0:	9a 87       	std	Y+10, r25	; 0x0a
     af2:	ab 87       	std	Y+11, r26	; 0x0b
     af4:	bc 87       	std	Y+12, r27	; 0x0c
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e8       	ldi	r20, 0x80	; 128
     afc:	50 e4       	ldi	r21, 0x40	; 64
     afe:	6d 81       	ldd	r22, Y+5	; 0x05
     b00:	7e 81       	ldd	r23, Y+6	; 0x06
     b02:	8f 81       	ldd	r24, Y+7	; 0x07
     b04:	98 85       	ldd	r25, Y+8	; 0x08
     b06:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	8d 87       	std	Y+13, r24	; 0x0d
     b10:	9e 87       	std	Y+14, r25	; 0x0e
     b12:	af 87       	std	Y+15, r26	; 0x0f
     b14:	b8 8b       	std	Y+16, r27	; 0x10
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	5f e3       	ldi	r21, 0x3F	; 63
     b1e:	69 85       	ldd	r22, Y+9	; 0x09
     b20:	7a 85       	ldd	r23, Y+10	; 0x0a
     b22:	8b 85       	ldd	r24, Y+11	; 0x0b
     b24:	9c 85       	ldd	r25, Y+12	; 0x0c
     b26:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__cmpsf2>
     b2a:	88 23       	and	r24, r24
     b2c:	1c f4       	brge	.+6      	; 0xb34 <delay_I2C+0xa2>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	89 8b       	std	Y+17, r24	; 0x11
     b32:	b2 c0       	rjmp	.+356    	; 0xc98 <delay_I2C+0x206>
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	3f ef       	ldi	r19, 0xFF	; 255
     b38:	4f e7       	ldi	r20, 0x7F	; 127
     b3a:	57 e4       	ldi	r21, 0x47	; 71
     b3c:	6d 85       	ldd	r22, Y+13	; 0x0d
     b3e:	7e 85       	ldd	r23, Y+14	; 0x0e
     b40:	8f 85       	ldd	r24, Y+15	; 0x0f
     b42:	98 89       	ldd	r25, Y+16	; 0x10
     b44:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__gesf2>
     b48:	18 16       	cp	r1, r24
     b4a:	0c f0       	brlt	.+2      	; 0xb4e <delay_I2C+0xbc>
     b4c:	7b c0       	rjmp	.+246    	; 0xc44 <delay_I2C+0x1b2>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	4a e7       	ldi	r20, 0x7A	; 122
     b54:	54 e4       	ldi	r21, 0x44	; 68
     b56:	6d 81       	ldd	r22, Y+5	; 0x05
     b58:	7e 81       	ldd	r23, Y+6	; 0x06
     b5a:	8f 81       	ldd	r24, Y+7	; 0x07
     b5c:	98 85       	ldd	r25, Y+8	; 0x08
     b5e:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	8a 8b       	std	Y+18, r24	; 0x12
     b68:	9b 8b       	std	Y+19, r25	; 0x13
     b6a:	ac 8b       	std	Y+20, r26	; 0x14
     b6c:	bd 8b       	std	Y+21, r27	; 0x15
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	4a e7       	ldi	r20, 0x7A	; 122
     b74:	55 e4       	ldi	r21, 0x45	; 69
     b76:	6a 89       	ldd	r22, Y+18	; 0x12
     b78:	7b 89       	ldd	r23, Y+19	; 0x13
     b7a:	8c 89       	ldd	r24, Y+20	; 0x14
     b7c:	9d 89       	ldd	r25, Y+21	; 0x15
     b7e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	8e 8b       	std	Y+22, r24	; 0x16
     b88:	9f 8b       	std	Y+23, r25	; 0x17
     b8a:	a8 8f       	std	Y+24, r26	; 0x18
     b8c:	b9 8f       	std	Y+25, r27	; 0x19
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	40 e8       	ldi	r20, 0x80	; 128
     b94:	5f e3       	ldi	r21, 0x3F	; 63
     b96:	6e 89       	ldd	r22, Y+22	; 0x16
     b98:	7f 89       	ldd	r23, Y+23	; 0x17
     b9a:	88 8d       	ldd	r24, Y+24	; 0x18
     b9c:	99 8d       	ldd	r25, Y+25	; 0x19
     b9e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__cmpsf2>
     ba2:	88 23       	and	r24, r24
     ba4:	2c f4       	brge	.+10     	; 0xbb0 <delay_I2C+0x11e>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9b 8f       	std	Y+27, r25	; 0x1b
     bac:	8a 8f       	std	Y+26, r24	; 0x1a
     bae:	3f c0       	rjmp	.+126    	; 0xc2e <delay_I2C+0x19c>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	3f ef       	ldi	r19, 0xFF	; 255
     bb4:	4f e7       	ldi	r20, 0x7F	; 127
     bb6:	57 e4       	ldi	r21, 0x47	; 71
     bb8:	6e 89       	ldd	r22, Y+22	; 0x16
     bba:	7f 89       	ldd	r23, Y+23	; 0x17
     bbc:	88 8d       	ldd	r24, Y+24	; 0x18
     bbe:	99 8d       	ldd	r25, Y+25	; 0x19
     bc0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__gesf2>
     bc4:	18 16       	cp	r1, r24
     bc6:	4c f5       	brge	.+82     	; 0xc1a <delay_I2C+0x188>
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e2       	ldi	r20, 0x20	; 32
     bce:	51 e4       	ldi	r21, 0x41	; 65
     bd0:	6a 89       	ldd	r22, Y+18	; 0x12
     bd2:	7b 89       	ldd	r23, Y+19	; 0x13
     bd4:	8c 89       	ldd	r24, Y+20	; 0x14
     bd6:	9d 89       	ldd	r25, Y+21	; 0x15
     bd8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixunssfsi>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	9b 8f       	std	Y+27, r25	; 0x1b
     bee:	8a 8f       	std	Y+26, r24	; 0x1a
     bf0:	0f c0       	rjmp	.+30     	; 0xc10 <delay_I2C+0x17e>
     bf2:	80 e9       	ldi	r24, 0x90	; 144
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	9d 8f       	std	Y+29, r25	; 0x1d
     bf8:	8c 8f       	std	Y+28, r24	; 0x1c
     bfa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bfc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <delay_I2C+0x16c>
     c02:	9d 8f       	std	Y+29, r25	; 0x1d
     c04:	8c 8f       	std	Y+28, r24	; 0x1c
     c06:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c08:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	9b 8f       	std	Y+27, r25	; 0x1b
     c0e:	8a 8f       	std	Y+26, r24	; 0x1a
     c10:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c12:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c14:	89 2b       	or	r24, r25
     c16:	69 f7       	brne	.-38     	; 0xbf2 <delay_I2C+0x160>
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <delay_I2C+0x206>
     c1a:	6e 89       	ldd	r22, Y+22	; 0x16
     c1c:	7f 89       	ldd	r23, Y+23	; 0x17
     c1e:	88 8d       	ldd	r24, Y+24	; 0x18
     c20:	99 8d       	ldd	r25, Y+25	; 0x19
     c22:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixunssfsi>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	9b 8f       	std	Y+27, r25	; 0x1b
     c2c:	8a 8f       	std	Y+26, r24	; 0x1a
     c2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c30:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c32:	9f 8f       	std	Y+31, r25	; 0x1f
     c34:	8e 8f       	std	Y+30, r24	; 0x1e
     c36:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c38:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <delay_I2C+0x1a8>
     c3e:	9f 8f       	std	Y+31, r25	; 0x1f
     c40:	8e 8f       	std	Y+30, r24	; 0x1e
     c42:	2a c0       	rjmp	.+84     	; 0xc98 <delay_I2C+0x206>
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	4f e7       	ldi	r20, 0x7F	; 127
     c4a:	53 e4       	ldi	r21, 0x43	; 67
     c4c:	69 85       	ldd	r22, Y+9	; 0x09
     c4e:	7a 85       	ldd	r23, Y+10	; 0x0a
     c50:	8b 85       	ldd	r24, Y+11	; 0x0b
     c52:	9c 85       	ldd	r25, Y+12	; 0x0c
     c54:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__gesf2>
     c58:	18 16       	cp	r1, r24
     c5a:	ac f4       	brge	.+42     	; 0xc86 <delay_I2C+0x1f4>
     c5c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c5e:	7e 85       	ldd	r23, Y+14	; 0x0e
     c60:	8f 85       	ldd	r24, Y+15	; 0x0f
     c62:	98 89       	ldd	r25, Y+16	; 0x10
     c64:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	99 a3       	std	Y+33, r25	; 0x21
     c6e:	88 a3       	std	Y+32, r24	; 0x20
     c70:	88 a1       	ldd	r24, Y+32	; 0x20
     c72:	99 a1       	ldd	r25, Y+33	; 0x21
     c74:	9b a3       	std	Y+35, r25	; 0x23
     c76:	8a a3       	std	Y+34, r24	; 0x22
     c78:	8a a1       	ldd	r24, Y+34	; 0x22
     c7a:	9b a1       	ldd	r25, Y+35	; 0x23
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <delay_I2C+0x1ea>
     c80:	9b a3       	std	Y+35, r25	; 0x23
     c82:	8a a3       	std	Y+34, r24	; 0x22
     c84:	87 c0       	rjmp	.+270    	; 0xd94 <delay_I2C+0x302>
     c86:	69 85       	ldd	r22, Y+9	; 0x09
     c88:	7a 85       	ldd	r23, Y+10	; 0x0a
     c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c8e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixunssfsi>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	89 8b       	std	Y+17, r24	; 0x11
     c98:	89 89       	ldd	r24, Y+17	; 0x11
     c9a:	8c a3       	std	Y+36, r24	; 0x24
     c9c:	8c a1       	ldd	r24, Y+36	; 0x24
     c9e:	8a 95       	dec	r24
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <delay_I2C+0x20c>
     ca2:	8c a3       	std	Y+36, r24	; 0x24
     ca4:	77 c0       	rjmp	.+238    	; 0xd94 <delay_I2C+0x302>
     ca6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     caa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     cae:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     cb2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     cb6:	89 83       	std	Y+1, r24	; 0x01
     cb8:	9a 83       	std	Y+2, r25	; 0x02
     cba:	ab 83       	std	Y+3, r26	; 0x03
     cbc:	bc 83       	std	Y+4, r27	; 0x04
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	4a e7       	ldi	r20, 0x7A	; 122
     cc4:	55 e4       	ldi	r21, 0x45	; 69
     cc6:	69 81       	ldd	r22, Y+1	; 0x01
     cc8:	7a 81       	ldd	r23, Y+2	; 0x02
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	9c 81       	ldd	r25, Y+4	; 0x04
     cce:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8d a3       	std	Y+37, r24	; 0x25
     cd8:	9e a3       	std	Y+38, r25	; 0x26
     cda:	af a3       	std	Y+39, r26	; 0x27
     cdc:	b8 a7       	std	Y+40, r27	; 0x28
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e8       	ldi	r20, 0x80	; 128
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	6d a1       	ldd	r22, Y+37	; 0x25
     ce8:	7e a1       	ldd	r23, Y+38	; 0x26
     cea:	8f a1       	ldd	r24, Y+39	; 0x27
     cec:	98 a5       	ldd	r25, Y+40	; 0x28
     cee:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__cmpsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <delay_I2C+0x26e>
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9a a7       	std	Y+42, r25	; 0x2a
     cfc:	89 a7       	std	Y+41, r24	; 0x29
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <delay_I2C+0x2ec>
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	3f ef       	ldi	r19, 0xFF	; 255
     d04:	4f e7       	ldi	r20, 0x7F	; 127
     d06:	57 e4       	ldi	r21, 0x47	; 71
     d08:	6d a1       	ldd	r22, Y+37	; 0x25
     d0a:	7e a1       	ldd	r23, Y+38	; 0x26
     d0c:	8f a1       	ldd	r24, Y+39	; 0x27
     d0e:	98 a5       	ldd	r25, Y+40	; 0x28
     d10:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__gesf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <delay_I2C+0x2d8>
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e2       	ldi	r20, 0x20	; 32
     d1e:	51 e4       	ldi	r21, 0x41	; 65
     d20:	69 81       	ldd	r22, Y+1	; 0x01
     d22:	7a 81       	ldd	r23, Y+2	; 0x02
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	9c 81       	ldd	r25, Y+4	; 0x04
     d28:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9a a7       	std	Y+42, r25	; 0x2a
     d3e:	89 a7       	std	Y+41, r24	; 0x29
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <delay_I2C+0x2ce>
     d42:	80 e9       	ldi	r24, 0x90	; 144
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	9c a7       	std	Y+44, r25	; 0x2c
     d48:	8b a7       	std	Y+43, r24	; 0x2b
     d4a:	8b a5       	ldd	r24, Y+43	; 0x2b
     d4c:	9c a5       	ldd	r25, Y+44	; 0x2c
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <delay_I2C+0x2bc>
     d52:	9c a7       	std	Y+44, r25	; 0x2c
     d54:	8b a7       	std	Y+43, r24	; 0x2b
     d56:	89 a5       	ldd	r24, Y+41	; 0x29
     d58:	9a a5       	ldd	r25, Y+42	; 0x2a
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9a a7       	std	Y+42, r25	; 0x2a
     d5e:	89 a7       	std	Y+41, r24	; 0x29
     d60:	89 a5       	ldd	r24, Y+41	; 0x29
     d62:	9a a5       	ldd	r25, Y+42	; 0x2a
     d64:	89 2b       	or	r24, r25
     d66:	69 f7       	brne	.-38     	; 0xd42 <delay_I2C+0x2b0>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <delay_I2C+0x300>
     d6a:	6d a1       	ldd	r22, Y+37	; 0x25
     d6c:	7e a1       	ldd	r23, Y+38	; 0x26
     d6e:	8f a1       	ldd	r24, Y+39	; 0x27
     d70:	98 a5       	ldd	r25, Y+40	; 0x28
     d72:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9a a7       	std	Y+42, r25	; 0x2a
     d7c:	89 a7       	std	Y+41, r24	; 0x29
     d7e:	89 a5       	ldd	r24, Y+41	; 0x29
     d80:	9a a5       	ldd	r25, Y+42	; 0x2a
     d82:	9e a7       	std	Y+46, r25	; 0x2e
     d84:	8d a7       	std	Y+45, r24	; 0x2d
     d86:	8d a5       	ldd	r24, Y+45	; 0x2d
     d88:	9e a5       	ldd	r25, Y+46	; 0x2e
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <delay_I2C+0x2f8>
     d8e:	9e a7       	std	Y+46, r25	; 0x2e
     d90:	8d a7       	std	Y+45, r24	; 0x2d
     d92:	00 00       	nop
     d94:	00 00       	nop
     d96:	ae 96       	adiw	r28, 0x2e	; 46
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <sendStartCondition>:
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	8a e2       	ldi	r24, 0x2A	; 42
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	2a e2       	ldi	r18, 0x2A	; 42
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	f9 01       	movw	r30, r18
     dba:	20 81       	ld	r18, Z
     dbc:	27 7f       	andi	r18, 0xF7	; 247
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 83       	st	Z, r18
     dc2:	8a e2       	ldi	r24, 0x2A	; 42
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	2a e2       	ldi	r18, 0x2A	; 42
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	f9 01       	movw	r30, r18
     dcc:	20 81       	ld	r18, Z
     dce:	2b 7f       	andi	r18, 0xFB	; 251
     dd0:	fc 01       	movw	r30, r24
     dd2:	20 83       	st	Z, r18
     dd4:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
     dd8:	8a e2       	ldi	r24, 0x2A	; 42
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	2a e2       	ldi	r18, 0x2A	; 42
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	f9 01       	movw	r30, r18
     de2:	20 81       	ld	r18, Z
     de4:	24 60       	ori	r18, 0x04	; 4
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18
     dea:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
     dee:	8a e2       	ldi	r24, 0x2A	; 42
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	2a e2       	ldi	r18, 0x2A	; 42
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	f9 01       	movw	r30, r18
     df8:	20 81       	ld	r18, Z
     dfa:	28 60       	ori	r18, 0x08	; 8
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 83       	st	Z, r18
     e00:	00 00       	nop
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <sendStopCondition>:
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	8a e2       	ldi	r24, 0x2A	; 42
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	2a e2       	ldi	r18, 0x2A	; 42
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	20 81       	ld	r18, Z
     e1c:	28 60       	ori	r18, 0x08	; 8
     e1e:	fc 01       	movw	r30, r24
     e20:	20 83       	st	Z, r18
     e22:	8a e2       	ldi	r24, 0x2A	; 42
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	2a e2       	ldi	r18, 0x2A	; 42
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	f9 01       	movw	r30, r18
     e2c:	20 81       	ld	r18, Z
     e2e:	24 60       	ori	r18, 0x04	; 4
     e30:	fc 01       	movw	r30, r24
     e32:	20 83       	st	Z, r18
     e34:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
     e38:	8a e2       	ldi	r24, 0x2A	; 42
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	2a e2       	ldi	r18, 0x2A	; 42
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	f9 01       	movw	r30, r18
     e42:	20 81       	ld	r18, Z
     e44:	27 7f       	andi	r18, 0xF7	; 247
     e46:	fc 01       	movw	r30, r24
     e48:	20 83       	st	Z, r18
     e4a:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
     e4e:	8a e2       	ldi	r24, 0x2A	; 42
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	2a e2       	ldi	r18, 0x2A	; 42
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	f9 01       	movw	r30, r18
     e58:	20 81       	ld	r18, Z
     e5a:	2b 7f       	andi	r18, 0xFB	; 251
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 83       	st	Z, r18
     e60:	00 00       	nop
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret

00000e68 <sendByte>:
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <sendByte+0x6>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <sendByte+0x8>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	8c 83       	std	Y+4, r24	; 0x04
     e76:	8a e2       	ldi	r24, 0x2A	; 42
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	2a e2       	ldi	r18, 0x2A	; 42
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	f9 01       	movw	r30, r18
     e80:	20 81       	ld	r18, Z
     e82:	28 60       	ori	r18, 0x08	; 8
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
     e88:	1a 82       	std	Y+2, r1	; 0x02
     e8a:	19 82       	std	Y+1, r1	; 0x01
     e8c:	2f c0       	rjmp	.+94     	; 0xeec <sendByte+0x84>
     e8e:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	88 1f       	adc	r24, r24
     e96:	88 27       	eor	r24, r24
     e98:	88 1f       	adc	r24, r24
     e9a:	0e 94 34 08 	call	0x1068	; 0x1068 <sendBit>
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	88 0f       	add	r24, r24
     ea2:	8c 83       	std	Y+4, r24	; 0x04
     ea4:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
     ea8:	8a e2       	ldi	r24, 0x2A	; 42
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	2a e2       	ldi	r18, 0x2A	; 42
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	f9 01       	movw	r30, r18
     eb2:	20 81       	ld	r18, Z
     eb4:	27 7f       	andi	r18, 0xF7	; 247
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 83       	st	Z, r18
     eba:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
     ebe:	8a e2       	ldi	r24, 0x2A	; 42
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2a e2       	ldi	r18, 0x2A	; 42
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	f9 01       	movw	r30, r18
     ec8:	20 81       	ld	r18, Z
     eca:	28 60       	ori	r18, 0x08	; 8
     ecc:	fc 01       	movw	r30, r24
     ece:	20 83       	st	Z, r18
     ed0:	8a e2       	ldi	r24, 0x2A	; 42
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	2a e2       	ldi	r18, 0x2A	; 42
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	f9 01       	movw	r30, r18
     eda:	20 81       	ld	r18, Z
     edc:	24 60       	ori	r18, 0x04	; 4
     ede:	fc 01       	movw	r30, r24
     ee0:	20 83       	st	Z, r18
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	08 97       	sbiw	r24, 0x08	; 8
     ef2:	6c f2       	brlt	.-102    	; 0xe8e <sendByte+0x26>
     ef4:	8a e2       	ldi	r24, 0x2A	; 42
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	2a e2       	ldi	r18, 0x2A	; 42
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	f9 01       	movw	r30, r18
     efe:	20 81       	ld	r18, Z
     f00:	2b 7f       	andi	r18, 0xFB	; 251
     f02:	fc 01       	movw	r30, r24
     f04:	20 83       	st	Z, r18
     f06:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
     f0a:	8a e2       	ldi	r24, 0x2A	; 42
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	2a e2       	ldi	r18, 0x2A	; 42
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	20 81       	ld	r18, Z
     f16:	27 7f       	andi	r18, 0xF7	; 247
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
     f1c:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
     f20:	1b 82       	std	Y+3, r1	; 0x03
     f22:	89 e2       	ldi	r24, 0x29	; 41
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	fc 01       	movw	r30, r24
     f28:	80 81       	ld	r24, Z
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	84 70       	andi	r24, 0x04	; 4
     f30:	99 27       	eor	r25, r25
     f32:	89 2b       	or	r24, r25
     f34:	11 f4       	brne	.+4      	; 0xf3a <sendByte+0xd2>
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	8b 83       	std	Y+3, r24	; 0x03
     f3a:	8a e2       	ldi	r24, 0x2A	; 42
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	2a e2       	ldi	r18, 0x2A	; 42
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	f9 01       	movw	r30, r18
     f44:	20 81       	ld	r18, Z
     f46:	28 60       	ori	r18, 0x08	; 8
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
     f4c:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	08 95       	ret

00000f60 <readRegister>:

char readRegister(char slaveAddress, char registerAddress)
{
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	27 97       	sbiw	r28, 0x07	; 7
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	8e 83       	std	Y+6, r24	; 0x06
     f76:	6f 83       	std	Y+7, r22	; 0x07
	char byte = 0b00000000;
     f78:	19 82       	std	Y+1, r1	; 0x01
	
	//force write mode
	char slaveAddressW = slaveAddress & 0b11111110;
     f7a:	8e 81       	ldd	r24, Y+6	; 0x06
     f7c:	8e 7f       	andi	r24, 0xFE	; 254
     f7e:	8c 83       	std	Y+4, r24	; 0x04
	
	//force read mode
	char slaveAddressR = slaveAddress | 0b00000001;
     f80:	8e 81       	ldd	r24, Y+6	; 0x06
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	8d 83       	std	Y+5, r24	; 0x05
	
	SCL_LOW();
     f86:	8a e2       	ldi	r24, 0x2A	; 42
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	2a e2       	ldi	r18, 0x2A	; 42
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	f9 01       	movw	r30, r18
     f90:	20 81       	ld	r18, Z
     f92:	28 60       	ori	r18, 0x08	; 8
     f94:	fc 01       	movw	r30, r24
     f96:	20 83       	st	Z, r18
	
	//choose register
	sendStartCondition();
     f98:	0e 94 d4 06 	call	0xda8	; 0xda8 <sendStartCondition>
	sendByte(slaveAddressW);
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
	sendByte(registerAddress);
     fa2:	8f 81       	ldd	r24, Y+7	; 0x07
     fa4:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
	
	// establish new connection
	sendStartCondition();
     fa8:	0e 94 d4 06 	call	0xda8	; 0xda8 <sendStartCondition>
	
	// get register from slave
	if(sendByte(slaveAddressR))
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
     fae:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
     fb2:	88 23       	and	r24, r24
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <readRegister+0x58>
     fb6:	4e c0       	rjmp	.+156    	; 0x1054 <readRegister+0xf4>
	{
		SCL_LOW();
     fb8:	8a e2       	ldi	r24, 0x2A	; 42
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	2a e2       	ldi	r18, 0x2A	; 42
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	f9 01       	movw	r30, r18
     fc2:	20 81       	ld	r18, Z
     fc4:	28 60       	ori	r18, 0x08	; 8
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 83       	st	Z, r18
		SDA_HIGH();
     fca:	8a e2       	ldi	r24, 0x2A	; 42
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	2a e2       	ldi	r18, 0x2A	; 42
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	f9 01       	movw	r30, r18
     fd4:	20 81       	ld	r18, Z
     fd6:	2b 7f       	andi	r18, 0xFB	; 251
     fd8:	fc 01       	movw	r30, r24
     fda:	20 83       	st	Z, r18
		
		// read byte from slave
		for(int i = 7; i >= 0; i--)
     fdc:	87 e0       	ldi	r24, 0x07	; 7
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9b 83       	std	Y+3, r25	; 0x03
     fe2:	8a 83       	std	Y+2, r24	; 0x02
     fe4:	33 c0       	rjmp	.+102    	; 0x104c <readRegister+0xec>
		{
			delay_I2C();
     fe6:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
			
			SCL_HIGH();
     fea:	8a e2       	ldi	r24, 0x2A	; 42
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	2a e2       	ldi	r18, 0x2A	; 42
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	f9 01       	movw	r30, r18
     ff4:	20 81       	ld	r18, Z
     ff6:	27 7f       	andi	r18, 0xF7	; 247
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 83       	st	Z, r18
			
			delay_I2C();
     ffc:	0e 94 49 05 	call	0xa92	; 0xa92 <delay_I2C>
			
			byte |= (SDA_READ() << i);
    1000:	89 e2       	ldi	r24, 0x29	; 41
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	fc 01       	movw	r30, r24
    1006:	80 81       	ld	r24, Z
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	84 70       	andi	r24, 0x04	; 4
    100e:	99 27       	eor	r25, r25
    1010:	21 e0       	ldi	r18, 0x01	; 1
    1012:	89 2b       	or	r24, r25
    1014:	09 f4       	brne	.+2      	; 0x1018 <readRegister+0xb8>
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	82 2f       	mov	r24, r18
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0a 80       	ldd	r0, Y+2	; 0x02
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <readRegister+0xc4>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <readRegister+0xc0>
    1028:	98 2f       	mov	r25, r24
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	89 2b       	or	r24, r25
    102e:	89 83       	std	Y+1, r24	; 0x01
			
			SCL_LOW();
    1030:	8a e2       	ldi	r24, 0x2A	; 42
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	2a e2       	ldi	r18, 0x2A	; 42
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	f9 01       	movw	r30, r18
    103a:	20 81       	ld	r18, Z
    103c:	28 60       	ori	r18, 0x08	; 8
    103e:	fc 01       	movw	r30, r24
    1040:	20 83       	st	Z, r18
	{
		SCL_LOW();
		SDA_HIGH();
		
		// read byte from slave
		for(int i = 7; i >= 0; i--)
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	9b 83       	std	Y+3, r25	; 0x03
    104a:	8a 83       	std	Y+2, r24	; 0x02
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	99 23       	and	r25, r25
    1052:	4c f6       	brge	.-110    	; 0xfe6 <readRegister+0x86>
			
			SCL_LOW();
		}
	}
	
	return byte;
    1054:	89 81       	ldd	r24, Y+1	; 0x01
}
    1056:	27 96       	adiw	r28, 0x07	; 7
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <sendBit>:

void sendBit(char bit)
{
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	1f 92       	push	r1
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	89 83       	std	Y+1, r24	; 0x01
	if(bit == 0)
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	88 23       	and	r24, r24
    1078:	51 f4       	brne	.+20     	; 0x108e <sendBit+0x26>
	{
		SDA_LOW();
    107a:	8a e2       	ldi	r24, 0x2A	; 42
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	2a e2       	ldi	r18, 0x2A	; 42
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	f9 01       	movw	r30, r18
    1084:	20 81       	ld	r18, Z
    1086:	24 60       	ori	r18, 0x04	; 4
    1088:	fc 01       	movw	r30, r24
    108a:	20 83       	st	Z, r18
	}
	else if (bit == 1)
	{
		SDA_HIGH();
	}
    108c:	0c c0       	rjmp	.+24     	; 0x10a6 <sendBit+0x3e>
{
	if(bit == 0)
	{
		SDA_LOW();
	}
	else if (bit == 1)
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	49 f4       	brne	.+18     	; 0x10a6 <sendBit+0x3e>
	{
		SDA_HIGH();
    1094:	8a e2       	ldi	r24, 0x2A	; 42
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	2a e2       	ldi	r18, 0x2A	; 42
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	f9 01       	movw	r30, r18
    109e:	20 81       	ld	r18, Z
    10a0:	2b 7f       	andi	r18, 0xFB	; 251
    10a2:	fc 01       	movw	r30, r24
    10a4:	20 83       	st	Z, r18
	}
    10a6:	00 00       	nop
    10a8:	0f 90       	pop	r0
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <initLCD>:
/* Writes a given char on the LCD                                       */
/* The location can be specified with the setCursor() funtion			*/
/************************************************************************/
void writeChar(char character)
{
	sendData(character);
    10b0:	cf 93       	push	r28
    10b2:	c8 2f       	mov	r28, r24
    10b4:	45 e7       	ldi	r20, 0x75	; 117
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	91 e4       	ldi	r25, 0x41	; 65
    10be:	0e 94 13 05 	call	0xa26	; 0xa26 <initI2C>
    10c2:	2f ef       	ldi	r18, 0xFF	; 255
    10c4:	89 e6       	ldi	r24, 0x69	; 105
    10c6:	98 e1       	ldi	r25, 0x18	; 24
    10c8:	21 50       	subi	r18, 0x01	; 1
    10ca:	80 40       	sbci	r24, 0x00	; 0
    10cc:	90 40       	sbci	r25, 0x00	; 0
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <initLCD+0x18>
    10d0:	00 c0       	rjmp	.+0      	; 0x10d2 <initLCD+0x22>
    10d2:	00 00       	nop
    10d4:	0e 94 d4 06 	call	0xda8	; 0xda8 <sendStartCondition>
    10d8:	8c 2f       	mov	r24, r28
    10da:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    10de:	88 23       	and	r24, r24
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <initLCD+0x34>
    10e2:	88 c0       	rjmp	.+272    	; 0x11f4 <initLCD+0x144>
    10e4:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <savedSlaveAddress>
    10e8:	8f e5       	ldi	r24, 0x5F	; 95
    10ea:	9a ee       	ldi	r25, 0xEA	; 234
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <initLCD+0x3c>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <initLCD+0x42>
    10f2:	00 00       	nop
    10f4:	84 e3       	ldi	r24, 0x34	; 52
    10f6:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    10fa:	80 e3       	ldi	r24, 0x30	; 48
    10fc:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1100:	9f e7       	ldi	r25, 0x7F	; 127
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	91 50       	subi	r25, 0x01	; 1
    1108:	20 40       	sbci	r18, 0x00	; 0
    110a:	80 40       	sbci	r24, 0x00	; 0
    110c:	e1 f7       	brne	.-8      	; 0x1106 <initLCD+0x56>
    110e:	00 c0       	rjmp	.+0      	; 0x1110 <initLCD+0x60>
    1110:	00 00       	nop
    1112:	84 e3       	ldi	r24, 0x34	; 52
    1114:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1118:	80 e3       	ldi	r24, 0x30	; 48
    111a:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    111e:	8f e8       	ldi	r24, 0x8F	; 143
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <initLCD+0x72>
    1126:	00 c0       	rjmp	.+0      	; 0x1128 <initLCD+0x78>
    1128:	00 00       	nop
    112a:	84 e3       	ldi	r24, 0x34	; 52
    112c:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1130:	80 e3       	ldi	r24, 0x30	; 48
    1132:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1136:	9f e7       	ldi	r25, 0x7F	; 127
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	91 50       	subi	r25, 0x01	; 1
    113e:	20 40       	sbci	r18, 0x00	; 0
    1140:	80 40       	sbci	r24, 0x00	; 0
    1142:	e1 f7       	brne	.-8      	; 0x113c <initLCD+0x8c>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <initLCD+0x96>
    1146:	00 00       	nop
    1148:	84 e2       	ldi	r24, 0x24	; 36
    114a:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    114e:	80 e2       	ldi	r24, 0x20	; 32
    1150:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1154:	95 ed       	ldi	r25, 0xD5	; 213
    1156:	9a 95       	dec	r25
    1158:	f1 f7       	brne	.-4      	; 0x1156 <initLCD+0xa6>
    115a:	00 00       	nop
    115c:	84 e2       	ldi	r24, 0x24	; 36
    115e:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1162:	80 e2       	ldi	r24, 0x20	; 32
    1164:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1168:	84 e8       	ldi	r24, 0x84	; 132
    116a:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    116e:	80 e8       	ldi	r24, 0x80	; 128
    1170:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1174:	25 ed       	ldi	r18, 0xD5	; 213
    1176:	2a 95       	dec	r18
    1178:	f1 f7       	brne	.-4      	; 0x1176 <initLCD+0xc6>
    117a:	00 00       	nop
    117c:	84 e0       	ldi	r24, 0x04	; 4
    117e:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1188:	84 e8       	ldi	r24, 0x84	; 132
    118a:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    118e:	80 e8       	ldi	r24, 0x80	; 128
    1190:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1194:	85 ed       	ldi	r24, 0xD5	; 213
    1196:	8a 95       	dec	r24
    1198:	f1 f7       	brne	.-4      	; 0x1196 <initLCD+0xe6>
    119a:	00 00       	nop
    119c:	84 e0       	ldi	r24, 0x04	; 4
    119e:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11a8:	84 e1       	ldi	r24, 0x14	; 20
    11aa:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11ae:	80 e1       	ldi	r24, 0x10	; 16
    11b0:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11b4:	95 ed       	ldi	r25, 0xD5	; 213
    11b6:	9a 95       	dec	r25
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <initLCD+0x106>
    11ba:	00 00       	nop
    11bc:	84 e0       	ldi	r24, 0x04	; 4
    11be:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11c8:	84 e6       	ldi	r24, 0x64	; 100
    11ca:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11ce:	80 e6       	ldi	r24, 0x60	; 96
    11d0:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11d4:	25 ed       	ldi	r18, 0xD5	; 213
    11d6:	2a 95       	dec	r18
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <initLCD+0x126>
    11da:	00 00       	nop
    11dc:	8c e0       	ldi	r24, 0x0C	; 12
    11de:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11e2:	88 e0       	ldi	r24, 0x08	; 8
    11e4:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11e8:	8c ee       	ldi	r24, 0xEC	; 236
    11ea:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11ee:	88 ee       	ldi	r24, 0xE8	; 232
    11f0:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    11f4:	0e 94 04 07 	call	0xe08	; 0xe08 <sendStopCondition>
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <sendCommand>:
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	c8 2f       	mov	r28, r24
    1202:	0e 94 d4 06 	call	0xda8	; 0xda8 <sendStartCondition>
    1206:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <savedSlaveAddress>
    120a:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    120e:	85 ed       	ldi	r24, 0xD5	; 213
    1210:	8a 95       	dec	r24
    1212:	f1 f7       	brne	.-4      	; 0x1210 <sendCommand+0x14>
    1214:	00 00       	nop
    1216:	dc 2f       	mov	r29, r28
    1218:	d0 7f       	andi	r29, 0xF0	; 240
    121a:	8d 2f       	mov	r24, r29
    121c:	8c 60       	ori	r24, 0x0C	; 12
    121e:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1222:	8d 2f       	mov	r24, r29
    1224:	88 60       	ori	r24, 0x08	; 8
    1226:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    122a:	80 e1       	ldi	r24, 0x10	; 16
    122c:	c8 9f       	mul	r28, r24
    122e:	e0 01       	movw	r28, r0
    1230:	11 24       	eor	r1, r1
    1232:	8c 2f       	mov	r24, r28
    1234:	8c 60       	ori	r24, 0x0C	; 12
    1236:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    123a:	8c 2f       	mov	r24, r28
    123c:	88 60       	ori	r24, 0x08	; 8
    123e:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1242:	0e 94 04 07 	call	0xe08	; 0xe08 <sendStopCondition>
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <sendData>:
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	c8 2f       	mov	r28, r24
    1252:	0e 94 d4 06 	call	0xda8	; 0xda8 <sendStartCondition>
    1256:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <savedSlaveAddress>
    125a:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    125e:	85 ed       	ldi	r24, 0xD5	; 213
    1260:	8a 95       	dec	r24
    1262:	f1 f7       	brne	.-4      	; 0x1260 <sendData+0x14>
    1264:	00 00       	nop
    1266:	dc 2f       	mov	r29, r28
    1268:	d0 7f       	andi	r29, 0xF0	; 240
    126a:	8d 2f       	mov	r24, r29
    126c:	8d 60       	ori	r24, 0x0D	; 13
    126e:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1272:	8d 2f       	mov	r24, r29
    1274:	89 60       	ori	r24, 0x09	; 9
    1276:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    127a:	80 e1       	ldi	r24, 0x10	; 16
    127c:	c8 9f       	mul	r28, r24
    127e:	e0 01       	movw	r28, r0
    1280:	11 24       	eor	r1, r1
    1282:	8c 2f       	mov	r24, r28
    1284:	8d 60       	ori	r24, 0x0D	; 13
    1286:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    128a:	8c 2f       	mov	r24, r28
    128c:	89 60       	ori	r24, 0x09	; 9
    128e:	0e 94 34 07 	call	0xe68	; 0xe68 <sendByte>
    1292:	0e 94 04 07 	call	0xe08	; 0xe08 <sendStopCondition>
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <setCursor>:
    129c:	60 58       	subi	r22, 0x80	; 128
    129e:	90 e4       	ldi	r25, 0x40	; 64
    12a0:	89 9f       	mul	r24, r25
    12a2:	60 0d       	add	r22, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	86 2f       	mov	r24, r22
    12a8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sendCommand>
    12ac:	08 95       	ret

000012ae <writeString>:
/************************************************************************/
/* Writes a given char* (String) on the LCD                             */
/* The start location can be specified with the setCursor() funtion 	*/
/************************************************************************/
void writeString(char* character)
{
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while(character[i] != '\0')
    12b6:	80 81       	ld	r24, Z
    12b8:	88 23       	and	r24, r24
    12ba:	59 f0       	breq	.+22     	; 0x12d2 <writeString+0x24>
    12bc:	8f 01       	movw	r16, r30
    12be:	c0 e0       	ldi	r28, 0x00	; 0
/* Writes a given char on the LCD                                       */
/* The location can be specified with the setCursor() funtion			*/
/************************************************************************/
void writeChar(char character)
{
	sendData(character);
    12c0:	0e 94 26 09 	call	0x124c	; 0x124c <sendData>
{
	unsigned char i = 0;
	while(character[i] != '\0')
	{
		writeChar(character[i]);
		i++;
    12c4:	cf 5f       	subi	r28, 0xFF	; 255
/* The start location can be specified with the setCursor() funtion 	*/
/************************************************************************/
void writeString(char* character)
{
	unsigned char i = 0;
	while(character[i] != '\0')
    12c6:	f8 01       	movw	r30, r16
    12c8:	ec 0f       	add	r30, r28
    12ca:	f1 1d       	adc	r31, r1
    12cc:	80 81       	ld	r24, Z
    12ce:	81 11       	cpse	r24, r1
    12d0:	f7 cf       	rjmp	.-18     	; 0x12c0 <writeString+0x12>
	{
		writeChar(character[i]);
		i++;
	}
}
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <clearScreen>:
/************************************************************************/
/* Clears the screen                                                    */
/************************************************************************/
void clearScreen()
{
	sendCommand(0x01);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12e0:	8f e3       	ldi	r24, 0x3F	; 63
    12e2:	9f e1       	ldi	r25, 0x1F	; 31
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <clearScreen+0xa>
    12e8:	00 c0       	rjmp	.+0      	; 0x12ea <clearScreen+0x10>
    12ea:	00 00       	nop
    12ec:	08 95       	ret

000012ee <__divsf3>:
    12ee:	0e 94 8b 09 	call	0x1316	; 0x1316 <__divsf3x>
    12f2:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_round>
    12f6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscB>
    12fa:	58 f0       	brcs	.+22     	; 0x1312 <__divsf3+0x24>
    12fc:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fp_pscA>
    1300:	40 f0       	brcs	.+16     	; 0x1312 <__divsf3+0x24>
    1302:	29 f4       	brne	.+10     	; 0x130e <__divsf3+0x20>
    1304:	5f 3f       	cpi	r21, 0xFF	; 255
    1306:	29 f0       	breq	.+10     	; 0x1312 <__divsf3+0x24>
    1308:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_inf>
    130c:	51 11       	cpse	r21, r1
    130e:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_szero>
    1312:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_nan>

00001316 <__divsf3x>:
    1316:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_split3>
    131a:	68 f3       	brcs	.-38     	; 0x12f6 <__divsf3+0x8>

0000131c <__divsf3_pse>:
    131c:	99 23       	and	r25, r25
    131e:	b1 f3       	breq	.-20     	; 0x130c <__divsf3+0x1e>
    1320:	55 23       	and	r21, r21
    1322:	91 f3       	breq	.-28     	; 0x1308 <__divsf3+0x1a>
    1324:	95 1b       	sub	r25, r21
    1326:	55 0b       	sbc	r21, r21
    1328:	bb 27       	eor	r27, r27
    132a:	aa 27       	eor	r26, r26
    132c:	62 17       	cp	r22, r18
    132e:	73 07       	cpc	r23, r19
    1330:	84 07       	cpc	r24, r20
    1332:	38 f0       	brcs	.+14     	; 0x1342 <__divsf3_pse+0x26>
    1334:	9f 5f       	subi	r25, 0xFF	; 255
    1336:	5f 4f       	sbci	r21, 0xFF	; 255
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	44 1f       	adc	r20, r20
    133e:	aa 1f       	adc	r26, r26
    1340:	a9 f3       	breq	.-22     	; 0x132c <__divsf3_pse+0x10>
    1342:	35 d0       	rcall	.+106    	; 0x13ae <__divsf3_pse+0x92>
    1344:	0e 2e       	mov	r0, r30
    1346:	3a f0       	brmi	.+14     	; 0x1356 <__divsf3_pse+0x3a>
    1348:	e0 e8       	ldi	r30, 0x80	; 128
    134a:	32 d0       	rcall	.+100    	; 0x13b0 <__divsf3_pse+0x94>
    134c:	91 50       	subi	r25, 0x01	; 1
    134e:	50 40       	sbci	r21, 0x00	; 0
    1350:	e6 95       	lsr	r30
    1352:	00 1c       	adc	r0, r0
    1354:	ca f7       	brpl	.-14     	; 0x1348 <__divsf3_pse+0x2c>
    1356:	2b d0       	rcall	.+86     	; 0x13ae <__divsf3_pse+0x92>
    1358:	fe 2f       	mov	r31, r30
    135a:	29 d0       	rcall	.+82     	; 0x13ae <__divsf3_pse+0x92>
    135c:	66 0f       	add	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	88 1f       	adc	r24, r24
    1362:	bb 1f       	adc	r27, r27
    1364:	26 17       	cp	r18, r22
    1366:	37 07       	cpc	r19, r23
    1368:	48 07       	cpc	r20, r24
    136a:	ab 07       	cpc	r26, r27
    136c:	b0 e8       	ldi	r27, 0x80	; 128
    136e:	09 f0       	breq	.+2      	; 0x1372 <__divsf3_pse+0x56>
    1370:	bb 0b       	sbc	r27, r27
    1372:	80 2d       	mov	r24, r0
    1374:	bf 01       	movw	r22, r30
    1376:	ff 27       	eor	r31, r31
    1378:	93 58       	subi	r25, 0x83	; 131
    137a:	5f 4f       	sbci	r21, 0xFF	; 255
    137c:	3a f0       	brmi	.+14     	; 0x138c <__divsf3_pse+0x70>
    137e:	9e 3f       	cpi	r25, 0xFE	; 254
    1380:	51 05       	cpc	r21, r1
    1382:	78 f0       	brcs	.+30     	; 0x13a2 <__divsf3_pse+0x86>
    1384:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_inf>
    1388:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_szero>
    138c:	5f 3f       	cpi	r21, 0xFF	; 255
    138e:	e4 f3       	brlt	.-8      	; 0x1388 <__divsf3_pse+0x6c>
    1390:	98 3e       	cpi	r25, 0xE8	; 232
    1392:	d4 f3       	brlt	.-12     	; 0x1388 <__divsf3_pse+0x6c>
    1394:	86 95       	lsr	r24
    1396:	77 95       	ror	r23
    1398:	67 95       	ror	r22
    139a:	b7 95       	ror	r27
    139c:	f7 95       	ror	r31
    139e:	9f 5f       	subi	r25, 0xFF	; 255
    13a0:	c9 f7       	brne	.-14     	; 0x1394 <__divsf3_pse+0x78>
    13a2:	88 0f       	add	r24, r24
    13a4:	91 1d       	adc	r25, r1
    13a6:	96 95       	lsr	r25
    13a8:	87 95       	ror	r24
    13aa:	97 f9       	bld	r25, 7
    13ac:	08 95       	ret
    13ae:	e1 e0       	ldi	r30, 0x01	; 1
    13b0:	66 0f       	add	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	88 1f       	adc	r24, r24
    13b6:	bb 1f       	adc	r27, r27
    13b8:	62 17       	cp	r22, r18
    13ba:	73 07       	cpc	r23, r19
    13bc:	84 07       	cpc	r24, r20
    13be:	ba 07       	cpc	r27, r26
    13c0:	20 f0       	brcs	.+8      	; 0x13ca <__divsf3_pse+0xae>
    13c2:	62 1b       	sub	r22, r18
    13c4:	73 0b       	sbc	r23, r19
    13c6:	84 0b       	sbc	r24, r20
    13c8:	ba 0b       	sbc	r27, r26
    13ca:	ee 1f       	adc	r30, r30
    13cc:	88 f7       	brcc	.-30     	; 0x13b0 <__divsf3_pse+0x94>
    13ce:	e0 95       	com	r30
    13d0:	08 95       	ret

000013d2 <__mulsi3>:
    13d2:	db 01       	movw	r26, r22
    13d4:	8f 93       	push	r24
    13d6:	9f 93       	push	r25
    13d8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__muluhisi3>
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	a2 9f       	mul	r26, r18
    13e2:	80 0d       	add	r24, r0
    13e4:	91 1d       	adc	r25, r1
    13e6:	a3 9f       	mul	r26, r19
    13e8:	90 0d       	add	r25, r0
    13ea:	b2 9f       	mul	r27, r18
    13ec:	90 0d       	add	r25, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	08 95       	ret

000013f2 <__muluhisi3>:
    13f2:	0e 94 04 0a 	call	0x1408	; 0x1408 <__umulhisi3>
    13f6:	a5 9f       	mul	r26, r21
    13f8:	90 0d       	add	r25, r0
    13fa:	b4 9f       	mul	r27, r20
    13fc:	90 0d       	add	r25, r0
    13fe:	a4 9f       	mul	r26, r20
    1400:	80 0d       	add	r24, r0
    1402:	91 1d       	adc	r25, r1
    1404:	11 24       	eor	r1, r1
    1406:	08 95       	ret

00001408 <__umulhisi3>:
    1408:	a2 9f       	mul	r26, r18
    140a:	b0 01       	movw	r22, r0
    140c:	b3 9f       	mul	r27, r19
    140e:	c0 01       	movw	r24, r0
    1410:	a3 9f       	mul	r26, r19
    1412:	70 0d       	add	r23, r0
    1414:	81 1d       	adc	r24, r1
    1416:	11 24       	eor	r1, r1
    1418:	91 1d       	adc	r25, r1
    141a:	b2 9f       	mul	r27, r18
    141c:	70 0d       	add	r23, r0
    141e:	81 1d       	adc	r24, r1
    1420:	11 24       	eor	r1, r1
    1422:	91 1d       	adc	r25, r1
    1424:	08 95       	ret

00001426 <sprintf>:
    1426:	ae e0       	ldi	r26, 0x0E	; 14
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e9 e1       	ldi	r30, 0x19	; 25
    142c:	fa e0       	ldi	r31, 0x0A	; 10
    142e:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__prologue_saves__+0x1c>
    1432:	0d 89       	ldd	r16, Y+21	; 0x15
    1434:	1e 89       	ldd	r17, Y+22	; 0x16
    1436:	86 e0       	ldi	r24, 0x06	; 6
    1438:	8c 83       	std	Y+4, r24	; 0x04
    143a:	1a 83       	std	Y+2, r17	; 0x02
    143c:	09 83       	std	Y+1, r16	; 0x01
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	9f e7       	ldi	r25, 0x7F	; 127
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	ae 01       	movw	r20, r28
    1448:	47 5e       	subi	r20, 0xE7	; 231
    144a:	5f 4f       	sbci	r21, 0xFF	; 255
    144c:	6f 89       	ldd	r22, Y+23	; 0x17
    144e:	78 8d       	ldd	r23, Y+24	; 0x18
    1450:	ce 01       	movw	r24, r28
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	0e 94 35 0a 	call	0x146a	; 0x146a <vfprintf>
    1458:	ef 81       	ldd	r30, Y+7	; 0x07
    145a:	f8 85       	ldd	r31, Y+8	; 0x08
    145c:	e0 0f       	add	r30, r16
    145e:	f1 1f       	adc	r31, r17
    1460:	10 82       	st	Z, r1
    1462:	2e 96       	adiw	r28, 0x0e	; 14
    1464:	e4 e0       	ldi	r30, 0x04	; 4
    1466:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__epilogue_restores__+0x1c>

0000146a <vfprintf>:
    146a:	ab e0       	ldi	r26, 0x0B	; 11
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	fa e0       	ldi	r31, 0x0A	; 10
    1472:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__prologue_saves__>
    1476:	6c 01       	movw	r12, r24
    1478:	7b 01       	movw	r14, r22
    147a:	8a 01       	movw	r16, r20
    147c:	fc 01       	movw	r30, r24
    147e:	17 82       	std	Z+7, r1	; 0x07
    1480:	16 82       	std	Z+6, r1	; 0x06
    1482:	83 81       	ldd	r24, Z+3	; 0x03
    1484:	81 ff       	sbrs	r24, 1
    1486:	cc c1       	rjmp	.+920    	; 0x1820 <vfprintf+0x3b6>
    1488:	ce 01       	movw	r24, r28
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	3c 01       	movw	r6, r24
    148e:	f6 01       	movw	r30, r12
    1490:	93 81       	ldd	r25, Z+3	; 0x03
    1492:	f7 01       	movw	r30, r14
    1494:	93 fd       	sbrc	r25, 3
    1496:	85 91       	lpm	r24, Z+
    1498:	93 ff       	sbrs	r25, 3
    149a:	81 91       	ld	r24, Z+
    149c:	7f 01       	movw	r14, r30
    149e:	88 23       	and	r24, r24
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <vfprintf+0x3a>
    14a2:	ba c1       	rjmp	.+884    	; 0x1818 <vfprintf+0x3ae>
    14a4:	85 32       	cpi	r24, 0x25	; 37
    14a6:	39 f4       	brne	.+14     	; 0x14b6 <vfprintf+0x4c>
    14a8:	93 fd       	sbrc	r25, 3
    14aa:	85 91       	lpm	r24, Z+
    14ac:	93 ff       	sbrs	r25, 3
    14ae:	81 91       	ld	r24, Z+
    14b0:	7f 01       	movw	r14, r30
    14b2:	85 32       	cpi	r24, 0x25	; 37
    14b4:	29 f4       	brne	.+10     	; 0x14c0 <vfprintf+0x56>
    14b6:	b6 01       	movw	r22, r12
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    14be:	e7 cf       	rjmp	.-50     	; 0x148e <vfprintf+0x24>
    14c0:	91 2c       	mov	r9, r1
    14c2:	21 2c       	mov	r2, r1
    14c4:	31 2c       	mov	r3, r1
    14c6:	ff e1       	ldi	r31, 0x1F	; 31
    14c8:	f3 15       	cp	r31, r3
    14ca:	d8 f0       	brcs	.+54     	; 0x1502 <vfprintf+0x98>
    14cc:	8b 32       	cpi	r24, 0x2B	; 43
    14ce:	79 f0       	breq	.+30     	; 0x14ee <vfprintf+0x84>
    14d0:	38 f4       	brcc	.+14     	; 0x14e0 <vfprintf+0x76>
    14d2:	80 32       	cpi	r24, 0x20	; 32
    14d4:	79 f0       	breq	.+30     	; 0x14f4 <vfprintf+0x8a>
    14d6:	83 32       	cpi	r24, 0x23	; 35
    14d8:	a1 f4       	brne	.+40     	; 0x1502 <vfprintf+0x98>
    14da:	23 2d       	mov	r18, r3
    14dc:	20 61       	ori	r18, 0x10	; 16
    14de:	1d c0       	rjmp	.+58     	; 0x151a <vfprintf+0xb0>
    14e0:	8d 32       	cpi	r24, 0x2D	; 45
    14e2:	61 f0       	breq	.+24     	; 0x14fc <vfprintf+0x92>
    14e4:	80 33       	cpi	r24, 0x30	; 48
    14e6:	69 f4       	brne	.+26     	; 0x1502 <vfprintf+0x98>
    14e8:	23 2d       	mov	r18, r3
    14ea:	21 60       	ori	r18, 0x01	; 1
    14ec:	16 c0       	rjmp	.+44     	; 0x151a <vfprintf+0xb0>
    14ee:	83 2d       	mov	r24, r3
    14f0:	82 60       	ori	r24, 0x02	; 2
    14f2:	38 2e       	mov	r3, r24
    14f4:	e3 2d       	mov	r30, r3
    14f6:	e4 60       	ori	r30, 0x04	; 4
    14f8:	3e 2e       	mov	r3, r30
    14fa:	2a c0       	rjmp	.+84     	; 0x1550 <vfprintf+0xe6>
    14fc:	f3 2d       	mov	r31, r3
    14fe:	f8 60       	ori	r31, 0x08	; 8
    1500:	1d c0       	rjmp	.+58     	; 0x153c <vfprintf+0xd2>
    1502:	37 fc       	sbrc	r3, 7
    1504:	2d c0       	rjmp	.+90     	; 0x1560 <vfprintf+0xf6>
    1506:	20 ed       	ldi	r18, 0xD0	; 208
    1508:	28 0f       	add	r18, r24
    150a:	2a 30       	cpi	r18, 0x0A	; 10
    150c:	40 f0       	brcs	.+16     	; 0x151e <vfprintf+0xb4>
    150e:	8e 32       	cpi	r24, 0x2E	; 46
    1510:	b9 f4       	brne	.+46     	; 0x1540 <vfprintf+0xd6>
    1512:	36 fc       	sbrc	r3, 6
    1514:	81 c1       	rjmp	.+770    	; 0x1818 <vfprintf+0x3ae>
    1516:	23 2d       	mov	r18, r3
    1518:	20 64       	ori	r18, 0x40	; 64
    151a:	32 2e       	mov	r3, r18
    151c:	19 c0       	rjmp	.+50     	; 0x1550 <vfprintf+0xe6>
    151e:	36 fe       	sbrs	r3, 6
    1520:	06 c0       	rjmp	.+12     	; 0x152e <vfprintf+0xc4>
    1522:	8a e0       	ldi	r24, 0x0A	; 10
    1524:	98 9e       	mul	r9, r24
    1526:	20 0d       	add	r18, r0
    1528:	11 24       	eor	r1, r1
    152a:	92 2e       	mov	r9, r18
    152c:	11 c0       	rjmp	.+34     	; 0x1550 <vfprintf+0xe6>
    152e:	ea e0       	ldi	r30, 0x0A	; 10
    1530:	2e 9e       	mul	r2, r30
    1532:	20 0d       	add	r18, r0
    1534:	11 24       	eor	r1, r1
    1536:	22 2e       	mov	r2, r18
    1538:	f3 2d       	mov	r31, r3
    153a:	f0 62       	ori	r31, 0x20	; 32
    153c:	3f 2e       	mov	r3, r31
    153e:	08 c0       	rjmp	.+16     	; 0x1550 <vfprintf+0xe6>
    1540:	8c 36       	cpi	r24, 0x6C	; 108
    1542:	21 f4       	brne	.+8      	; 0x154c <vfprintf+0xe2>
    1544:	83 2d       	mov	r24, r3
    1546:	80 68       	ori	r24, 0x80	; 128
    1548:	38 2e       	mov	r3, r24
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0xe6>
    154c:	88 36       	cpi	r24, 0x68	; 104
    154e:	41 f4       	brne	.+16     	; 0x1560 <vfprintf+0xf6>
    1550:	f7 01       	movw	r30, r14
    1552:	93 fd       	sbrc	r25, 3
    1554:	85 91       	lpm	r24, Z+
    1556:	93 ff       	sbrs	r25, 3
    1558:	81 91       	ld	r24, Z+
    155a:	7f 01       	movw	r14, r30
    155c:	81 11       	cpse	r24, r1
    155e:	b3 cf       	rjmp	.-154    	; 0x14c6 <vfprintf+0x5c>
    1560:	98 2f       	mov	r25, r24
    1562:	9f 7d       	andi	r25, 0xDF	; 223
    1564:	95 54       	subi	r25, 0x45	; 69
    1566:	93 30       	cpi	r25, 0x03	; 3
    1568:	28 f4       	brcc	.+10     	; 0x1574 <vfprintf+0x10a>
    156a:	0c 5f       	subi	r16, 0xFC	; 252
    156c:	1f 4f       	sbci	r17, 0xFF	; 255
    156e:	9f e3       	ldi	r25, 0x3F	; 63
    1570:	99 83       	std	Y+1, r25	; 0x01
    1572:	0d c0       	rjmp	.+26     	; 0x158e <vfprintf+0x124>
    1574:	83 36       	cpi	r24, 0x63	; 99
    1576:	31 f0       	breq	.+12     	; 0x1584 <vfprintf+0x11a>
    1578:	83 37       	cpi	r24, 0x73	; 115
    157a:	71 f0       	breq	.+28     	; 0x1598 <vfprintf+0x12e>
    157c:	83 35       	cpi	r24, 0x53	; 83
    157e:	09 f0       	breq	.+2      	; 0x1582 <vfprintf+0x118>
    1580:	59 c0       	rjmp	.+178    	; 0x1634 <vfprintf+0x1ca>
    1582:	21 c0       	rjmp	.+66     	; 0x15c6 <vfprintf+0x15c>
    1584:	f8 01       	movw	r30, r16
    1586:	80 81       	ld	r24, Z
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	0e 5f       	subi	r16, 0xFE	; 254
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
    158e:	88 24       	eor	r8, r8
    1590:	83 94       	inc	r8
    1592:	91 2c       	mov	r9, r1
    1594:	53 01       	movw	r10, r6
    1596:	13 c0       	rjmp	.+38     	; 0x15be <vfprintf+0x154>
    1598:	28 01       	movw	r4, r16
    159a:	f2 e0       	ldi	r31, 0x02	; 2
    159c:	4f 0e       	add	r4, r31
    159e:	51 1c       	adc	r5, r1
    15a0:	f8 01       	movw	r30, r16
    15a2:	a0 80       	ld	r10, Z
    15a4:	b1 80       	ldd	r11, Z+1	; 0x01
    15a6:	36 fe       	sbrs	r3, 6
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <vfprintf+0x146>
    15aa:	69 2d       	mov	r22, r9
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <vfprintf+0x14a>
    15b0:	6f ef       	ldi	r22, 0xFF	; 255
    15b2:	7f ef       	ldi	r23, 0xFF	; 255
    15b4:	c5 01       	movw	r24, r10
    15b6:	0e 94 21 0c 	call	0x1842	; 0x1842 <strnlen>
    15ba:	4c 01       	movw	r8, r24
    15bc:	82 01       	movw	r16, r4
    15be:	f3 2d       	mov	r31, r3
    15c0:	ff 77       	andi	r31, 0x7F	; 127
    15c2:	3f 2e       	mov	r3, r31
    15c4:	16 c0       	rjmp	.+44     	; 0x15f2 <vfprintf+0x188>
    15c6:	28 01       	movw	r4, r16
    15c8:	22 e0       	ldi	r18, 0x02	; 2
    15ca:	42 0e       	add	r4, r18
    15cc:	51 1c       	adc	r5, r1
    15ce:	f8 01       	movw	r30, r16
    15d0:	a0 80       	ld	r10, Z
    15d2:	b1 80       	ldd	r11, Z+1	; 0x01
    15d4:	36 fe       	sbrs	r3, 6
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <vfprintf+0x174>
    15d8:	69 2d       	mov	r22, r9
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <vfprintf+0x178>
    15de:	6f ef       	ldi	r22, 0xFF	; 255
    15e0:	7f ef       	ldi	r23, 0xFF	; 255
    15e2:	c5 01       	movw	r24, r10
    15e4:	0e 94 16 0c 	call	0x182c	; 0x182c <strnlen_P>
    15e8:	4c 01       	movw	r8, r24
    15ea:	f3 2d       	mov	r31, r3
    15ec:	f0 68       	ori	r31, 0x80	; 128
    15ee:	3f 2e       	mov	r3, r31
    15f0:	82 01       	movw	r16, r4
    15f2:	33 fc       	sbrc	r3, 3
    15f4:	1b c0       	rjmp	.+54     	; 0x162c <vfprintf+0x1c2>
    15f6:	82 2d       	mov	r24, r2
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	88 16       	cp	r8, r24
    15fc:	99 06       	cpc	r9, r25
    15fe:	b0 f4       	brcc	.+44     	; 0x162c <vfprintf+0x1c2>
    1600:	b6 01       	movw	r22, r12
    1602:	80 e2       	ldi	r24, 0x20	; 32
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    160a:	2a 94       	dec	r2
    160c:	f4 cf       	rjmp	.-24     	; 0x15f6 <vfprintf+0x18c>
    160e:	f5 01       	movw	r30, r10
    1610:	37 fc       	sbrc	r3, 7
    1612:	85 91       	lpm	r24, Z+
    1614:	37 fe       	sbrs	r3, 7
    1616:	81 91       	ld	r24, Z+
    1618:	5f 01       	movw	r10, r30
    161a:	b6 01       	movw	r22, r12
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    1622:	21 10       	cpse	r2, r1
    1624:	2a 94       	dec	r2
    1626:	21 e0       	ldi	r18, 0x01	; 1
    1628:	82 1a       	sub	r8, r18
    162a:	91 08       	sbc	r9, r1
    162c:	81 14       	cp	r8, r1
    162e:	91 04       	cpc	r9, r1
    1630:	71 f7       	brne	.-36     	; 0x160e <vfprintf+0x1a4>
    1632:	e8 c0       	rjmp	.+464    	; 0x1804 <vfprintf+0x39a>
    1634:	84 36       	cpi	r24, 0x64	; 100
    1636:	11 f0       	breq	.+4      	; 0x163c <vfprintf+0x1d2>
    1638:	89 36       	cpi	r24, 0x69	; 105
    163a:	41 f5       	brne	.+80     	; 0x168c <vfprintf+0x222>
    163c:	f8 01       	movw	r30, r16
    163e:	37 fe       	sbrs	r3, 7
    1640:	07 c0       	rjmp	.+14     	; 0x1650 <vfprintf+0x1e6>
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	0c 5f       	subi	r16, 0xFC	; 252
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <vfprintf+0x1f6>
    1650:	60 81       	ld	r22, Z
    1652:	71 81       	ldd	r23, Z+1	; 0x01
    1654:	07 2e       	mov	r0, r23
    1656:	00 0c       	add	r0, r0
    1658:	88 0b       	sbc	r24, r24
    165a:	99 0b       	sbc	r25, r25
    165c:	0e 5f       	subi	r16, 0xFE	; 254
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	f3 2d       	mov	r31, r3
    1662:	ff 76       	andi	r31, 0x6F	; 111
    1664:	3f 2e       	mov	r3, r31
    1666:	97 ff       	sbrs	r25, 7
    1668:	09 c0       	rjmp	.+18     	; 0x167c <vfprintf+0x212>
    166a:	90 95       	com	r25
    166c:	80 95       	com	r24
    166e:	70 95       	com	r23
    1670:	61 95       	neg	r22
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	8f 4f       	sbci	r24, 0xFF	; 255
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	f0 68       	ori	r31, 0x80	; 128
    167a:	3f 2e       	mov	r3, r31
    167c:	2a e0       	ldi	r18, 0x0A	; 10
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	a3 01       	movw	r20, r6
    1682:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__ultoa_invert>
    1686:	88 2e       	mov	r8, r24
    1688:	86 18       	sub	r8, r6
    168a:	45 c0       	rjmp	.+138    	; 0x1716 <vfprintf+0x2ac>
    168c:	85 37       	cpi	r24, 0x75	; 117
    168e:	31 f4       	brne	.+12     	; 0x169c <vfprintf+0x232>
    1690:	23 2d       	mov	r18, r3
    1692:	2f 7e       	andi	r18, 0xEF	; 239
    1694:	b2 2e       	mov	r11, r18
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	25 c0       	rjmp	.+74     	; 0x16e6 <vfprintf+0x27c>
    169c:	93 2d       	mov	r25, r3
    169e:	99 7f       	andi	r25, 0xF9	; 249
    16a0:	b9 2e       	mov	r11, r25
    16a2:	8f 36       	cpi	r24, 0x6F	; 111
    16a4:	c1 f0       	breq	.+48     	; 0x16d6 <vfprintf+0x26c>
    16a6:	18 f4       	brcc	.+6      	; 0x16ae <vfprintf+0x244>
    16a8:	88 35       	cpi	r24, 0x58	; 88
    16aa:	79 f0       	breq	.+30     	; 0x16ca <vfprintf+0x260>
    16ac:	b5 c0       	rjmp	.+362    	; 0x1818 <vfprintf+0x3ae>
    16ae:	80 37       	cpi	r24, 0x70	; 112
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <vfprintf+0x24e>
    16b2:	88 37       	cpi	r24, 0x78	; 120
    16b4:	21 f0       	breq	.+8      	; 0x16be <vfprintf+0x254>
    16b6:	b0 c0       	rjmp	.+352    	; 0x1818 <vfprintf+0x3ae>
    16b8:	e9 2f       	mov	r30, r25
    16ba:	e0 61       	ori	r30, 0x10	; 16
    16bc:	be 2e       	mov	r11, r30
    16be:	b4 fe       	sbrs	r11, 4
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <vfprintf+0x272>
    16c2:	fb 2d       	mov	r31, r11
    16c4:	f4 60       	ori	r31, 0x04	; 4
    16c6:	bf 2e       	mov	r11, r31
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <vfprintf+0x272>
    16ca:	34 fe       	sbrs	r3, 4
    16cc:	0a c0       	rjmp	.+20     	; 0x16e2 <vfprintf+0x278>
    16ce:	29 2f       	mov	r18, r25
    16d0:	26 60       	ori	r18, 0x06	; 6
    16d2:	b2 2e       	mov	r11, r18
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <vfprintf+0x278>
    16d6:	28 e0       	ldi	r18, 0x08	; 8
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <vfprintf+0x27c>
    16dc:	20 e1       	ldi	r18, 0x10	; 16
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <vfprintf+0x27c>
    16e2:	20 e1       	ldi	r18, 0x10	; 16
    16e4:	32 e0       	ldi	r19, 0x02	; 2
    16e6:	f8 01       	movw	r30, r16
    16e8:	b7 fe       	sbrs	r11, 7
    16ea:	07 c0       	rjmp	.+14     	; 0x16fa <vfprintf+0x290>
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	0c 5f       	subi	r16, 0xFC	; 252
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <vfprintf+0x29c>
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 5f       	subi	r16, 0xFE	; 254
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	a3 01       	movw	r20, r6
    1708:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__ultoa_invert>
    170c:	88 2e       	mov	r8, r24
    170e:	86 18       	sub	r8, r6
    1710:	fb 2d       	mov	r31, r11
    1712:	ff 77       	andi	r31, 0x7F	; 127
    1714:	3f 2e       	mov	r3, r31
    1716:	36 fe       	sbrs	r3, 6
    1718:	0d c0       	rjmp	.+26     	; 0x1734 <vfprintf+0x2ca>
    171a:	23 2d       	mov	r18, r3
    171c:	2e 7f       	andi	r18, 0xFE	; 254
    171e:	a2 2e       	mov	r10, r18
    1720:	89 14       	cp	r8, r9
    1722:	58 f4       	brcc	.+22     	; 0x173a <vfprintf+0x2d0>
    1724:	34 fe       	sbrs	r3, 4
    1726:	0b c0       	rjmp	.+22     	; 0x173e <vfprintf+0x2d4>
    1728:	32 fc       	sbrc	r3, 2
    172a:	09 c0       	rjmp	.+18     	; 0x173e <vfprintf+0x2d4>
    172c:	83 2d       	mov	r24, r3
    172e:	8e 7e       	andi	r24, 0xEE	; 238
    1730:	a8 2e       	mov	r10, r24
    1732:	05 c0       	rjmp	.+10     	; 0x173e <vfprintf+0x2d4>
    1734:	b8 2c       	mov	r11, r8
    1736:	a3 2c       	mov	r10, r3
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <vfprintf+0x2d6>
    173a:	b8 2c       	mov	r11, r8
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <vfprintf+0x2d6>
    173e:	b9 2c       	mov	r11, r9
    1740:	a4 fe       	sbrs	r10, 4
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <vfprintf+0x2f8>
    1744:	fe 01       	movw	r30, r28
    1746:	e8 0d       	add	r30, r8
    1748:	f1 1d       	adc	r31, r1
    174a:	80 81       	ld	r24, Z
    174c:	80 33       	cpi	r24, 0x30	; 48
    174e:	21 f4       	brne	.+8      	; 0x1758 <vfprintf+0x2ee>
    1750:	9a 2d       	mov	r25, r10
    1752:	99 7e       	andi	r25, 0xE9	; 233
    1754:	a9 2e       	mov	r10, r25
    1756:	09 c0       	rjmp	.+18     	; 0x176a <vfprintf+0x300>
    1758:	a2 fe       	sbrs	r10, 2
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <vfprintf+0x2fe>
    175c:	b3 94       	inc	r11
    175e:	b3 94       	inc	r11
    1760:	04 c0       	rjmp	.+8      	; 0x176a <vfprintf+0x300>
    1762:	8a 2d       	mov	r24, r10
    1764:	86 78       	andi	r24, 0x86	; 134
    1766:	09 f0       	breq	.+2      	; 0x176a <vfprintf+0x300>
    1768:	b3 94       	inc	r11
    176a:	a3 fc       	sbrc	r10, 3
    176c:	11 c0       	rjmp	.+34     	; 0x1790 <vfprintf+0x326>
    176e:	a0 fe       	sbrs	r10, 0
    1770:	06 c0       	rjmp	.+12     	; 0x177e <vfprintf+0x314>
    1772:	b2 14       	cp	r11, r2
    1774:	88 f4       	brcc	.+34     	; 0x1798 <vfprintf+0x32e>
    1776:	28 0c       	add	r2, r8
    1778:	92 2c       	mov	r9, r2
    177a:	9b 18       	sub	r9, r11
    177c:	0e c0       	rjmp	.+28     	; 0x179a <vfprintf+0x330>
    177e:	b2 14       	cp	r11, r2
    1780:	60 f4       	brcc	.+24     	; 0x179a <vfprintf+0x330>
    1782:	b6 01       	movw	r22, r12
    1784:	80 e2       	ldi	r24, 0x20	; 32
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    178c:	b3 94       	inc	r11
    178e:	f7 cf       	rjmp	.-18     	; 0x177e <vfprintf+0x314>
    1790:	b2 14       	cp	r11, r2
    1792:	18 f4       	brcc	.+6      	; 0x179a <vfprintf+0x330>
    1794:	2b 18       	sub	r2, r11
    1796:	02 c0       	rjmp	.+4      	; 0x179c <vfprintf+0x332>
    1798:	98 2c       	mov	r9, r8
    179a:	21 2c       	mov	r2, r1
    179c:	a4 fe       	sbrs	r10, 4
    179e:	10 c0       	rjmp	.+32     	; 0x17c0 <vfprintf+0x356>
    17a0:	b6 01       	movw	r22, r12
    17a2:	80 e3       	ldi	r24, 0x30	; 48
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    17aa:	a2 fe       	sbrs	r10, 2
    17ac:	17 c0       	rjmp	.+46     	; 0x17dc <vfprintf+0x372>
    17ae:	a1 fc       	sbrc	r10, 1
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <vfprintf+0x34e>
    17b2:	88 e7       	ldi	r24, 0x78	; 120
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <vfprintf+0x352>
    17b8:	88 e5       	ldi	r24, 0x58	; 88
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	b6 01       	movw	r22, r12
    17be:	0c c0       	rjmp	.+24     	; 0x17d8 <vfprintf+0x36e>
    17c0:	8a 2d       	mov	r24, r10
    17c2:	86 78       	andi	r24, 0x86	; 134
    17c4:	59 f0       	breq	.+22     	; 0x17dc <vfprintf+0x372>
    17c6:	a1 fe       	sbrs	r10, 1
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <vfprintf+0x364>
    17ca:	8b e2       	ldi	r24, 0x2B	; 43
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x366>
    17ce:	80 e2       	ldi	r24, 0x20	; 32
    17d0:	a7 fc       	sbrc	r10, 7
    17d2:	8d e2       	ldi	r24, 0x2D	; 45
    17d4:	b6 01       	movw	r22, r12
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    17dc:	89 14       	cp	r8, r9
    17de:	38 f4       	brcc	.+14     	; 0x17ee <vfprintf+0x384>
    17e0:	b6 01       	movw	r22, r12
    17e2:	80 e3       	ldi	r24, 0x30	; 48
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    17ea:	9a 94       	dec	r9
    17ec:	f7 cf       	rjmp	.-18     	; 0x17dc <vfprintf+0x372>
    17ee:	8a 94       	dec	r8
    17f0:	f3 01       	movw	r30, r6
    17f2:	e8 0d       	add	r30, r8
    17f4:	f1 1d       	adc	r31, r1
    17f6:	80 81       	ld	r24, Z
    17f8:	b6 01       	movw	r22, r12
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    1800:	81 10       	cpse	r8, r1
    1802:	f5 cf       	rjmp	.-22     	; 0x17ee <vfprintf+0x384>
    1804:	22 20       	and	r2, r2
    1806:	09 f4       	brne	.+2      	; 0x180a <vfprintf+0x3a0>
    1808:	42 ce       	rjmp	.-892    	; 0x148e <vfprintf+0x24>
    180a:	b6 01       	movw	r22, r12
    180c:	80 e2       	ldi	r24, 0x20	; 32
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    1814:	2a 94       	dec	r2
    1816:	f6 cf       	rjmp	.-20     	; 0x1804 <vfprintf+0x39a>
    1818:	f6 01       	movw	r30, r12
    181a:	86 81       	ldd	r24, Z+6	; 0x06
    181c:	97 81       	ldd	r25, Z+7	; 0x07
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <vfprintf+0x3ba>
    1820:	8f ef       	ldi	r24, 0xFF	; 255
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	2b 96       	adiw	r28, 0x0b	; 11
    1826:	e2 e1       	ldi	r30, 0x12	; 18
    1828:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__epilogue_restores__>

0000182c <strnlen_P>:
    182c:	fc 01       	movw	r30, r24
    182e:	05 90       	lpm	r0, Z+
    1830:	61 50       	subi	r22, 0x01	; 1
    1832:	70 40       	sbci	r23, 0x00	; 0
    1834:	01 10       	cpse	r0, r1
    1836:	d8 f7       	brcc	.-10     	; 0x182e <strnlen_P+0x2>
    1838:	80 95       	com	r24
    183a:	90 95       	com	r25
    183c:	8e 0f       	add	r24, r30
    183e:	9f 1f       	adc	r25, r31
    1840:	08 95       	ret

00001842 <strnlen>:
    1842:	fc 01       	movw	r30, r24
    1844:	61 50       	subi	r22, 0x01	; 1
    1846:	70 40       	sbci	r23, 0x00	; 0
    1848:	01 90       	ld	r0, Z+
    184a:	01 10       	cpse	r0, r1
    184c:	d8 f7       	brcc	.-10     	; 0x1844 <strnlen+0x2>
    184e:	80 95       	com	r24
    1850:	90 95       	com	r25
    1852:	8e 0f       	add	r24, r30
    1854:	9f 1f       	adc	r25, r31
    1856:	08 95       	ret

00001858 <fputc>:
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	fb 01       	movw	r30, r22
    1862:	23 81       	ldd	r18, Z+3	; 0x03
    1864:	21 fd       	sbrc	r18, 1
    1866:	03 c0       	rjmp	.+6      	; 0x186e <fputc+0x16>
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	9f ef       	ldi	r25, 0xFF	; 255
    186c:	2c c0       	rjmp	.+88     	; 0x18c6 <fputc+0x6e>
    186e:	22 ff       	sbrs	r18, 2
    1870:	16 c0       	rjmp	.+44     	; 0x189e <fputc+0x46>
    1872:	46 81       	ldd	r20, Z+6	; 0x06
    1874:	57 81       	ldd	r21, Z+7	; 0x07
    1876:	24 81       	ldd	r18, Z+4	; 0x04
    1878:	35 81       	ldd	r19, Z+5	; 0x05
    187a:	42 17       	cp	r20, r18
    187c:	53 07       	cpc	r21, r19
    187e:	44 f4       	brge	.+16     	; 0x1890 <fputc+0x38>
    1880:	a0 81       	ld	r26, Z
    1882:	b1 81       	ldd	r27, Z+1	; 0x01
    1884:	9d 01       	movw	r18, r26
    1886:	2f 5f       	subi	r18, 0xFF	; 255
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
    188a:	31 83       	std	Z+1, r19	; 0x01
    188c:	20 83       	st	Z, r18
    188e:	8c 93       	st	X, r24
    1890:	26 81       	ldd	r18, Z+6	; 0x06
    1892:	37 81       	ldd	r19, Z+7	; 0x07
    1894:	2f 5f       	subi	r18, 0xFF	; 255
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	37 83       	std	Z+7, r19	; 0x07
    189a:	26 83       	std	Z+6, r18	; 0x06
    189c:	14 c0       	rjmp	.+40     	; 0x18c6 <fputc+0x6e>
    189e:	8b 01       	movw	r16, r22
    18a0:	ec 01       	movw	r28, r24
    18a2:	fb 01       	movw	r30, r22
    18a4:	00 84       	ldd	r0, Z+8	; 0x08
    18a6:	f1 85       	ldd	r31, Z+9	; 0x09
    18a8:	e0 2d       	mov	r30, r0
    18aa:	09 95       	icall
    18ac:	89 2b       	or	r24, r25
    18ae:	e1 f6       	brne	.-72     	; 0x1868 <fputc+0x10>
    18b0:	d8 01       	movw	r26, r16
    18b2:	16 96       	adiw	r26, 0x06	; 6
    18b4:	8d 91       	ld	r24, X+
    18b6:	9c 91       	ld	r25, X
    18b8:	17 97       	sbiw	r26, 0x07	; 7
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	17 96       	adiw	r26, 0x07	; 7
    18be:	9c 93       	st	X, r25
    18c0:	8e 93       	st	-X, r24
    18c2:	16 97       	sbiw	r26, 0x06	; 6
    18c4:	ce 01       	movw	r24, r28
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <__ultoa_invert>:
    18d0:	fa 01       	movw	r30, r20
    18d2:	aa 27       	eor	r26, r26
    18d4:	28 30       	cpi	r18, 0x08	; 8
    18d6:	51 f1       	breq	.+84     	; 0x192c <__ultoa_invert+0x5c>
    18d8:	20 31       	cpi	r18, 0x10	; 16
    18da:	81 f1       	breq	.+96     	; 0x193c <__ultoa_invert+0x6c>
    18dc:	e8 94       	clt
    18de:	6f 93       	push	r22
    18e0:	6e 7f       	andi	r22, 0xFE	; 254
    18e2:	6e 5f       	subi	r22, 0xFE	; 254
    18e4:	7f 4f       	sbci	r23, 0xFF	; 255
    18e6:	8f 4f       	sbci	r24, 0xFF	; 255
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	af 4f       	sbci	r26, 0xFF	; 255
    18ec:	b1 e0       	ldi	r27, 0x01	; 1
    18ee:	3e d0       	rcall	.+124    	; 0x196c <__ultoa_invert+0x9c>
    18f0:	b4 e0       	ldi	r27, 0x04	; 4
    18f2:	3c d0       	rcall	.+120    	; 0x196c <__ultoa_invert+0x9c>
    18f4:	67 0f       	add	r22, r23
    18f6:	78 1f       	adc	r23, r24
    18f8:	89 1f       	adc	r24, r25
    18fa:	9a 1f       	adc	r25, r26
    18fc:	a1 1d       	adc	r26, r1
    18fe:	68 0f       	add	r22, r24
    1900:	79 1f       	adc	r23, r25
    1902:	8a 1f       	adc	r24, r26
    1904:	91 1d       	adc	r25, r1
    1906:	a1 1d       	adc	r26, r1
    1908:	6a 0f       	add	r22, r26
    190a:	71 1d       	adc	r23, r1
    190c:	81 1d       	adc	r24, r1
    190e:	91 1d       	adc	r25, r1
    1910:	a1 1d       	adc	r26, r1
    1912:	20 d0       	rcall	.+64     	; 0x1954 <__ultoa_invert+0x84>
    1914:	09 f4       	brne	.+2      	; 0x1918 <__ultoa_invert+0x48>
    1916:	68 94       	set
    1918:	3f 91       	pop	r19
    191a:	2a e0       	ldi	r18, 0x0A	; 10
    191c:	26 9f       	mul	r18, r22
    191e:	11 24       	eor	r1, r1
    1920:	30 19       	sub	r19, r0
    1922:	30 5d       	subi	r19, 0xD0	; 208
    1924:	31 93       	st	Z+, r19
    1926:	de f6       	brtc	.-74     	; 0x18de <__ultoa_invert+0xe>
    1928:	cf 01       	movw	r24, r30
    192a:	08 95       	ret
    192c:	46 2f       	mov	r20, r22
    192e:	47 70       	andi	r20, 0x07	; 7
    1930:	40 5d       	subi	r20, 0xD0	; 208
    1932:	41 93       	st	Z+, r20
    1934:	b3 e0       	ldi	r27, 0x03	; 3
    1936:	0f d0       	rcall	.+30     	; 0x1956 <__ultoa_invert+0x86>
    1938:	c9 f7       	brne	.-14     	; 0x192c <__ultoa_invert+0x5c>
    193a:	f6 cf       	rjmp	.-20     	; 0x1928 <__ultoa_invert+0x58>
    193c:	46 2f       	mov	r20, r22
    193e:	4f 70       	andi	r20, 0x0F	; 15
    1940:	40 5d       	subi	r20, 0xD0	; 208
    1942:	4a 33       	cpi	r20, 0x3A	; 58
    1944:	18 f0       	brcs	.+6      	; 0x194c <__ultoa_invert+0x7c>
    1946:	49 5d       	subi	r20, 0xD9	; 217
    1948:	31 fd       	sbrc	r19, 1
    194a:	40 52       	subi	r20, 0x20	; 32
    194c:	41 93       	st	Z+, r20
    194e:	02 d0       	rcall	.+4      	; 0x1954 <__ultoa_invert+0x84>
    1950:	a9 f7       	brne	.-22     	; 0x193c <__ultoa_invert+0x6c>
    1952:	ea cf       	rjmp	.-44     	; 0x1928 <__ultoa_invert+0x58>
    1954:	b4 e0       	ldi	r27, 0x04	; 4
    1956:	a6 95       	lsr	r26
    1958:	97 95       	ror	r25
    195a:	87 95       	ror	r24
    195c:	77 95       	ror	r23
    195e:	67 95       	ror	r22
    1960:	ba 95       	dec	r27
    1962:	c9 f7       	brne	.-14     	; 0x1956 <__ultoa_invert+0x86>
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	61 05       	cpc	r22, r1
    1968:	71 05       	cpc	r23, r1
    196a:	08 95       	ret
    196c:	9b 01       	movw	r18, r22
    196e:	ac 01       	movw	r20, r24
    1970:	0a 2e       	mov	r0, r26
    1972:	06 94       	lsr	r0
    1974:	57 95       	ror	r21
    1976:	47 95       	ror	r20
    1978:	37 95       	ror	r19
    197a:	27 95       	ror	r18
    197c:	ba 95       	dec	r27
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__ultoa_invert+0xa2>
    1980:	62 0f       	add	r22, r18
    1982:	73 1f       	adc	r23, r19
    1984:	84 1f       	adc	r24, r20
    1986:	95 1f       	adc	r25, r21
    1988:	a0 1d       	adc	r26, r0
    198a:	08 95       	ret

0000198c <__prologue_saves__>:
    198c:	2f 92       	push	r2
    198e:	3f 92       	push	r3
    1990:	4f 92       	push	r4
    1992:	5f 92       	push	r5
    1994:	6f 92       	push	r6
    1996:	7f 92       	push	r7
    1998:	8f 92       	push	r8
    199a:	9f 92       	push	r9
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	cf 92       	push	r12
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	ca 1b       	sub	r28, r26
    19b6:	db 0b       	sbc	r29, r27
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	09 94       	ijmp

000019c4 <__epilogue_restores__>:
    19c4:	2a 88       	ldd	r2, Y+18	; 0x12
    19c6:	39 88       	ldd	r3, Y+17	; 0x11
    19c8:	48 88       	ldd	r4, Y+16	; 0x10
    19ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    19cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    19d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    19d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    19d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    19d6:	b9 84       	ldd	r11, Y+9	; 0x09
    19d8:	c8 84       	ldd	r12, Y+8	; 0x08
    19da:	df 80       	ldd	r13, Y+7	; 0x07
    19dc:	ee 80       	ldd	r14, Y+6	; 0x06
    19de:	fd 80       	ldd	r15, Y+5	; 0x05
    19e0:	0c 81       	ldd	r16, Y+4	; 0x04
    19e2:	1b 81       	ldd	r17, Y+3	; 0x03
    19e4:	aa 81       	ldd	r26, Y+2	; 0x02
    19e6:	b9 81       	ldd	r27, Y+1	; 0x01
    19e8:	ce 0f       	add	r28, r30
    19ea:	d1 1d       	adc	r29, r1
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	ed 01       	movw	r28, r26
    19f8:	08 95       	ret

000019fa <_exit>:
    19fa:	f8 94       	cli

000019fc <__stop_program>:
    19fc:	ff cf       	rjmp	.-2      	; 0x19fc <__stop_program>
